{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-redefine/source/assets/hbe.style.css","path":"assets/hbe.style.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/assets/odometer-theme-minimal.css","path":"assets/odometer-theme-minimal.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/all.min.css","path":"fontawesome/all.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/brands.min.css","path":"fontawesome/brands.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/duotone.min.css","path":"fontawesome/duotone.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/fontawesome.min.css","path":"fontawesome/fontawesome.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/light.min.css","path":"fontawesome/light.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/regular.min.css","path":"fontawesome/regular.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/sharp-solid.min.css","path":"fontawesome/sharp-solid.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/solid.min.css","path":"fontawesome/solid.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/svg-with-js.min.css","path":"fontawesome/svg-with-js.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/thin.min.css","path":"fontawesome/thin.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/v4-font-face.min.css","path":"fontawesome/v4-font-face.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/v4-shims.min.css","path":"fontawesome/v4-shims.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/v5-font-face.min.css","path":"fontawesome/v5-font-face.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/fonts.css","path":"fonts/fonts.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/noto-sans-sc-v26-chinese-simplified-700.woff","path":"fonts/noto-sans-sc-v26-chinese-simplified-700.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/noto-sans-sc-v26-chinese-simplified-700.woff2","path":"fonts/noto-sans-sc-v26-chinese-simplified-700.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/noto-sans-sc-v26-chinese-simplified-regular.woff","path":"fonts/noto-sans-sc-v26-chinese-simplified-regular.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/noto-sans-sc-v26-chinese-simplified-regular.woff2","path":"fonts/noto-sans-sc-v26-chinese-simplified-regular.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/ubuntu-mono-v15-latin-regular.woff","path":"fonts/ubuntu-mono-v15-latin-regular.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/ubuntu-mono-v15-latin-regular.woff2","path":"fonts/ubuntu-mono-v15-latin-regular.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/images/loading.svg","path":"images/loading.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-avatar.svg","path":"images/redefine-avatar.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-favicon.svg","path":"images/redefine-favicon.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-logo.svg","path":"images/redefine-logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-logo.webp","path":"images/redefine-logo.webp","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/images/wallhaven-wqery6-dark.webp","path":"images/wallhaven-wqery6-dark.webp","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/images/wallhaven-wqery6-light.webp","path":"images/wallhaven-wqery6-light.webp","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-brands-400.ttf","path":"webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-brands-400.woff2","path":"webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-duotone-900.ttf","path":"webfonts/fa-duotone-900.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-duotone-900.woff2","path":"webfonts/fa-duotone-900.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-light-300.ttf","path":"webfonts/fa-light-300.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-light-300.woff2","path":"webfonts/fa-light-300.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-regular-400.ttf","path":"webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-regular-400.woff2","path":"webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-sharp-solid-900.ttf","path":"webfonts/fa-sharp-solid-900.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-sharp-solid-900.woff2","path":"webfonts/fa-sharp-solid-900.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-solid-900.ttf","path":"webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-solid-900.woff2","path":"webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-thin-100.ttf","path":"webfonts/fa-thin-100.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-thin-100.woff2","path":"webfonts/fa-thin-100.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-v4compatibility.ttf","path":"webfonts/fa-v4compatibility.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-v4compatibility.woff2","path":"webfonts/fa-v4compatibility.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/assets/build/styles.css","path":"assets/build/styles.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/animated.styl","path":"css/common/animated.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/basic.styl","path":"css/common/basic.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/markdown.styl","path":"css/common/markdown.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/redefine-theme.styl","path":"css/common/redefine-theme.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/variables.styl","path":"css/common/variables.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/archive-content.styl","path":"css/layout/archive-content.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/article-content.styl","path":"css/layout/article-content.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/category-content.styl","path":"css/layout/category-content.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/category-list.styl","path":"css/layout/category-list.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/home-content.styl","path":"css/layout/home-content.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/home-sidebar.styl","path":"css/layout/home-sidebar.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/page.styl","path":"css/layout/page.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/tag-content.styl","path":"css/layout/tag-content.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Chillax/Chillax-Variable.eot","path":"fonts/Chillax/Chillax-Variable.eot","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Chillax/Chillax-Variable.ttf","path":"fonts/Chillax/Chillax-Variable.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Chillax/Chillax-Variable.woff","path":"fonts/Chillax/Chillax-Variable.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Chillax/Chillax-Variable.woff2","path":"fonts/Chillax/Chillax-Variable.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Chillax/chillax.css","path":"fonts/Chillax/chillax.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Satoshi/Satoshi-Variable.eot","path":"fonts/Satoshi/Satoshi-Variable.eot","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Satoshi/Satoshi-Variable.ttf","path":"fonts/Satoshi/Satoshi-Variable.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Satoshi/Satoshi-Variable.woff","path":"fonts/Satoshi/Satoshi-Variable.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Satoshi/Satoshi-Variable.woff2","path":"fonts/Satoshi/Satoshi-Variable.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Satoshi/Satoshi-VariableItalic.eot","path":"fonts/Satoshi/Satoshi-VariableItalic.eot","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Satoshi/Satoshi-VariableItalic.ttf","path":"fonts/Satoshi/Satoshi-VariableItalic.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Satoshi/Satoshi-VariableItalic.woff","path":"fonts/Satoshi/Satoshi-VariableItalic.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Satoshi/Satoshi-VariableItalic.woff2","path":"fonts/Satoshi/Satoshi-VariableItalic.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Satoshi/satoshi.css","path":"fonts/Satoshi/satoshi.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/categoryList.js","path":"js/layouts/categoryList.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/lazyload.js","path":"js/layouts/lazyload.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/navbarShrink.js","path":"js/layouts/navbarShrink.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/toc.js","path":"js/layouts/toc.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/APlayer.min.js","path":"js/libs/APlayer.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/APlayer.min.js.map","path":"js/libs/APlayer.min.js.map","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/Swup.min.js","path":"js/libs/Swup.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/Swup.min.js.map","path":"js/libs/Swup.min.js.map","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupPreloadPlugin.min.js","path":"js/libs/SwupPreloadPlugin.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupPreloadPlugin.min.js.map","path":"js/libs/SwupPreloadPlugin.min.js.map","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupProgressPlugin.min.js","path":"js/libs/SwupProgressPlugin.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupScriptsPlugin.min.js","path":"js/libs/SwupScriptsPlugin.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupScrollPlugin.min.js","path":"js/libs/SwupScrollPlugin.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupScrollPlugin.min.js.map","path":"js/libs/SwupScrollPlugin.min.js.map","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupSlideTheme.min.js","path":"js/libs/SwupSlideTheme.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/Typed.min.js","path":"js/libs/Typed.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/anime.min.js","path":"js/libs/anime.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/mermaid.min.js","path":"js/libs/mermaid.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/mermaid.min.js.map","path":"js/libs/mermaid.min.js.map","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/minimasonry.min.js","path":"js/libs/minimasonry.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/odometer.min.js","path":"js/libs/odometer.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/pjax.min.js","path":"js/libs/pjax.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/waline.mjs","path":"js/libs/waline.mjs","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/waline.mjs.map","path":"js/libs/waline.mjs.map","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/aplayer.js","path":"js/plugins/aplayer.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/hbe.js","path":"js/plugins/hbe.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/masonry.js","path":"js/plugins/masonry.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/mermaid.js","path":"js/plugins/mermaid.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/tabs.js","path":"js/plugins/tabs.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/typed.js","path":"js/plugins/typed.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/codeBlock.js","path":"js/tools/codeBlock.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/imageViewer.js","path":"js/tools/imageViewer.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/lightDarkSwitch.js","path":"js/tools/lightDarkSwitch.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/localSearch.js","path":"js/tools/localSearch.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/runtime.js","path":"js/tools/runtime.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/scrollTopBottom.js","path":"js/tools/scrollTopBottom.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/tocToggle.js","path":"js/tools/tocToggle.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/code-block.styl","path":"css/common/codeblock/code-block.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/code-theme.styl","path":"css/common/codeblock/code-theme.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/highlight.styl","path":"css/common/codeblock/highlight.styl","modified":0,"renderable":1},{"_id":"source/images/23/1.png","path":"images/23/1.png","modified":0,"renderable":0},{"_id":"source/images/23/3.png","path":"images/23/3.png","modified":0,"renderable":0},{"_id":"source/images/23/4.png","path":"images/23/4.png","modified":0,"renderable":0},{"_id":"source/images/23/5.png","path":"images/23/5.png","modified":0,"renderable":0},{"_id":"source/images/23/2.png","path":"images/23/2.png","modified":0,"renderable":0},{"_id":"source/images/23/6.png","path":"images/23/6.png","modified":0,"renderable":0},{"_id":"source/images/32/1.png","path":"images/32/1.png","modified":0,"renderable":0},{"_id":"source/images/32/2.png","path":"images/32/2.png","modified":0,"renderable":0},{"_id":"source/images/32/3.png","path":"images/32/3.png","modified":0,"renderable":0},{"_id":"source/images/33/1.png","path":"images/33/1.png","modified":0,"renderable":0},{"_id":"source/images/33/2.png","path":"images/33/2.png","modified":0,"renderable":0},{"_id":"source/images/36/1.png","path":"images/36/1.png","modified":0,"renderable":0},{"_id":"source/images/36/2.png","path":"images/36/2.png","modified":0,"renderable":0},{"_id":"source/images/38/1.png","path":"images/38/1.png","modified":0,"renderable":0},{"_id":"source/images/38/2.png","path":"images/38/2.png","modified":0,"renderable":0},{"_id":"source/images/34/1.png","path":"images/34/1.png","modified":0,"renderable":0},{"_id":"source/images/34/2.png","path":"images/34/2.png","modified":0,"renderable":0},{"_id":"source/images/34/3.png","path":"images/34/3.png","modified":0,"renderable":0},{"_id":"source/images/34/4.png","path":"images/34/4.png","modified":0,"renderable":0},{"_id":"source/images/34/5.png","path":"images/34/5.png","modified":0,"renderable":0},{"_id":"source/images/34/6.png","path":"images/34/6.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/test1.md","hash":"2356780b6dcd07029bfaeae9b5b0e4d0398bf0c6","modified":1698921903935},{"_id":"source/categories/index.md","hash":"d5f1317984d7bcf34e852ea406275e8e2d2a91d0","modified":1698921052506},{"_id":"source/tags/index.md","hash":"6ff8c6b2f63bf64abb7373b6d325c0a4141b22cb","modified":1698921782364},{"_id":"source/_posts/test.md","hash":"866d40d3ad863c0691fb67c9819cb1e1ad18dee2","modified":1698921872143},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1698914372262},{"_id":"node_modules/hexo-theme-redefine/CODE_OF_CONDUCT.md","hash":"61a6276ef54989b7a1325f3ecb3183a4dfdf50cb","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/.editorconfig","hash":"a1c91f0a086bf92fddb02ccf23578ec2b51c099c","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/README.md","hash":"a679736ed45b2e148abe95c69d6e6df5095e276b","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/CONTRIBUTING.md","hash":"c6ef834f602b7ae02e2863a2a857e0ce8d392f15","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/package.json","hash":"b46cf7c624e52415c7fb54779bdf197319acbcec","modified":1728885509068},{"_id":"node_modules/hexo-theme-redefine/README_zh-CN.md","hash":"617f5f58561aaa59366d8beb5843a89059033a43","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/_config.yml","hash":"4560af6cad7977457fa597b8e479a415de364228","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/languages/en.yml","hash":"26b0abd54ece4073eb9716bc4afddc0bf6e5b7a7","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/languages/ja.yml","hash":"cac82dd1dbcf086a6b022e26db1202e5496477a6","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/tailwind.config.js","hash":"ea2653b0bbde6e865f3fb01f0e11700829f3ca42","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/languages/zh-CN.yml","hash":"eac90103634a331b094758cffec9c448df374771","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/DONATION.md","hash":"528ed729881a6bd4382fb40277419ea5b2247f46","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/README_zh-TW.md","hash":"331dcbda93df4ba1e82bb241381d421e1c7d6936","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/404.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/archive-content.ejs","hash":"10d1423d77d7c128170c9179f9903c57a020ff03","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/archive.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/category-content.ejs","hash":"5c4fdc9c2b7f225edb7ebb2abf6925b81c5e698f","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/category-list.ejs","hash":"4bd20b18bdf10dfdce5ddcddfac2605800d18973","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/article-content.ejs","hash":"b9c202dc978cabffbd7642dce8c25836e94dcd42","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/languages/zh-TW.yml","hash":"1231bb0e2858235005761d2080e3c848cf14d97c","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/category.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/tag-content.ejs","hash":"6134aa2a112b9d8daa3eeaf9a1ee41bbeaf7eb24","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/tag.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/scripts/dataHandle.js","hash":"3a069d3f529dceed3fd98e99d5940989f1087305","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/.github/ISSUE_TEMPLATE/bug-report--english-version-.md","hash":"6b7cd67ce8911fdc0863da1b54e404514c7e85e5","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/tags.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/.github/ISSUE_TEMPLATE/功能建议--中文版本-.md","hash":"ef69a31bcdbe2f749fd4990a4a85d51c300cd2dd","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/.github/ISSUE_TEMPLATE/feature-request--english-version-.md","hash":"243dbc4cf0678ca4f89fc2559eab3ace9fa881a7","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/index.ejs","hash":"f5fee4e079a9c2c23059ebde4cd89ec723e310c6","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/layout.ejs","hash":"e13ebcba0323e0641457d04009c6b548b914ef3d","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/page.ejs","hash":"0d43cc355011db0c5815610205851efd3ccbf691","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/.github/ISSUE_TEMPLATE/bug-提交--中文版本-.md","hash":"77f0505fac56079f78f197e061586f82993d7652","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/.github/workflows/npm-publish.yml","hash":"2b1771ae2a71e3c148b09d507f9be47d04e6e623","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_meta/article-copyright.ejs","hash":"99abeff9caf74f72696b03fff0d079f6a6d373b4","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_meta/home-article.ejs","hash":"b54a0df26341fa5f26a6e1eedb91cd11014d50c5","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/.github/workflows/aliyun_cdn.yml","hash":"5b857a504539b739df992fa2894ba72fde6985ca","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_meta/article-info.ejs","hash":"1d551beb7cc47d6c841ce63a7f0f0ffb30c1770b","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_plugins/swup.ejs","hash":"9fbfd2872dfbe92ec715357d5238647987d8cbdf","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/404-template.ejs","hash":"e3574f623ea22ec3e90413909321a9a3b447f7e2","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/footer.ejs","hash":"12ac57a0d3683cc6f6b382779e5b3fd75fe7c01f","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/home-banner.ejs","hash":"2d8b5501eeda2dc521cb411c30ecce43ecabf3df","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/head.ejs","hash":"2fda75fcd1d53357561022a202042cd3c57d11d7","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_plugins/aplayer.ejs","hash":"c8f275cdbbe14b4673c69f7c1463b1f830ec8e40","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/home-content.ejs","hash":"43e1a8eb958a11d8944b5c8236fa35e7400a0074","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/home-background.ejs","hash":"1ced31279e1ff946eed8497692bd11c6b81a4b46","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/page-template.ejs","hash":"5d03f543ae291598ee227af758da73304a51633e","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/scripts.ejs","hash":"6e8b93048dafe13279a321ba0d7b44b54b76b93a","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_widgets/archive-list.ejs","hash":"e5a76d50661b913d2dbfd0163cf0fd83ac4ceca2","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_widgets/friends-link.ejs","hash":"bacaf6f0e958fa7d9be17a59d3a8bae4b9119501","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_widgets/image-viewer.ejs","hash":"beb3dec5e08856a29d585fe0eb94a8a6ddade4dd","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_widgets/local-search.ejs","hash":"72c9acca0280f0e63e6a5d31618dd2707bdbec3f","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/navbar.ejs","hash":"55f072d45967fc3dc522ff8e56c8b17d9f63c964","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_widgets/paginator.ejs","hash":"a237e7b858e0cf32ca67553d540f7c5f7239a8d0","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_widgets/post-tools.ejs","hash":"c2d193e84e0781423ce1c018ee2be1116359d694","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_widgets/progress-bar.ejs","hash":"0a9fee70154e068dc4f3e11bc378d9762d41753e","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_widgets/masonry.ejs","hash":"6b8ec5cff3dcf9f494b32237e6911c6e1e9dd9a1","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_widgets/essays.ejs","hash":"98728d1728bf30bc29c7c72af02805bf2d960ae7","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/scripts/events/welcome.js","hash":"3e8592663e68e1af13f58f74593dff832d3498a8","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_widgets/tagcloud.ejs","hash":"f9748bef46031c9a4875a60662e96cdb443e9771","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/home-sidebar.ejs","hash":"e04b6d13f7e1fff51928f4c2d2005e4d8eb7e210","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_widgets/side-tools.ejs","hash":"3b6b75a902ba673f8f0a144db63bd144d0d5b648","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/scripts/filters/imgHandle.js","hash":"b396fe7b6cbc331f2952aa7561f96c1f250d8c52","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/scripts/events/404.js","hash":"169245d7b2af1ff401cf76e718c28b4e38f637c7","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/scripts/filters/lazyloadHandle.js","hash":"f8ae44311e6463e887c07a41910ebade8766bac2","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/scripts/filters/linkHandle.js","hash":"7d8cb128dbfed1a4ef9b07142a63ba0c6c383628","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/scripts/filters/tableHandle.js","hash":"c500c45cd9221788df1f31939c5399eabb62ebb5","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/scripts/helpers/articleRecommend.js","hash":"6a39431c17cac9f07d0239989fc99fce343f9684","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_widgets/toc.ejs","hash":"46ef94dca9be59d163f6b4cba16e1695e8020bc3","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/scripts/filters/stylHandle.js","hash":"8a8bf069ce096bd7b42952c8e50c3c89758cbc13","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/scripts/filters/encrypt.js","hash":"0daf029e7441426afcab94f5f9e1ed316e3b71f6","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/scripts/helpers/seoGenerate.js","hash":"e0059a60cc5978be6792dcf795a2ece3a509f41a","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/scripts/helpers/configExport.js","hash":"c1e5b36a8d8e97218c8cc1aab77ec38d5457c846","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/scripts/helpers/autoCanonical.js","hash":"f3ea74759129c71041371a1d77c687eb6aa88d3a","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/scripts/modules/btn.js","hash":"3e4c1b01a1f922f712895e9ac06c030231b35cf2","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/scripts/modules/btns.js","hash":"a91492e772287114527a3fbc85f0c7c1c1b15eb3","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/scripts/modules/note-large.js","hash":"ff5709e1d8f1f940461e434ad89ff1437c2e80d3","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/scripts/modules/note.js","hash":"06a7ce9daa5e1064264ad7efe1665552c9f1b44b","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/scripts/modules/tabs.js","hash":"74e3b0cdd009206f7b78b04dcb96eccd86e7a996","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/scripts/helpers/themeHelpers.js","hash":"a9b04dc09d23f0dba620c61f6cbc9eff1614dd65","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/LICENSE","hash":"a2f9ffbf32eeb6284afa81bc4fb4c27b80d044e9","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/assets/hbe.style.css","hash":"29be8fc47be885e9954e310cbc68dfadd3b4cee6","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/regular.min.css","hash":"d27c4fed54dacff688010e51f611d950dd6e0aca","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/sharp-solid.min.css","hash":"7d1a13c6b8178b29f5bcb1a639a1998fc9de16c4","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/light.min.css","hash":"18a176eb2486db4e938e568083fa578b641ccc83","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/solid.min.css","hash":"e727feabedb171fb0b398151870d7739ef4e2432","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/assets/odometer-theme-minimal.css","hash":"793c31feb38e241a5ff6ecc5e65e61751507d728","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/v4-font-face.min.css","hash":"0be987628c8b485b39f064da41c90f15c0596c1f","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/scripts/modules/folding.js","hash":"cfa6646c1350c557430149bd52578c6cac59063b","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/thin.min.css","hash":"3d46be31379b07ffb24d69c6c915725eaa2e89e9","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/v5-font-face.min.css","hash":"260ea7a5e0b89963a5dcf2600a4decdf0f408f3f","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/fonts/fonts.css","hash":"850cf3679dfc1f5b7fe44b1377f2f85f1ec8531f","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/brands.min.css","hash":"5119c35bbd273d2ea2501997827f6d644da93164","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/style.styl","hash":"d9450b06a5391ba6f62690bfef2071a1c8e7e893","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/v4-shims.min.css","hash":"96f037860b8e9b59af8e47571ea98791616dbfd8","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/svg-with-js.min.css","hash":"f4c08e37c4d44b3ed7a3f377d1cb5d7fca4d04bc","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/fonts/ubuntu-mono-v15-latin-regular.woff2","hash":"e583803593916547b1101a56c216526fa2d26d1c","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/images/loading.svg","hash":"938c2a41c8ba18e37ed659e481696e40a4c8f3a4","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-avatar.svg","hash":"d0d20061bda08894a82d7691b660be7c6aaa0608","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-favicon.svg","hash":"420f930a1df64a3c4391ff80326a8a2d7d5a6418","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-logo.svg","hash":"472776b6f013aad44706fee6c94201c96ee83932","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-logo.webp","hash":"0a07e3fb6d9125dee44798c8c110187b16fb42a9","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/fonts/ubuntu-mono-v15-latin-regular.woff","hash":"c7abad03bf081ed35bb434cb5b34b5c59c852f16","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/main.js","hash":"a9ce4d8a91ddc7811cf9715be1f857cd899d7382","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/images/wallhaven-wqery6-light.webp","hash":"d25389973d0359b78f1e9c74a850ef425690ba40","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/utils.js","hash":"f53b1be9aaa89c133ad1e3f5fab487ed7c1f6f22","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/images/wallhaven-wqery6-dark.webp","hash":"d0066e0b025ae748448a3d6a96165d45a55d2f22","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-v4compatibility.woff2","hash":"d02b1adc81fd5bec023e25a7770779b99d6dd742","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/comments/giscus.ejs","hash":"5a20975c17daeed5a602dedd0682a29d7c56e42f","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-v4compatibility.ttf","hash":"b54531dd09c5089eb93b12ce8f90ff521855ff8a","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/comments/gitalk.ejs","hash":"4c9e6d12f58f7f445d4eab768a52e81be4f87ae3","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/scripts/filters/lib/hbe.default.js","hash":"fee2c92011ef007121b992193bbab0f3b196d873","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/comments/twikoo.ejs","hash":"2945e818e4406fbb5628a465023c7e4d445c0975","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/comments/comment.ejs","hash":"4ca12a0bcb85a03dec368c5e12eebf2905aeb404","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/common/animated.styl","hash":"ab52b066c427cee62d67e4da136878114c7b1afe","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/comments/waline.ejs","hash":"f73f63f41776915890fd59771afc58adae85da63","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/common/basic.styl","hash":"0493e7ae8c2b07cf1172fa1b68ea1ec74795878b","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/archive-content.styl","hash":"4e329547447c716c986e0b4a4f54afc59fc6b486","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/article-content.styl","hash":"1e13a524ae358594d56bd644c1c3082d5334588c","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/category-content.styl","hash":"4f9a5559b5269ec74b5f49ac113268f747bf0243","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/assets/build/styles.css","hash":"c75dca367f119cd945930596c2652e8b638e724a","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/category-list.styl","hash":"9959507beb382779a0bef9bf19bda9117a9568d6","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/common/markdown.styl","hash":"035d2cf95e50d85977d4ec9045c28d0337fd74ab","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/home-content.styl","hash":"4ffdfcd2f89c11e1ba662c2068fffe5f1379a603","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/home-sidebar.styl","hash":"3a63a4f1beb1462b78e41419c8c7c2ce5abf1d8c","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/page.styl","hash":"e5c0b44623d18d0c2674069b3796546dd9857b8d","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/tag-content.styl","hash":"6c9ec582c1d8699bdff5a4cd1524121cc6ca8522","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/common/variables.styl","hash":"369616699fd9a0ca831e4b6a6f07171ff1cd63fc","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/common/redefine-theme.styl","hash":"5bf88f1d98c21358678ac0bdb570f4b8adbb492a","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Chillax/Chillax-Variable.woff","hash":"fc0e791429c274c4c9312d810e7ae9503cab34ab","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Chillax/Chillax-Variable.woff2","hash":"fc5d99b40db9deca7d151f9bd16b96ff160828b7","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Satoshi/Satoshi-Variable.woff","hash":"d731068e2b28d4f1dfe5b4dbe8cce9c082fa8572","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Chillax/chillax.css","hash":"ac7d8777d601070e08fb262ec6d7bc97c508afa7","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Satoshi/Satoshi-VariableItalic.woff","hash":"e44272b921c0a14e77c640cc4cf209c4b80cb205","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Satoshi/Satoshi-VariableItalic.woff2","hash":"dafa429c1d0a4b053b8fbb8c70478b8dbcb9ee9c","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/navbarShrink.js","hash":"7c8c51f586b6595eae8460d8ae0b96e2946f708f","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/lazyload.js","hash":"c06323d68bbdebbb685db5010e7655b8ed0caf42","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/toc.js","hash":"7a768982f6cb1f40552cce063d5743fe862db762","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Satoshi/satoshi.css","hash":"59b058f8bc9144c7799b86af728cf44dc7b3921c","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/Swup.min.js","hash":"cc054d34e74a1feecfae75064f6a4d6107607396","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/categoryList.js","hash":"eb1af2cd0726f56ff7861222ea543315fe295a17","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupProgressPlugin.min.js","hash":"fd30fe1c43072017f67bbaac18b962a5ac218711","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupScriptsPlugin.min.js","hash":"b17f3434035f1339d6f9cd5c8a055d2a1b6602e9","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Satoshi/Satoshi-Variable.woff2","hash":"2d34d398b398a7fd88d21fae7642cdca908bf3ee","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupPreloadPlugin.min.js.map","hash":"40513fec1323b601667876a97a9ef8a0c88bff63","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupScrollPlugin.min.js.map","hash":"63cf04ba556b256379e103ef7d3ba12d629449a4","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupSlideTheme.min.js","hash":"e9d143780e879d958164b1356b7f918ec25e838a","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupScrollPlugin.min.js","hash":"6c3afca9bb98f79d14516c093f27e3e50a3fd82e","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/Typed.min.js","hash":"e8ce2b674a637b0c0396a3106c1aedf10186249c","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/odometer.min.js","hash":"fe5beb60997c84ab2f91b54535c4221443cdd21f","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/minimasonry.min.js","hash":"9681cc509cb8aa733d36aad032e6e8acdb33c08c","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupPreloadPlugin.min.js","hash":"d911512891ecbe1935203bcd3d93427ad75e45c8","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/hbe.js","hash":"abd3b27238e26dc3bdd65e0e69fa514fa432a75b","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/tabs.js","hash":"964ec5c25a8d78763ba2ba9bfbd5b1b49ed05381","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/pjax.min.js","hash":"3d796e5be9cdd4067c94e190ea2482d7fdb4856c","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/masonry.js","hash":"a36ff4b985f52367040e7176cc94e5f5c67b648b","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/codeBlock.js","hash":"344e6c83e6ffda22f6e5bc724d603066b49a7d8b","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/imageViewer.js","hash":"99362b206dfa7cba7aa334e56d85af3392b2af27","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/typed.js","hash":"01799d5c07633f33b1d2893f524054074d56ec65","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/mermaid.js","hash":"303254d382869ed618025fcb328426bd10314583","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/localSearch.js","hash":"f6e59f65c676457198c2cf5d78bd06052499ee38","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/tocToggle.js","hash":"33a2e97b630db736948a6b45d2d8cd18f5a5c36f","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/runtime.js","hash":"eb0374b6f033f7ac25f49b1b079aa163e14b0fcd","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/scrollTopBottom.js","hash":"9e54fa4310bb98ea5ba61780a9ef56d05d475203","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/highlight.styl","hash":"39a8032d5ca2872ef9268856a77d212200d07651","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/code-block.styl","hash":"0593c3555640bb9132caaccac9821225ea3b97c8","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_modules/buttons.styl","hash":"18bd3c1d00e2cc6416cef69433b207ae5c947ba1","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_modules/folding.styl","hash":"8ce08bc6bec684c1e5ebb6221e0dd3ded47010d5","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/aplayer.js","hash":"150ceb910584ccd0b4a9558d9e2360c1409c1149","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/code-theme.styl","hash":"05e95f07589b1f78081f95cef4749a7041f24b81","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_modules/tabs.styl","hash":"dbf47ca4ceb2951843b3170ec893077216158191","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/404.styl","hash":"16215f6fe664d1ddc5744a626405bc774dc30f70","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/archive-list.styl","hash":"83e56a7640af063b8f47d09ca8b3e3517c986b1a","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/article-copyright-info.styl","hash":"810d182789bce6fc27a30e2eafc21d3d292fb9af","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/article-meta-info.styl","hash":"1f680910751b36c4445a48c5a48eda3187412eaf","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/footer.styl","hash":"b9028c74a9f75536d5a7cee77a25a5d77469515a","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/home-banner.styl","hash":"80ad49c75995120b0872d11561f081df8995ba97","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_modules/aplayer.styl","hash":"f3943142b2415a0ff7c2c36729e8f8939b548222","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/local-search.styl","hash":"a9c99c57b27afbe7f00f1f14f0e46c41748affb5","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/navbar.styl","hash":"350e65e2e79f377b6a5bc4230c2eb3bbd2bc244a","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/page-template.styl","hash":"2ce7bf6476ffb2e5f58943cac0bb77bf976bc9c3","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/paginator.styl","hash":"53421b731f3d7ed34a3a4c87405e06ae3d6519e0","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/post-tools.styl","hash":"d602c2fe191d2c639f7cd8c4d0ee618f8c80f5c1","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/progress-bar.styl","hash":"f94780762572055a0eb56b41e0e676262b38cf6a","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/side-tools.styl","hash":"995982b8c228f7386d352042f64587d06663716e","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/lightDarkSwitch.js","hash":"97b7e68f871dc218fceca77b85ac051c7c6306af","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/tagcloud.styl","hash":"d66f59c0b2d5b9ed64ef50bffee3a3d0bef1f114","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_modules/notes.styl","hash":"1fd993ad830c24c10b41d5487bf4d241094055ce","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/toc.styl","hash":"13949981a5afa2b0483da1836af5999d992961f9","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/comments/comment.styl","hash":"5d1b3424845a065b3082fe577081da60845db05e","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/image-viewer.styl","hash":"1d4282ed56294302f10c3435127252fef0af46da","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/comments/waline.styl","hash":"24ad25f1344b51f0ccb436644e70d95e84fd8f40","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/comments/twikoo.styl","hash":"448cbc045bcffa2d666094b81dd99eb980676fff","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/comments/gitalk.styl","hash":"85f26189ec6dee13a0a743687e7b5391f170c33f","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-brands-400.woff2","hash":"a358912d781e6249a8d291e4ce9ebd0a9ab9452e","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Satoshi/Satoshi-VariableItalic.ttf","hash":"62c34444221ff17e93a8e1cadfea5a8c68ea705b","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Satoshi/Satoshi-Variable.ttf","hash":"d49872a745842f389bc9d24b73d0a3090fce50b1","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Satoshi/Satoshi-VariableItalic.eot","hash":"7525ee5ad63e4bb198910286ff176587f43fc5c3","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Satoshi/Satoshi-Variable.eot","hash":"2b6ff9014b62876c03d8f579bf00ffcc6ac44bd8","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/Swup.min.js.map","hash":"f74755d9318a86939791027767f631472b876207","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/fontawesome.min.css","hash":"44e6d666b45a6875e4fce11159876129e7a1cceb","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-brands-400.ttf","hash":"ba9322d66c19f635e15e458cc39fcb509818332f","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Chillax/Chillax-Variable.eot","hash":"50a4e2ab17155fe7449e0ee488a6242180f3b256","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Chillax/Chillax-Variable.ttf","hash":"01aafadc0ca4ace59127a5594a8f534e83b84879","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/waline.mjs","hash":"b53165275a5606f6d26bba216f4b218dcc790837","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/APlayer.min.js.map","hash":"31a19da0f0cb6b00ec212eafa847f31af86788df","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-sharp-solid-900.woff2","hash":"74d0af1108ab8157993ca03cef80e89e35e2408d","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-solid-900.woff2","hash":"e73d164db2aff2c91d18c07da03e8db9d0c5dfd4","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/duotone.min.css","hash":"0becc4b085bd9d377a8ff4b5160f8e19c8ec27a0","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-regular-400.woff2","hash":"486fed640153de1de84f460834c73daef060ed20","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-duotone-900.woff2","hash":"2cc24434345b80a844a6bda1139539fe41e4df53","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-light-300.woff2","hash":"def760895375328ccdcf62b2b9b9001a21947acd","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/all.min.css","hash":"630bf0e29410ec27622f65d1270c6bc435cdff21","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-thin-100.woff2","hash":"e0a4482c20f6b67784df54965539a317a3bd681b","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-sharp-solid-900.ttf","hash":"0d710cd7bd1b7ff574e88bb812de82babe45e415","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-solid-900.ttf","hash":"40b536c3667547db70ee9ca6f3c94fbc33e0cab7","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/mermaid.min.js","hash":"c11ca6043d8dae028448a808105f8c888faac8f5","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-regular-400.ttf","hash":"cdec068700dc440530e5bbeff7e8bb33a01b4132","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/waline.mjs.map","hash":"a58abd8799bfa9580d5835ea6a79862c059aedcd","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-light-300.ttf","hash":"cc5d9f4f994c82e23f58cdde1eec8792d81633c7","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-thin-100.ttf","hash":"c1fee6e6986b14533ce022afada5fbe10c0f6562","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-duotone-900.ttf","hash":"e0313a772ea710cb5ea4bd08f5dedb0a0025f8ca","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/fonts/noto-sans-sc-v26-chinese-simplified-regular.woff2","hash":"eb3b3063cf2be7bd96146051168f11327f4e28d7","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/fonts/noto-sans-sc-v26-chinese-simplified-700.woff2","hash":"3a046e40a1b2a8537a2d60db4f3b4f915852a722","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/fonts/noto-sans-sc-v26-chinese-simplified-regular.woff","hash":"7c2e7b6873eabd4dc1fe2aee5c6d542fe8743356","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/fonts/noto-sans-sc-v26-chinese-simplified-700.woff","hash":"11df5a4313f3730378dd78fcfcb444d845b389e1","modified":499162500000},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/mermaid.min.js.map","hash":"7d303cf926754817c4360f92e6c39b8c390cdbdb","modified":499162500000},{"_id":"public/images/loading.svg","hash":"a0d7478cd95cdcfc4ecec5d6c0a9f3d2a9c03b51","modified":1698923018197},{"_id":"public/images/redefine-avatar.svg","hash":"574ea402ffbba0205744e8080f9ca755d5989988","modified":1698923018197},{"_id":"public/images/redefine-favicon.svg","hash":"cdbbde55b1a9107c122e6ff05d0962cfd2ff242e","modified":1698923018197},{"_id":"public/images/redefine-logo.svg","hash":"04f9649050979d2e3dad989455c987f8dcbd3f79","modified":1698923018197},{"_id":"public/search.xml","hash":"d9671a700d627b3cefd0d97c09873edaed14d0ce","modified":1736926082653},{"_id":"public/404.html","hash":"ac207d411f9272167f4fa52a4d7289e5e1eeca8c","modified":1735834043567},{"_id":"public/categories/index.html","hash":"9e4d5657b8fcccd895fd3104800a2fb53d520e7a","modified":1736926082653},{"_id":"public/tags/index.html","hash":"d2b3483d84cbfb3c6cda2cc5d30c5008697b2e20","modified":1736926082653},{"_id":"public/2023/11/02/test1/index.html","hash":"91445a36c60ca8e15b2a66c2e2a0950660e07b06","modified":1699322898830},{"_id":"public/2023/11/02/test/index.html","hash":"b670fa597820070209816c3592cea5ebf546796c","modified":1698981283233},{"_id":"public/2023/11/02/hello-world/index.html","hash":"c8ecf1307e479dd2563a509b6cb2dbf9c18d5f0d","modified":1699958333135},{"_id":"public/categories/test1-test11/index.html","hash":"57ade7c76386a66dec1a4366796f711b3a29b11e","modified":1698981283233},{"_id":"public/categories/test2-test22/index.html","hash":"1881f253ae6ee20e6561e0cc40cb6de0c2355f91","modified":1698981283233},{"_id":"public/archives/index.html","hash":"d8a0164853a9c07e13b965ea9920213b5cb1ffb8","modified":1736926082653},{"_id":"public/archives/2023/index.html","hash":"036661d46decb7a11a922265b5cbfcd23d31d3a4","modified":1736926082653},{"_id":"public/archives/2023/11/index.html","hash":"31c5791c6aa8b383f25283ea25c23147b19be641","modified":1736926082653},{"_id":"public/tags/java/index.html","hash":"946c9173941b09b28b73d4df8e395f10e77526f2","modified":1698981283233},{"_id":"public/index.html","hash":"d72d9baa7501f616b7d3ff000435845e4bb3c408","modified":1736926082653},{"_id":"public/tags/test1/index.html","hash":"c957d3dd5efd7fdce3d62005696e4544bd883d8d","modified":1698981283233},{"_id":"public/tags/test2/index.html","hash":"e70629d25a7107471a4ee2aea28f2106468437b5","modified":1698981283233},{"_id":"public/tags/test3/index.html","hash":"38061f54e63d9f3674b35ffd57f95dc1bc72f2fd","modified":1698981283233},{"_id":"public/fonts/ubuntu-mono-v15-latin-regular.woff2","hash":"e583803593916547b1101a56c216526fa2d26d1c","modified":1698923018197},{"_id":"public/images/redefine-logo.webp","hash":"0a07e3fb6d9125dee44798c8c110187b16fb42a9","modified":1698923018197},{"_id":"public/fonts/ubuntu-mono-v15-latin-regular.woff","hash":"c7abad03bf081ed35bb434cb5b34b5c59c852f16","modified":1698923018197},{"_id":"public/images/wallhaven-wqery6-light.webp","hash":"d25389973d0359b78f1e9c74a850ef425690ba40","modified":1698923018197},{"_id":"public/images/wallhaven-wqery6-dark.webp","hash":"d0066e0b025ae748448a3d6a96165d45a55d2f22","modified":1698923018197},{"_id":"public/webfonts/fa-v4compatibility.woff2","hash":"d02b1adc81fd5bec023e25a7770779b99d6dd742","modified":1698923018197},{"_id":"public/webfonts/fa-v4compatibility.ttf","hash":"b54531dd09c5089eb93b12ce8f90ff521855ff8a","modified":1698923018197},{"_id":"public/fonts/Chillax/Chillax-Variable.woff","hash":"fc0e791429c274c4c9312d810e7ae9503cab34ab","modified":1698923018197},{"_id":"public/fonts/Chillax/Chillax-Variable.woff2","hash":"fc5d99b40db9deca7d151f9bd16b96ff160828b7","modified":1698923018197},{"_id":"public/fonts/Satoshi/Satoshi-Variable.woff2","hash":"2d34d398b398a7fd88d21fae7642cdca908bf3ee","modified":1698923018197},{"_id":"public/fonts/Satoshi/Satoshi-Variable.woff","hash":"d731068e2b28d4f1dfe5b4dbe8cce9c082fa8572","modified":1698923018197},{"_id":"public/fonts/Satoshi/Satoshi-VariableItalic.woff2","hash":"dafa429c1d0a4b053b8fbb8c70478b8dbcb9ee9c","modified":1698923018197},{"_id":"public/fonts/Satoshi/Satoshi-VariableItalic.woff","hash":"e44272b921c0a14e77c640cc4cf209c4b80cb205","modified":1698923018197},{"_id":"public/js/libs/SwupPreloadPlugin.min.js.map","hash":"40513fec1323b601667876a97a9ef8a0c88bff63","modified":1698923018197},{"_id":"public/js/libs/SwupScrollPlugin.min.js.map","hash":"63cf04ba556b256379e103ef7d3ba12d629449a4","modified":1698923018197},{"_id":"public/css/hbe.style.css","hash":"29be8fc47be885e9954e310cbc68dfadd3b4cee6","modified":1698923018197},{"_id":"public/lib/hbe.js","hash":"abd3b27238e26dc3bdd65e0e69fa514fa432a75b","modified":1698923018197},{"_id":"public/webfonts/fa-brands-400.woff2","hash":"a358912d781e6249a8d291e4ce9ebd0a9ab9452e","modified":1698923018197},{"_id":"public/fonts/Satoshi/Satoshi-Variable.eot","hash":"2b6ff9014b62876c03d8f579bf00ffcc6ac44bd8","modified":1698923018197},{"_id":"public/fonts/Satoshi/Satoshi-Variable.ttf","hash":"d49872a745842f389bc9d24b73d0a3090fce50b1","modified":1698923018197},{"_id":"public/fonts/Satoshi/Satoshi-VariableItalic.eot","hash":"7525ee5ad63e4bb198910286ff176587f43fc5c3","modified":1698923018197},{"_id":"public/fonts/Satoshi/Satoshi-VariableItalic.ttf","hash":"62c34444221ff17e93a8e1cadfea5a8c68ea705b","modified":1698923018197},{"_id":"public/js/libs/Swup.min.js.map","hash":"f74755d9318a86939791027767f631472b876207","modified":1698923018197},{"_id":"public/assets/hbe.style.css","hash":"e94a573eb11412493b6146a057535776d068efb7","modified":1698923018197},{"_id":"public/assets/odometer-theme-minimal.css","hash":"c526d6574eeb0c56d560a2f44c806c0117de78fe","modified":1698923018197},{"_id":"public/fontawesome/light.min.css","hash":"18a176eb2486db4e938e568083fa578b641ccc83","modified":1698923018197},{"_id":"public/fontawesome/regular.min.css","hash":"d27c4fed54dacff688010e51f611d950dd6e0aca","modified":1698923018197},{"_id":"public/fontawesome/solid.min.css","hash":"e727feabedb171fb0b398151870d7739ef4e2432","modified":1698923018197},{"_id":"public/fontawesome/sharp-solid.min.css","hash":"7d1a13c6b8178b29f5bcb1a639a1998fc9de16c4","modified":1698923018197},{"_id":"public/fontawesome/v4-font-face.min.css","hash":"0be987628c8b485b39f064da41c90f15c0596c1f","modified":1698923018197},{"_id":"public/fontawesome/thin.min.css","hash":"3d46be31379b07ffb24d69c6c915725eaa2e89e9","modified":1698923018197},{"_id":"public/fontawesome/v5-font-face.min.css","hash":"260ea7a5e0b89963a5dcf2600a4decdf0f408f3f","modified":1698923018197},{"_id":"public/fonts/fonts.css","hash":"e8e37fb156e0aa71d287c5ea3dc11bbea3526a26","modified":1698923018197},{"_id":"public/js/main.js","hash":"33d4eda80e13a85d915f32a552ce61a1c408823d","modified":1698923018197},{"_id":"public/js/utils.js","hash":"b036e70c3a82bbe857815a9f655beca69e84ba4f","modified":1698923018197},{"_id":"public/assets/build/styles.css","hash":"bd611373f863f049cc64e161ec4c9d593336276a","modified":1698923018197},{"_id":"public/css/common/basic.css","hash":"87cfc93087eb71edd99c1a61c21c38a5f6a503c0","modified":1698923018197},{"_id":"public/css/common/animated.css","hash":"6bce6cd2bc3ba5374216b35d1da320bdbeaac795","modified":1698923018197},{"_id":"public/css/common/markdown.css","hash":"cdfd138c6246c28f2b61d0bd71fb90f73db94912","modified":1698923018197},{"_id":"public/css/layout/archive-content.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1698923018197},{"_id":"public/css/common/redefine-theme.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1698923018197},{"_id":"public/css/layout/category-content.css","hash":"a898437c815ba43a331087c818dd15c064e9b925","modified":1698923018197},{"_id":"public/css/common/variables.css","hash":"c1ac304995abc0926b8720762628c5e230fea220","modified":1698923018197},{"_id":"public/css/layout/home-sidebar.css","hash":"67f507681c161d10d021d7b45743e5998806f620","modified":1698923018197},{"_id":"public/css/layout/home-content.css","hash":"6f1f2393054a49dad65ab447efff3709f32bc19b","modified":1698923018197},{"_id":"public/css/layout/category-list.css","hash":"d6e072db9b3507558749ed5098fe679061cd9e1a","modified":1698923018197},{"_id":"public/css/layout/page.css","hash":"de400d3d30b347e3c5de4e3e751eeb68fac1c836","modified":1698923018197},{"_id":"public/css/layout/tag-content.css","hash":"8e1a506ab561653511fc1bf1c4f65876a44e773f","modified":1698923018197},{"_id":"public/fonts/Chillax/chillax.css","hash":"ab7791916b4cebe5fa5b7f5a609a604232ae29e3","modified":1698923018197},{"_id":"public/fonts/Satoshi/satoshi.css","hash":"327fe4653ffe8c65e104a318569da93cefed7d58","modified":1698923018197},{"_id":"public/js/layouts/lazyload.js","hash":"8fc0b1c3e24b83a18b2511883254fc5fc25d5e70","modified":1698923018197},{"_id":"public/js/layouts/categoryList.js","hash":"25567ff3f0f0487ba8f668724e8c521971d72a56","modified":1698923018197},{"_id":"public/js/layouts/navbarShrink.js","hash":"b3c49352720c364550909824e3786a5de73563bc","modified":1698923018197},{"_id":"public/js/layouts/toc.js","hash":"69454335f930692ef2410b73b672056f1802e980","modified":1698923018197},{"_id":"public/js/libs/SwupPreloadPlugin.min.js","hash":"d911512891ecbe1935203bcd3d93427ad75e45c8","modified":1698923018197},{"_id":"public/js/libs/SwupProgressPlugin.min.js","hash":"fd30fe1c43072017f67bbaac18b962a5ac218711","modified":1698923018197},{"_id":"public/js/libs/SwupScriptsPlugin.min.js","hash":"b17f3434035f1339d6f9cd5c8a055d2a1b6602e9","modified":1698923018197},{"_id":"public/js/libs/SwupSlideTheme.min.js","hash":"e9d143780e879d958164b1356b7f918ec25e838a","modified":1698923018197},{"_id":"public/js/libs/Typed.min.js","hash":"e8ce2b674a637b0c0396a3106c1aedf10186249c","modified":1698923018197},{"_id":"public/js/libs/SwupScrollPlugin.min.js","hash":"6c3afca9bb98f79d14516c093f27e3e50a3fd82e","modified":1698923018197},{"_id":"public/js/libs/minimasonry.min.js","hash":"9681cc509cb8aa733d36aad032e6e8acdb33c08c","modified":1698923018197},{"_id":"public/js/libs/odometer.min.js","hash":"fe5beb60997c84ab2f91b54535c4221443cdd21f","modified":1698923018197},{"_id":"public/js/plugins/hbe.js","hash":"355e47f91cec6a0027efc6a4963dbd6bcee27e58","modified":1698923018197},{"_id":"public/js/plugins/aplayer.js","hash":"708e071fa0721a57cef092595931cfc98e1c9402","modified":1698923018197},{"_id":"public/js/plugins/masonry.js","hash":"9ab5b3924f286d42d7f866ab37071939ca74ef80","modified":1698923018197},{"_id":"public/js/tools/codeBlock.js","hash":"499e316872070f87679ec8b43364be43ffbcddd0","modified":1698923018197},{"_id":"public/js/plugins/mermaid.js","hash":"8a83ea6c83ec2990e65983326efa163cae3cd050","modified":1698923018197},{"_id":"public/js/plugins/tabs.js","hash":"5be23a96d4640f43694c9d5dd9136e641b936269","modified":1698923018197},{"_id":"public/js/tools/imageViewer.js","hash":"835ace82225cc8a6a96b9b0040cc2b2c45a1f663","modified":1698923018197},{"_id":"public/js/plugins/typed.js","hash":"47f38f90e95a473a27b074f2bc394be258189f50","modified":1698923018197},{"_id":"public/js/tools/lightDarkSwitch.js","hash":"a65951ef152c76efcb7031e0079fcbc611c8e46a","modified":1698923018197},{"_id":"public/js/tools/localSearch.js","hash":"d341081c8c10603c472c9e9161cf5d1b8df5ed74","modified":1698923018197},{"_id":"public/js/tools/scrollTopBottom.js","hash":"741346407d9c57ded4cde9a1d7a5ac04abc8a75b","modified":1698923018197},{"_id":"public/js/tools/runtime.js","hash":"29eb60d41fecdcf1094dfe72945684f984da6484","modified":1698923018197},{"_id":"public/css/common/codeblock/code-theme.css","hash":"a47d6cb4d8c4d4564e2ddbfff03c51feadf7635c","modified":1698923018197},{"_id":"public/css/common/codeblock/code-block.css","hash":"62c6bd6f9826676b1ba6952910daf3bc3a4b7a25","modified":1698923018197},{"_id":"public/js/tools/tocToggle.js","hash":"fcf470faff8b0e9e531ccb06b173655d0807420a","modified":1698923018197},{"_id":"public/css/style.css","hash":"e428e8fe47e6d7708cfa18b5d3ccd01468a3d0db","modified":1698923018197},{"_id":"public/fontawesome/brands.min.css","hash":"5119c35bbd273d2ea2501997827f6d644da93164","modified":1698923018197},{"_id":"public/fontawesome/duotone.min.css","hash":"0becc4b085bd9d377a8ff4b5160f8e19c8ec27a0","modified":1698923018197},{"_id":"public/fontawesome/fontawesome.min.css","hash":"44e6d666b45a6875e4fce11159876129e7a1cceb","modified":1698923018197},{"_id":"public/fontawesome/svg-with-js.min.css","hash":"f4c08e37c4d44b3ed7a3f377d1cb5d7fca4d04bc","modified":1698923018197},{"_id":"public/fontawesome/all.min.css","hash":"630bf0e29410ec27622f65d1270c6bc435cdff21","modified":1698923018197},{"_id":"public/fontawesome/v4-shims.min.css","hash":"96f037860b8e9b59af8e47571ea98791616dbfd8","modified":1698923018197},{"_id":"public/css/layout/article-content.css","hash":"71f898c394f669b762b667e4106194693ab9ce66","modified":1698923018197},{"_id":"public/js/libs/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1698923018197},{"_id":"public/js/libs/Swup.min.js","hash":"cc054d34e74a1feecfae75064f6a4d6107607396","modified":1698923018197},{"_id":"public/js/libs/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1698923018197},{"_id":"public/js/libs/pjax.min.js","hash":"3d796e5be9cdd4067c94e190ea2482d7fdb4856c","modified":1698923018197},{"_id":"public/css/common/codeblock/highlight.css","hash":"0be5aa2b6c75b9264a8052a61bb5e0ee826484bc","modified":1698923018197},{"_id":"public/webfonts/fa-brands-400.ttf","hash":"ba9322d66c19f635e15e458cc39fcb509818332f","modified":1698923018197},{"_id":"public/fonts/Chillax/Chillax-Variable.eot","hash":"50a4e2ab17155fe7449e0ee488a6242180f3b256","modified":1698923018197},{"_id":"public/fonts/Chillax/Chillax-Variable.ttf","hash":"01aafadc0ca4ace59127a5594a8f534e83b84879","modified":1698923018197},{"_id":"public/js/libs/APlayer.min.js.map","hash":"31a19da0f0cb6b00ec212eafa847f31af86788df","modified":1698923018197},{"_id":"public/js/libs/waline.mjs","hash":"b53165275a5606f6d26bba216f4b218dcc790837","modified":1698923018197},{"_id":"public/js/libs/mermaid.min.js","hash":"c11ca6043d8dae028448a808105f8c888faac8f5","modified":1698923018197},{"_id":"public/webfonts/fa-sharp-solid-900.woff2","hash":"74d0af1108ab8157993ca03cef80e89e35e2408d","modified":1698923018197},{"_id":"public/webfonts/fa-solid-900.woff2","hash":"e73d164db2aff2c91d18c07da03e8db9d0c5dfd4","modified":1698923018197},{"_id":"public/webfonts/fa-duotone-900.woff2","hash":"2cc24434345b80a844a6bda1139539fe41e4df53","modified":1698923018197},{"_id":"public/webfonts/fa-light-300.woff2","hash":"def760895375328ccdcf62b2b9b9001a21947acd","modified":1698923018197},{"_id":"public/webfonts/fa-regular-400.woff2","hash":"486fed640153de1de84f460834c73daef060ed20","modified":1698923018197},{"_id":"public/webfonts/fa-thin-100.woff2","hash":"e0a4482c20f6b67784df54965539a317a3bd681b","modified":1698923018197},{"_id":"public/webfonts/fa-sharp-solid-900.ttf","hash":"0d710cd7bd1b7ff574e88bb812de82babe45e415","modified":1698923018197},{"_id":"public/webfonts/fa-solid-900.ttf","hash":"40b536c3667547db70ee9ca6f3c94fbc33e0cab7","modified":1698923018197},{"_id":"public/webfonts/fa-regular-400.ttf","hash":"cdec068700dc440530e5bbeff7e8bb33a01b4132","modified":1698923018197},{"_id":"public/js/libs/waline.mjs.map","hash":"a58abd8799bfa9580d5835ea6a79862c059aedcd","modified":1698923018197},{"_id":"public/webfonts/fa-light-300.ttf","hash":"cc5d9f4f994c82e23f58cdde1eec8792d81633c7","modified":1698923018197},{"_id":"public/webfonts/fa-thin-100.ttf","hash":"c1fee6e6986b14533ce022afada5fbe10c0f6562","modified":1698923018197},{"_id":"public/webfonts/fa-duotone-900.ttf","hash":"e0313a772ea710cb5ea4bd08f5dedb0a0025f8ca","modified":1698923018197},{"_id":"public/fonts/noto-sans-sc-v26-chinese-simplified-regular.woff2","hash":"eb3b3063cf2be7bd96146051168f11327f4e28d7","modified":1698923018197},{"_id":"public/fonts/noto-sans-sc-v26-chinese-simplified-700.woff2","hash":"3a046e40a1b2a8537a2d60db4f3b4f915852a722","modified":1698923018197},{"_id":"public/fonts/noto-sans-sc-v26-chinese-simplified-regular.woff","hash":"7c2e7b6873eabd4dc1fe2aee5c6d542fe8743356","modified":1698923018197},{"_id":"public/fonts/noto-sans-sc-v26-chinese-simplified-700.woff","hash":"11df5a4313f3730378dd78fcfcb444d845b389e1","modified":1698923018197},{"_id":"public/js/libs/mermaid.min.js.map","hash":"7d303cf926754817c4360f92e6c39b8c390cdbdb","modified":1698923018197},{"_id":"source/about/index.md","hash":"ba297d64672e5d51bdab18853b9430fc0732edb4","modified":1698982349339},{"_id":"public/about/index.html","hash":"9f879d8ffbdbb329f49546f7c04b88d671ae71bd","modified":1735834043567},{"_id":"source/_posts/1-vue3应用的创建-使用.md","hash":"eab17aa3173e4b26d0c01a592c4f20e9eb5b1c65","modified":1699255060344},{"_id":"public/2023/11/06/1-vue3应用的创建-使用/index.html","hash":"c796128cde0be29aede1d43a2e629134e3ed057c","modified":1699255071461},{"_id":"public/tags/vue3/index.html","hash":"b254579838ac887b6b64597f45433d03c15985c6","modified":1735834043567},{"_id":"source/_posts/3-vue3响应式.md","hash":"35db681bdd24e81aa4f63de83a13ae2b281e3d48","modified":1703560908753},{"_id":"source/_posts/2-vue指令语法.md","hash":"2cf272e068397b1b9bcd2390a98d4f0e079f1ee7","modified":1703560910740},{"_id":"source/_posts/1-vue3应用的创建&使用.md","hash":"8f0e37b480a616c797147746b8e5a16238ffa6e7","modified":1703560913821},{"_id":"public/2023/11/06/3-vue3响应式/index.html","hash":"7282a1553a217089ab3ce05381d94df87edd6917","modified":1735834043567},{"_id":"public/2023/11/06/2-vue指令语法/index.html","hash":"fc69a4027dfd71452cfd3945e52b3d5898c22510","modified":1735834043567},{"_id":"public/2023/11/06/1-vue3应用的创建&使用/index.html","hash":"595e4330208b2cb09fb9f8b3a9d47e6a8a13b2e1","modified":1735834043567},{"_id":"public/categories/vue3-文档/index.html","hash":"145bd90b6f3c9badc8feef80c0e39fe5bb13c760","modified":1735834043567},{"_id":"public/tags/vue3-vue/index.html","hash":"134ba870d925128400ee74c8ce9c451bd7395c06","modified":1699322898830},{"_id":"source/_posts/5-为什么vue组件添加scoped后某些组件样式不生效.md","hash":"52a024896ac05704cb22966533189b558060301d","modified":1728895696350},{"_id":"source/_posts/4-vue3计算属性.md","hash":"2050d4d448ebabebc79c35eb52cfcd6546da4c27","modified":1703560906284},{"_id":"public/2023/11/14/5-为什么vue组件添加scoped后某些组件样式不生效/index.html","hash":"2a1003465a0c1bf4a0ba94fae11484123e85d0e2","modified":1735834043567},{"_id":"public/2023/11/07/4-vue3计算属性/index.html","hash":"c3bbe3ec83b4a6aaf0f3e6c64ae52bbf3c940cb4","modified":1735834043567},{"_id":"public/tags/vue/index.html","hash":"c84ce5c4ed519715f172475d978d31084c6a8872","modified":1735834043567},{"_id":"public/categories/vue-样式/index.html","hash":"4b49c93365f65b3a1518d2205381fd80150d110e","modified":1735834043567},{"_id":"source/_posts/7-v-for.md","hash":"c99fc9d5c10fba99b95b7ee661545673a95b4642","modified":1703560752007},{"_id":"source/_posts/6-vue class与style绑定.md","hash":"6b59bf79340e87a2e796d17775f84f239fa2f2b2","modified":1703560871823},{"_id":"public/2023/11/28/6-vue class与style绑定/index.html","hash":"ad36fd1444cf08042e8891db1679b737edb70bc1","modified":1735834043567},{"_id":"public/2023/11/29/7-v-for/index.html","hash":"6195c86fc7da2a2821007579f29b18022fc0ee47","modified":1735834043567},{"_id":"public/categories/vue-样式/vue3-文档/index.html","hash":"2aef5cfff30d29280d24b11523701bfa1043cda9","modified":1735834043567},{"_id":"source/_posts/9-vue事件处理.md","hash":"89e02d141f34b90c5dde3af3c05652f39b53d21c","modified":1703560863735},{"_id":"source/_posts/8-js事件.md","hash":"ce8b00e9b8e6852500ee920f61907d741f2ccc1b","modified":1703560866250},{"_id":"public/2023/11/30/9-vue事件处理/index.html","hash":"f9591c125071ed095b1da608b5b926d24822e4b8","modified":1735834043567},{"_id":"public/2023/11/29/8-js事件/index.html","hash":"8f99f2c817f947069d3c78e5116d3bff487e1624","modified":1735834043567},{"_id":"public/categories/vue/index.html","hash":"95f8069fd905b22c8f7117f52fbdab26ced65134","modified":1701746134811},{"_id":"public/categories/JavaScript-事件/index.html","hash":"7cb56e2a8dea362c014f198a60dd16568643eb3e","modified":1735834043567},{"_id":"public/tags/JavaScript/index.html","hash":"db7eeab9a7fc98229ee66d073f78328af406cd84","modified":1735834043567},{"_id":"source/_posts/11-vue3生命周期.md","hash":"2f8b19131a83322cfcce80df6844f47b4230637a","modified":1703560859278},{"_id":"source/_posts/10-v-model.md","hash":"64d398fa0d8701728eed7db87582620cb4548ffc","modified":1703560738637},{"_id":"public/2023/12/05/10-v-model/index.html","hash":"7aad81c0e6666947e84d13eeb4cfa65c75178495","modified":1735834043567},{"_id":"public/2023/12/05/11-vue3生命周期/index.html","hash":"ed53a2c92efe065b3b4254c4ad418d78159c120a","modified":1735834043567},{"_id":"public/archives/page/2/index.html","hash":"d9798502f653f46ceadbc0f91c9e2bfa8ba02a04","modified":1736926082653},{"_id":"public/archives/2023/page/2/index.html","hash":"2f8668ef1b170503bbfedc90439a46cf3db5e05a","modified":1736926082653},{"_id":"public/archives/2023/12/index.html","hash":"cc89774e539d149c59a792a156bc6856699d7e4a","modified":1736926082653},{"_id":"public/page/2/index.html","hash":"93d41ab20b4ce827d3db072df20c35495ed7e26e","modified":1736926082653},{"_id":"source/_posts/14-vue3组件基础.md","hash":"0ee3c9d48f01de675cca59ccce26726c28f36f0f","modified":1703560849576},{"_id":"source/_posts/13-vue3模板引用.md","hash":"fc28052e809f23269b10e69f4eaad88c44b6949e","modified":1703560854089},{"_id":"source/_posts/12-vue3侦听器.md","hash":"330c758efb1cbf802f669c32361cb25a5d8684e6","modified":1703560856679},{"_id":"public/2023/12/11/14-vue3组件基础/index.html","hash":"1095d201ab086db45f1618e8e89da10b5df076c6","modified":1735834043567},{"_id":"public/2023/12/08/13-vue3模板引用/index.html","hash":"d7040aab9cb28c6e97cae4ccbea13b46715f7115","modified":1735834043567},{"_id":"public/2023/12/07/12-vue3侦听器/index.html","hash":"ad9bbb4623126c32fc773ae07fe0c97be1baf298","modified":1735834043567},{"_id":"public/tags/vue/page/2/index.html","hash":"a96ed73f296b3d3c52a7d039bea7b9a96e001f46","modified":1735834043567},{"_id":"source/_posts/16-vue3 props & emits.md","hash":"0e5dff37407a3da7168bdb53255b94c8f580a779","modified":1703162048105},{"_id":"source/_posts/15-vue3组件注册.md","hash":"aafdceb526a289f66a5ba89bbba1502f9545272a","modified":1703560846992},{"_id":"source/_posts/17-vue3组件v-model.md","hash":"3be749427a00429fc775ff87dd6d943bc6a8393d","modified":1703560843927},{"_id":"public/2023/12/15/17-vue3组件v-model/index.html","hash":"55d7760e50569034c575879d51fa0a07878334e6","modified":1735834043567},{"_id":"public/2023/12/15/16-vue3 props & emits/index.html","hash":"dc17e3ced22251ae981aa37a90e4146c91645faf","modified":1735834043567},{"_id":"public/2023/12/13/15-vue3组件注册/index.html","hash":"d8e59f9719a03f6b73976a236be4b577fc81492c","modified":1735834043567},{"_id":"source/_posts/18-vue3继承attributes.md","hash":"fd5b4b8228c8d962fe85930f5e014ac4eb8ff81a","modified":1703560840887},{"_id":"source/_posts/19-vue插槽.md","hash":"8c18891623d151c6b850938fa951a141267da124","modified":1703574298886},{"_id":"public/2023/12/26/19-vue插槽/index.html","hash":"23c006310e09350be3898968f278b7f9698f7df9","modified":1735834043567},{"_id":"public/2023/12/21/18-vue3继承attributes/index.html","hash":"f0c800638af1f4068b3bcde7855db4d6f3ca8bbf","modified":1735834043567},{"_id":"public/categories/vue3-文档/page/2/index.html","hash":"5a56c5fbbd95dc1f54d5ef20fc8ab4a090da73b2","modified":1735834043567},{"_id":"public/tags/vue3/page/2/index.html","hash":"bc49985b74599e7ec741f79291f82ad64711458b","modified":1735834043567},{"_id":"public/categories/vue-文档/index.html","hash":"2195c1c3fd35c6d31f0ee60785c8543fec82d18d","modified":1735834043567},{"_id":"source/_posts/21-浏览器输入url后发生了什么.md","hash":"47d5b3247f65688b2d6cb32afebb7ce9d7940e65","modified":1730688870690},{"_id":"source/_posts/20-vue3依赖注入.md","hash":"27f3e7b2a1c89050af588da665d29dcb67f27833","modified":1705051096844},{"_id":"public/2024/10/10/21-浏览器输入url后发生了什么/index.html","hash":"f9ccbab13027c57845dd765d87df228531f46f52","modified":1735834043567},{"_id":"public/2023/12/28/20-vue3依赖注入/index.html","hash":"f651d9de343649bce75ac7e686ded485ba9ec4c9","modified":1735834043567},{"_id":"public/archives/page/3/index.html","hash":"766090b9acd5dd4ae93b559370a517a64ff9ecb9","modified":1736926082653},{"_id":"public/archives/2023/12/page/2/index.html","hash":"c2000c90b2c1628cf1dc8c2c15b69d9c9323ce10","modified":1736926082653},{"_id":"public/archives/2024/index.html","hash":"b5c26c8f7a88ef178998018b0e803cf753af9ecd","modified":1736926082653},{"_id":"public/archives/2024/10/index.html","hash":"abab64a1201995959d7e8db94d81fd79d0fe66da","modified":1736926082653},{"_id":"public/categories/计算机网络-综合/index.html","hash":"043fe4bf6ad6321a17660938c13400e63f352909","modified":1735834043567},{"_id":"public/page/3/index.html","hash":"6addceac1e31cdf5d047aca504a73102a9540b16","modified":1736926082653},{"_id":"public/tags/面经/index.html","hash":"5d130f1577c9ce41d1353ce0a776730e721fab75","modified":1735834179952},{"_id":"public/tags/计算机网络/index.html","hash":"0e88bb716920acc90f5abf106a65a372d9fcb69e","modified":1735834179952},{"_id":"public/tags/url/index.html","hash":"3fbff418bc03d6d8f196b8347e094a9033f55a7f","modified":1735834043567},{"_id":"source/_posts/22-浏览器解析url过程.md","hash":"c47e738ea857b4ca5456c1ed3ba48194f8045837","modified":1729082598500},{"_id":"source/images/22-3.webp","hash":"966206ac600c8481fb67341b0e7a7ee4fa7a8a1e","modified":1728887583036},{"_id":"source/images/22-1.webp","hash":"ce213ed79234d1f1826f73183567873a17e392f9","modified":1728887581406},{"_id":"source/images/22-2.webp","hash":"8fce028cca7c3520fc4a19fe1a5ddb1d902efacb","modified":1728887581398},{"_id":"public/2024/10/14/22-浏览器解析url过程/index.html","hash":"8b292019248902eab6ada0130204e427b29e7b7c","modified":1735834043567},{"_id":"public/categories/计算机网络-url/index.html","hash":"d0c07c8b565a4e1491d087b9fe750226fa8f1d60","modified":1735834043567},{"_id":"public/images/22-1.webp","hash":"ce213ed79234d1f1826f73183567873a17e392f9","modified":1728890157172},{"_id":"public/images/22-2.webp","hash":"8fce028cca7c3520fc4a19fe1a5ddb1d902efacb","modified":1728890157172},{"_id":"public/images/22-3.webp","hash":"966206ac600c8481fb67341b0e7a7ee4fa7a8a1e","modified":1728890157172},{"_id":"source/images/23-3.png","hash":"d5a8fcbcd09ae494d6021b71e5c9ff73f52e57dc","modified":1728901487058},{"_id":"source/_posts/23-投放链接防重定向.md","hash":"344ec0ce33c9dfe77ab8c4773562311110de64c8","modified":1735794870835},{"_id":"source/images/23-1.png","hash":"ca699ef4b5bd1cb72fe0c5d9be261b9372a18e7c","modified":1728901022193},{"_id":"source/images/23-4.png","hash":"685a4c2939d10cd8dd543535f54252bde9f435a4","modified":1729043346969},{"_id":"source/images/23-5.png","hash":"4cbbcc728a8582ed0e253941395ec454fef9d94b","modified":1729043389083},{"_id":"source/images/23-6.png","hash":"ebcbf194871ceabd233fc8811790afd8b92d2fa9","modified":1729043429613},{"_id":"source/images/23-2.png","hash":"f8eaf927423895525567970f3de77685efdef46e","modified":1728901024401},{"_id":"public/images/23-1.png","hash":"6f206decd5842d38639c631617ef7158c51114bf","modified":1729071923876},{"_id":"public/images/23-2.png","hash":"a560f696e50d5647b6500b3817465c1a0e948c56","modified":1729071923876},{"_id":"public/images/23-3.png","hash":"ceda418d5fb7fe2d43812440a6e486ab6b3ac0f3","modified":1729071923876},{"_id":"public/images/23-4.png","hash":"468038eab13f06deb663e47dc578cb31cb3eceb3","modified":1729071923876},{"_id":"public/images/23-5.png","hash":"10f3635fd4d680b925d3dcec241cdca7a85564e5","modified":1729071923876},{"_id":"public/images/23-6.png","hash":"a2640cf31570867ffa41c3983b7ce31787624774","modified":1729071923876},{"_id":"public/2024/10/14/23-投放链接防重定向/index.html","hash":"dcb6e937890cb73a310c9b869159e746e66b2794","modified":1735834043567},{"_id":"public/tags/实践问题/index.html","hash":"d4762e8f54b77166c182064e536c5e802bab1103","modified":1735834043567},{"_id":"source/_posts/24-浏览器缓存与304状态码.md","hash":"cca38196e17239f4ac1ca06fb459037c3734a450","modified":1729258951526},{"_id":"source/images/23/3.png","hash":"d5a8fcbcd09ae494d6021b71e5c9ff73f52e57dc","modified":1728901487058},{"_id":"source/images/22/3.webp","hash":"966206ac600c8481fb67341b0e7a7ee4fa7a8a1e","modified":1728887583036},{"_id":"source/images/22/1.webp","hash":"ce213ed79234d1f1826f73183567873a17e392f9","modified":1728887581406},{"_id":"source/images/24/2.png","hash":"e815e1db4eb613cafdd5989d08647cac612144dc","modified":1729072715861},{"_id":"source/images/24/3.png","hash":"66b2f948a41c513053230bd62b0480f71ad84c49","modified":1729072730729},{"_id":"source/images/24/4.png","hash":"3724dd596664b9b07a1274977bdc08413c9d6fe8","modified":1729072739625},{"_id":"source/images/24/5.png","hash":"43c79220e984688b23f6c4479ef9a69c0839383e","modified":1729072746483},{"_id":"source/images/24/6.png","hash":"8ad8b30dfa218d5e0142cf76e2e7fde8996dd370","modified":1729072758291},{"_id":"source/images/24/7.png","hash":"b339397ad567a4587846afd931cd42b917489b79","modified":1729072765042},{"_id":"source/images/24/8.png","hash":"763b008fc94f794ac3f09270fb9eacce1a32ed12","modified":1729072775118},{"_id":"source/images/22/2.webp","hash":"8fce028cca7c3520fc4a19fe1a5ddb1d902efacb","modified":1728887581398},{"_id":"source/images/24/1.png","hash":"95ee08116ff7bd68274a699ed013f3cb10437b26","modified":1729072697553},{"_id":"source/images/23/1.png","hash":"ca699ef4b5bd1cb72fe0c5d9be261b9372a18e7c","modified":1728901022193},{"_id":"source/images/23/4.png","hash":"685a4c2939d10cd8dd543535f54252bde9f435a4","modified":1729043346969},{"_id":"source/images/24/9.png","hash":"7ca73a1fd1073538a06ab76f9c5043eeca1c325b","modified":1729072786883},{"_id":"source/images/23/5.png","hash":"4cbbcc728a8582ed0e253941395ec454fef9d94b","modified":1729043389083},{"_id":"source/images/23/6.png","hash":"ebcbf194871ceabd233fc8811790afd8b92d2fa9","modified":1729043429613},{"_id":"source/images/23/2.png","hash":"f8eaf927423895525567970f3de77685efdef46e","modified":1728901024401},{"_id":"public/images/23/4.png","hash":"468038eab13f06deb663e47dc578cb31cb3eceb3","modified":1729082120801},{"_id":"public/images/23/2.png","hash":"a560f696e50d5647b6500b3817465c1a0e948c56","modified":1729082120801},{"_id":"public/images/23/1.png","hash":"6f206decd5842d38639c631617ef7158c51114bf","modified":1729082120801},{"_id":"public/images/23/6.png","hash":"a2640cf31570867ffa41c3983b7ce31787624774","modified":1729082120801},{"_id":"public/images/24/1.png","hash":"148b95b9655c1521a2b4fb4e0ec2c04fd12b8169","modified":1729082120801},{"_id":"public/images/24/2.png","hash":"ff988ae0eb663abe4d5a6102a1f5593691a67592","modified":1729082120801},{"_id":"public/images/23/3.png","hash":"ceda418d5fb7fe2d43812440a6e486ab6b3ac0f3","modified":1729082120801},{"_id":"public/images/23/5.png","hash":"10f3635fd4d680b925d3dcec241cdca7a85564e5","modified":1729082120801},{"_id":"public/images/24/5.png","hash":"f23becc1db313359914b480fa1efb638eee65de0","modified":1729082120801},{"_id":"public/images/24/3.png","hash":"e8b59fe31c22805730a209d67d1a692d8e765bb3","modified":1729082120801},{"_id":"public/images/24/4.png","hash":"c2ee1ed95ed6fc450aac3f1a081b7684a9d538fb","modified":1729082120801},{"_id":"public/images/24/6.png","hash":"d80478a2a87e3f1b136fc1560d2f70e5c6f79805","modified":1729082120801},{"_id":"public/images/24/9.png","hash":"459364c42d33b65352dfe72907d495fd192bc8c0","modified":1729082120801},{"_id":"public/images/24/7.png","hash":"ad0a8e2c595602095139e7acff85129008387170","modified":1729082120801},{"_id":"public/images/24/8.png","hash":"fa294569bb1b14f42cfe207e65c23cde6c615ec7","modified":1729082120801},{"_id":"public/2024/10/16/24-浏览器缓存与304状态码/index.html","hash":"b5570a4df9fb3d954832f455074d2c14e71b9748","modified":1735834179952},{"_id":"public/categories/计算机网络-状态码/index.html","hash":"9e41a6bc23df4234db04e63328637d33d6fb75c2","modified":1735834043567},{"_id":"public/categories/计算机网络-状态码/计算机网络-浏览器/index.html","hash":"32287fc0e8fd35d0947005708668a31f830770f9","modified":1735834043567},{"_id":"public/tags/状态码/index.html","hash":"b5bdc4db6681936c04682ae5f5569c506ec53863","modified":1735834043567},{"_id":"public/tags/浏览器/index.html","hash":"ade14dfc20bb1f4acd31056a7b316711e70f87a9","modified":1735834043567},{"_id":"public/images/22/1.webp","hash":"ce213ed79234d1f1826f73183567873a17e392f9","modified":1729082120801},{"_id":"public/images/22/3.webp","hash":"966206ac600c8481fb67341b0e7a7ee4fa7a8a1e","modified":1729082120801},{"_id":"public/images/22/2.webp","hash":"8fce028cca7c3520fc4a19fe1a5ddb1d902efacb","modified":1729082120801},{"_id":"source/_posts/25-DNS.md","hash":"ff0f64939bc876857056b44cd4b293935c23fcb9","modified":1735834174018},{"_id":"public/2024/10/18/25-DNS/index.html","hash":"f00ff017c16f6731a7e314711428df842c682d6c","modified":1735834179952},{"_id":"public/categories/计算机网络-DNS/index.html","hash":"c782c38c296d1703a1df4f5873dcb47ca09af932","modified":1735834179952},{"_id":"public/tags/DNS/index.html","hash":"7e073d02d7f835223a7927ffc75e98b647f9dde4","modified":1735834179952},{"_id":"source/_posts/26-CDN.md","hash":"2a3f21b02f328c54038deca7e492705144870ecd","modified":1735834166278},{"_id":"public/2024/10/29/26-CDN/index.html","hash":"0a84c746a49ca7d66b9143d28b7a5fc5e5da0c56","modified":1735834179952},{"_id":"public/categories/计算机网络-CDN/index.html","hash":"3de14dcfbbe54e2368ffb05e8fd1b5b530095875","modified":1735834179952},{"_id":"public/tags/CDN/index.html","hash":"c03a2168f86268d0b75743d1529f0b37b7bf6f3f","modified":1735834179952},{"_id":"source/_posts/30-HKU ECIC.md","hash":"587268ee477ee8caa111a11c2472ada554e2ed71","modified":1731336259575},{"_id":"source/_posts/27-三次握手&四次挥手.md","hash":"538e1815b2dccd5995e528c4f8bb04958e7a414d","modified":1735834163672},{"_id":"source/_posts/29-TCP.md","hash":"cc0f4fe8c5c90d3a6f34e2e1ae66a7ff757664b1","modified":1735834157326},{"_id":"source/_posts/28-interface&type.md","hash":"5a3320bbbd55889577f0f083c4baba17da7a9dac","modified":1735834160397},{"_id":"public/2024/11/08/30-HKU ECIC/index.html","hash":"34d879dad6e0089a7b4cac6b3a7b4fd017a09e7f","modified":1731336269469},{"_id":"public/2024/11/05/29-TCP/index.html","hash":"c77b8b187e592d7ca4e6583be08b92a6c20a2afa","modified":1736926082653},{"_id":"public/2024/11/05/28-interface&type/index.html","hash":"6232a499c3fb5303c96fea7a9ea22f6cbc8b64a1","modified":1735834179952},{"_id":"public/2024/11/04/27-三次握手&四次挥手/index.html","hash":"061276668cd5982016d1c7f17eb1ecce97487a2c","modified":1735834179952},{"_id":"public/archives/2024/11/index.html","hash":"2d764d16e59df474d768d07bce76d08d23ccbd08","modified":1736926082653},{"_id":"public/tags/ECIC-面经/index.html","hash":"3bd7c36939b5f01655b7041f4d507d37f45601b6","modified":1731062653072},{"_id":"public/tags/TCP/index.html","hash":"f415866287f4897e23dfd180206b61fbd37a8bf0","modified":1735834179952},{"_id":"public/categories/ECIC-面经/index.html","hash":"716e3f98329bf1aaf72fa51472d5a120c47504a4","modified":1731062653072},{"_id":"public/categories/计算机网络-TCP/index.html","hash":"185fafd13a0c8ccc9279566b58a9d87e974aebe2","modified":1735834179952},{"_id":"source/_posts/30-北大区块链-简介.md","hash":"71be27b5b439db5672972479224eccda59719c3f","modified":1736859749365},{"_id":"source/_posts/33-北大区块链-共识协议.md","hash":"69495c1b062597253eaf3404545ac5c5d0358740","modified":1736773092453},{"_id":"source/_posts/32-北大区块链-数据结构.md","hash":"027ea385d8916dcf46ccb0b11a27f8d8df58b864","modified":1736925579776},{"_id":"source/_posts/31-北大区块链-密码学基础.md","hash":"422b25101f2703e23bc9d8e377a530b07336ab4f","modified":1736773085649},{"_id":"source/images/32/3.png","hash":"5d0982f343fc57342dc3d86454924c1f7e44abea","modified":1735810896138},{"_id":"source/images/33/1.png","hash":"3e9421c86aa84f0a9e8c255c0a7254aa6c5254b5","modified":1735828069459},{"_id":"source/images/32/1.png","hash":"9e55cac15cc8537577aa9987d000918ea930693a","modified":1735806498498},{"_id":"source/images/32/2.png","hash":"d63706e62822e2195108d055d492c9fc6bc7d2ac","modified":1735807866535},{"_id":"public/images/32/1.png","hash":"9007918936c01fe8c40b423f725cc1ee33d80baf","modified":1735834043567},{"_id":"public/images/32/2.png","hash":"4e2f0d1e6d5de64967d4356ebd82e20ccbd0beac","modified":1735834043567},{"_id":"public/images/32/3.png","hash":"02d1fd1bb168bd2f5b7889641425d81e66f286a7","modified":1735834043567},{"_id":"public/images/33/1.png","hash":"f0870db10d00241ead7355b013063b385e249a0b","modified":1735834043567},{"_id":"public/2025/01/02/33-北大区块链-共识协议/index.html","hash":"28a5e1894d2ed52d16d9835b6017e89e16d7013f","modified":1736926082653},{"_id":"public/2025/01/02/32-北大区块链-数据结构/index.html","hash":"b71861ffc162a765f4f53ef6c232fe58d06df1ba","modified":1736926082653},{"_id":"public/2025/01/02/31-北大区块链-密码学基础/index.html","hash":"cc60053fd2209b36ead071d85d7ec953d2c0ee79","modified":1736926082653},{"_id":"public/2025/01/02/30-北大区块链-简介/index.html","hash":"91db07cb2248caefdcebdc460e3c2366bca473f1","modified":1736926082653},{"_id":"public/archives/page/4/index.html","hash":"ef49b727084be3eacf2ad3fc03701d9a5ea52a7a","modified":1736926082653},{"_id":"public/archives/2025/index.html","hash":"fd872ce0d1cd09bd26db1a0c2f39063301df9948","modified":1736926082653},{"_id":"public/archives/2025/01/index.html","hash":"7d749a8dc7eae89ea9104171a88c27d476f2ef3c","modified":1736926082653},{"_id":"public/tags/web3/index.html","hash":"d879158ce0bd7762f4aecf5f8706c25f3d31788c","modified":1736926082653},{"_id":"public/tags/密码学/index.html","hash":"b555b14904d5e2194ec1467b9f536ab8615b15d5","modified":1736926082653},{"_id":"public/tags/数据结构/index.html","hash":"9457d726ffa525bb921afe0bd389bf600a93f137","modified":1736926082653},{"_id":"public/tags/共识协议/index.html","hash":"ace70808e725ce5c157c8cfce588cca158d4d45b","modified":1736926082653},{"_id":"public/page/4/index.html","hash":"338bb5bc419aba30ec60c9b6091531d9123c0177","modified":1736926082653},{"_id":"public/categories/Web3-北大肖臻-区块链技术与应用/index.html","hash":"25e5d98e5e825b6aecabb08b2d94c3df2c202f58","modified":1736926082653},{"_id":"source/_posts/34-北大区块链-BTC系统实现.md","hash":"701fe7b70e29fdb7e79b25438db60e20cffc7868","modified":1736925144777},{"_id":"source/images/33/2.png","hash":"d897d46233e6adde085c48adec42fc069b05db08","modified":1736689659603},{"_id":"source/_posts/40-北大区块链-课堂回答.md","hash":"6bc4f5e213cb7d6fd242d6ca7dd6cfd3305fb3fd","modified":1736926046046},{"_id":"source/_posts/38-北大区块链-BTC脚本.md","hash":"1b3fef3af95ea23965dd73f53843fe1b9420faa1","modified":1736924923699},{"_id":"source/images/36/1.png","hash":"378577c5cc781fc7d06a81a401466715ff5d1cdd","modified":1736776946424},{"_id":"source/_posts/36-北大区块链-挖矿难度.md","hash":"e74d63ee9aa71d6c59d88b5297581661886bfbfc","modified":1736783250592},{"_id":"source/_posts/35-北大区块链-BTC网络.md","hash":"c25c690e99245673322e5a6e60919811f9bd5193","modified":1736773101890},{"_id":"source/_posts/37-北大区块链-BTC挖矿.md","hash":"709f461e6eb312cb73288d1920af9363914155a1","modified":1736859548744},{"_id":"source/images/36/2.png","hash":"42eddac3b10d18c3f2a27378f44960a47584188a","modified":1736778223220},{"_id":"source/images/34/1.png","hash":"6558eda0d55ecdb9718ec7570d9962c5c140b469","modified":1736695483994},{"_id":"source/images/34/4.png","hash":"0a018dc7b3aa81b9006e050fb8c4c88bc6050cab","modified":1736759500300},{"_id":"source/images/34/5.png","hash":"eddd03bf142c0ba9eae0f76afb1eac407ee308b5","modified":1736760851722},{"_id":"source/_posts/39-北大区块链-BTC分叉.md","hash":"b9637a52b30a9aac2012527013ecd1cb8521c756","modified":1736910626613},{"_id":"source/_posts/41-北大区块链-BTC匿名性.md","hash":"674fde8a40d00f860b55db4b0e5f638e8f397b74","modified":1736926001349},{"_id":"source/images/38/2.png","hash":"4dff552e46814b86b0c2108d96521acc3dda0ddd","modified":1736861070552},{"_id":"source/images/34/6.png","hash":"6aedb85fcb999821da59c652da300d734dfae27f","modified":1736762257915},{"_id":"source/images/34/2.png","hash":"cb3b0fe1f0e73f76ce311deb8f8cfbf407e7af9a","modified":1736756845964},{"_id":"source/images/34/3.png","hash":"4a206254fa3de2210417c766b60e0f655fe1cf0a","modified":1736756654657},{"_id":"source/images/38/1.png","hash":"4e0686e328314174537a09b58f461f4cb9805f51","modified":1736860073780},{"_id":"public/images/33/2.png","hash":"2e9f160f2b54e26c7c63858d086c589d2ecb64a0","modified":1736926082653},{"_id":"public/images/36/1.png","hash":"420f7285227a257aa260b2deb61d6dd04be1ddbd","modified":1736926082653},{"_id":"public/images/36/2.png","hash":"2ff593f828edae1fc60dda01fe40a6081906021c","modified":1736926082653},{"_id":"public/images/38/1.png","hash":"adcb9dc71476e9d0ab36b4b7e6ca5bdf46241606","modified":1736926082653},{"_id":"public/images/38/2.png","hash":"3243c2d7d82543468e1cfc3a133a74283eda2aee","modified":1736926082653},{"_id":"public/images/34/1.png","hash":"8c57f13eb83b1252b13f2c74708f22d509a8eabe","modified":1736926082653},{"_id":"public/images/34/2.png","hash":"fb75c3fc07ea068fb45f2f08ec1321f975704ab5","modified":1736926082653},{"_id":"public/images/34/3.png","hash":"2e158c4fa135bc52dbc9ae15d007841036c260dc","modified":1736926082653},{"_id":"public/images/34/4.png","hash":"b6d86a959f6343b725bb733e469e883e8d4431f3","modified":1736926082653},{"_id":"public/images/34/5.png","hash":"371b0649e88d44ab1ff11548b3eabe0b2205710a","modified":1736926082653},{"_id":"public/images/34/6.png","hash":"ba02f29c51b94e86ae625f01cbf257d63e44d68f","modified":1736926082653},{"_id":"public/2025/01/15/41-北大区块链-BTC匿名性/index.html","hash":"a728a1dee3caf820a1df4498297d4499e1177204","modified":1736926082653},{"_id":"public/2025/01/15/40-北大区块链-课堂回答/index.html","hash":"b8c7e6d56d6f4c25905e605456ab2efe1bb7489d","modified":1736926082653},{"_id":"public/2025/01/14/39-北大区块链-BTC分叉/index.html","hash":"9a397e0873d09ff771ee499d841094f6284395cd","modified":1736926082653},{"_id":"public/2025/01/14/38-北大区块链-BTC脚本/index.html","hash":"e4291a1f6ab205563ab42b742fd5474db030fed5","modified":1736926082653},{"_id":"public/2025/01/13/37-北大区块链-BTC挖矿/index.html","hash":"a80f26c37b230b620946f095037ac42d5e8733cf","modified":1736926082653},{"_id":"public/2025/01/13/36-北大区块链-挖矿难度/index.html","hash":"39b43c3af957601819ba751e6ac306c25bac5874","modified":1736926082653},{"_id":"public/2025/01/13/35-北大区块链-BTC网络/index.html","hash":"6df0a10adb5e13c99a3eb4f1e41012be6b8e739e","modified":1736926082653},{"_id":"public/2025/01/12/34-北大区块链-BTC系统实现/index.html","hash":"765f61eaf8ecbb5ad4342fb9f6cf29ec4d48ee85","modified":1736926082653},{"_id":"public/tags/web3/page/2/index.html","hash":"50f8f30e800e9911a9c0badeda7537de98923af5","modified":1736926082653},{"_id":"public/tags/BTC/index.html","hash":"56ebdba1dc0462c8b6aef1a1f4ac6b100dee46ea","modified":1736926082653},{"_id":"public/categories/Web3-北大肖臻-区块链技术与应用/page/2/index.html","hash":"c05b03a8cbccab9de4303bae0a6285804e27eca9","modified":1736926082653},{"_id":"public/archives/page/5/index.html","hash":"77888c1bd545677136921093197e46b85a08e163","modified":1736926082653},{"_id":"public/archives/2025/page/2/index.html","hash":"d4f51e25082a36e1a6dd667a637c59f6bf193edc","modified":1736926082653},{"_id":"public/archives/2025/01/page/2/index.html","hash":"98fd13b11dde4b68d55e131f536b23c0abaa20a1","modified":1736926082653},{"_id":"public/page/5/index.html","hash":"9b6b5c5d7c9f2362d0e1ab757b3c4c0ab40f9e88","modified":1736926082653}],"Category":[{"name":"test1 - test11","_id":"cloh2wf2e0005v4w6fv4m6xnn"},{"name":"test2 - test22","_id":"cloh2wf2f0007v4w68pcc7m34"},{"name":"vue3 - 文档","_id":"clomnfqd60008m5w6ejsc6la0"},{"name":"vue3 - vue3文档","_id":"clomngy3g000cm5w6fo3og6wg"},{"name":"vue - 样式","_id":"cloy7augi000eblw6bj2j9q3l"},{"name":"vue3 - 文档","parent":"cloy7augi000eblw6bj2j9q3l","_id":"clpj6vfno00037uw664nhch3a"},{"name":"vue","_id":"clpl36b6w000159w67kn8ddbu"},{"name":"JavaScript - 事件","_id":"clpl36b6y000659w6a6si3o5a"},{"name":"vue - 文档","_id":"clqls3vve0000ovw6eaut5x6x"},{"name":"计算机网络 - 综合","_id":"cm28lqmpc0000lyw6d0pw52ah"},{"name":"计算机网络 - url","_id":"cm28ok88g0001eww616og8w14"},{"name":"计算机网络 - 状态码","_id":"cm2buup6w0001ihw695zb23eq"},{"name":"计算机网络 - 浏览器","parent":"cm2buup6w0001ihw695zb23eq","_id":"cm2buup6y0004ihw64nuc5tni"},{"name":"计算机网络 - DNS","_id":"cm2iekyw30001g1w60ae2b4be"},{"name":"计算机网络 - CDN","_id":"cm32f4ppn0001s4w6a7hrape8"},{"name":"ECIC 面经","_id":"cm38m0cxi00034ew6fyh23me5"},{"name":"计算机网络 - TCP","_id":"cm38m0cxk00054ew67r7l8c2p"},{"name":"Web3 - 北大肖臻-区块链技术与应用","_id":"cm5firt1l0002zww6ca5pf45u"}],"Data":[],"Page":[{"title":"categories","date":"2023-11-02T09:58:43.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-11-02 17:58:43\n---\n","updated":"2023-11-02T10:30:52.506Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cloh2wf290000v4w64xgn4zkb","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2023-11-02T10:43:02.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-11-02 18:43:02\n---\n","updated":"2023-11-02T10:43:02.364Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cloh2wf2a0001v4w6a6i7hjni","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2023-11-03T02:23:39.000Z","_content":"# About me\n>\n>我是一枚01年的前端程序媛，23年从华东师大毕业，现工作于京东。\n>\n>本站用于记录日常的学习，很高兴和大家分享～(●’◡’●)ﾉ\n\n# Learning path\n>\n>路漫漫其修远兮，吾将上下而求索\n>\n>- 目前主要用 Vue2\n>- Vue3 & 微信小程序 会用但不熟\n>- React 在学习中\n>- 微前端用过 iframe，打算试试 qiankun\n>- 后端 & 数据库 有时间也要学\n>- ......\n\n# Hobbies\n>\n>兴趣广泛，热爱生活 ♥\n>\n>- 美食：吃吃吃什么的最治愈啦！\n>- 唱歌：喜欢欧美流行乐，Ariana Grande & Taylor Swift 的歌是心头爱\n>- 跳舞：最近在跳爵士舞，处于驯服四肢的阶段 ◔ ‸◔？\n>- 运动：钟爱散步、跳操等低强度养生运动\n>- 读书：爱读心理学书籍和小说经典\n\n# Contact\n>\n>qq邮箱：<2695969122@qq.com>\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2023-11-03 10:23:39\n---\n# About me\n>\n>我是一枚01年的前端程序媛，23年从华东师大毕业，现工作于京东。\n>\n>本站用于记录日常的学习，很高兴和大家分享～(●’◡’●)ﾉ\n\n# Learning path\n>\n>路漫漫其修远兮，吾将上下而求索\n>\n>- 目前主要用 Vue2\n>- Vue3 & 微信小程序 会用但不熟\n>- React 在学习中\n>- 微前端用过 iframe，打算试试 qiankun\n>- 后端 & 数据库 有时间也要学\n>- ......\n\n# Hobbies\n>\n>兴趣广泛，热爱生活 ♥\n>\n>- 美食：吃吃吃什么的最治愈啦！\n>- 唱歌：喜欢欧美流行乐，Ariana Grande & Taylor Swift 的歌是心头爱\n>- 跳舞：最近在跳爵士舞，处于驯服四肢的阶段 ◔ ‸◔？\n>- 运动：钟爱散步、跳操等低强度养生运动\n>- 读书：爱读心理学书籍和小说经典\n\n# Contact\n>\n>qq邮箱：<2695969122@qq.com>\n","updated":"2023-11-03T03:32:29.339Z","path":"about/index.html","_id":"clohzs1xz0000u1w63v6l80y3","comments":1,"layout":"page","content":"<h1 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h1><blockquote>\n<p>我是一枚01年的前端程序媛，23年从华东师大毕业，现工作于京东。</p>\n<p>本站用于记录日常的学习，很高兴和大家分享～(●’◡’●)ﾉ</p>\n</blockquote>\n<h1 id=\"Learning-path\"><a href=\"#Learning-path\" class=\"headerlink\" title=\"Learning path\"></a>Learning path</h1><blockquote>\n<p>路漫漫其修远兮，吾将上下而求索</p>\n<ul>\n<li>目前主要用 Vue2</li>\n<li>Vue3 &amp; 微信小程序 会用但不熟</li>\n<li>React 在学习中</li>\n<li>微前端用过 iframe，打算试试 qiankun</li>\n<li>后端 &amp; 数据库 有时间也要学</li>\n<li>……</li>\n</ul>\n</blockquote>\n<h1 id=\"Hobbies\"><a href=\"#Hobbies\" class=\"headerlink\" title=\"Hobbies\"></a>Hobbies</h1><blockquote>\n<p>兴趣广泛，热爱生活 ♥</p>\n<ul>\n<li>美食：吃吃吃什么的最治愈啦！</li>\n<li>唱歌：喜欢欧美流行乐，Ariana Grande &amp; Taylor Swift 的歌是心头爱</li>\n<li>跳舞：最近在跳爵士舞，处于驯服四肢的阶段 ◔ ‸◔？</li>\n<li>运动：钟爱散步、跳操等低强度养生运动</li>\n<li>读书：爱读心理学书籍和小说经典</li>\n</ul>\n</blockquote>\n<h1 id=\"Contact\"><a href=\"#Contact\" class=\"headerlink\" title=\"Contact\"></a>Contact</h1><blockquote>\n<p>qq邮箱：<a class=\"link\"   href=\"mailto:&#x32;&#x36;&#57;&#53;&#x39;&#54;&#x39;&#49;&#50;&#50;&#x40;&#113;&#113;&#x2e;&#x63;&#x6f;&#x6d;\" >&#x32;&#x36;&#57;&#53;&#x39;&#54;&#x39;&#49;&#50;&#50;&#x40;&#113;&#113;&#x2e;&#x63;&#x6f;&#x6d; <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h1><blockquote>\n<p>我是一枚01年的前端程序媛，23年从华东师大毕业，现工作于京东。</p>\n<p>本站用于记录日常的学习，很高兴和大家分享～(●’◡’●)ﾉ</p>\n</blockquote>\n<h1 id=\"Learning-path\"><a href=\"#Learning-path\" class=\"headerlink\" title=\"Learning path\"></a>Learning path</h1><blockquote>\n<p>路漫漫其修远兮，吾将上下而求索</p>\n<ul>\n<li>目前主要用 Vue2</li>\n<li>Vue3 &amp; 微信小程序 会用但不熟</li>\n<li>React 在学习中</li>\n<li>微前端用过 iframe，打算试试 qiankun</li>\n<li>后端 &amp; 数据库 有时间也要学</li>\n<li>……</li>\n</ul>\n</blockquote>\n<h1 id=\"Hobbies\"><a href=\"#Hobbies\" class=\"headerlink\" title=\"Hobbies\"></a>Hobbies</h1><blockquote>\n<p>兴趣广泛，热爱生活 ♥</p>\n<ul>\n<li>美食：吃吃吃什么的最治愈啦！</li>\n<li>唱歌：喜欢欧美流行乐，Ariana Grande &amp; Taylor Swift 的歌是心头爱</li>\n<li>跳舞：最近在跳爵士舞，处于驯服四肢的阶段 ◔ ‸◔？</li>\n<li>运动：钟爱散步、跳操等低强度养生运动</li>\n<li>读书：爱读心理学书籍和小说经典</li>\n</ul>\n</blockquote>\n<h1 id=\"Contact\"><a href=\"#Contact\" class=\"headerlink\" title=\"Contact\"></a>Contact</h1><blockquote>\n<p>qq邮箱：<a class=\"link\"   href=\"mailto:&#x32;&#x36;&#57;&#53;&#x39;&#54;&#x39;&#49;&#50;&#50;&#x40;&#113;&#113;&#x2e;&#x63;&#x6f;&#x6d;\" >&#x32;&#x36;&#57;&#53;&#x39;&#54;&#x39;&#49;&#50;&#50;&#x40;&#113;&#113;&#x2e;&#x63;&#x6f;&#x6d; <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n</blockquote>\n"}],"Post":[{"title":"vue 指令语法","date":"2023-11-06T08:04:06.000Z","_content":"\n## 指令\n\n种类：v-html, v-bind, v-on, v-model, v-slot ...\n\n指令语法如下图所示：\n![指令语法](https://img20.360buyimg.com/img/jfs/t1/89597/35/41403/16292/65489fc5Fb2d8b302/d64ca449c9e1d57b.png)\n\n### 动态参数\n\n（1）动态参数的值应为字符串或 null（null 会移除该绑定）\n\n（2）动态参数的名称避免使用大写字母，因为会被强制转为小写（someAttr -> someattr）\n\n``` html\n<a :[attributeName]=\"url\"> ... </a>\n\n<a @[eventName]=\"doSomething\">\n```\n\n### 修饰符\n\n修饰符为以点开头的特殊后缀，比如：.prevent 修饰符会告知 v-on 指令对触发的事件调用 event.preventDefault()\n\n``` html\n<div @submit.prevent=\"onSubmit\"></div>\n```\n\n## v-html\n\nspan 的内容会被替换为 rawHtml 属性的值，其中的数据绑定会被忽略（注意：使用这种方法容易造成 XSS 漏洞）\n\n``` html\n<span v-html=\"rawHtml\"></span>\n```\n\n## v-bind\n\n``` html\n<div v-bind:id=\"dynamicId\"></div>\n<!--简写-->\n<div :id=\"dynamicId\"></div>\n```\n\n### 动态绑定多个值\n\n``` js\nconst objOfAttrs = {\n    id: 'container',\n    class: 'wrapper'\n};\n```\n\n``` html\n<div :objOfAttrs></div>\n```\n\n比如：动态 style class\n\n``` html\n<div :style=\"{class1: isClass1, class2: isClass2}\"></div>\n```\n\n## v-on\n\n``` html\n<div v-on:click=\"onClick\"></div>\n<!--简写-->\n<div @click=\"onClick\"></div>\n```\n\n## v-if\n\nv-if, v-else-if, v-else\n\n注意：v-if 的优先级大于 v-for，二者不建议同时使用（详见 v-for）\n\n### template 上的 v-if\n\n如果想要切换不止一个元素，可以在元素外包一个 ``<template>``，并用 v-if 控制（v-show 不能在 template 上使用）\n\n因为 ``<template>`` 是一个不可见的包装器元素，渲染的结果中不会包含该元素\n\n### v-if & v-show\n\n（1）原理：v-if 切换时，条件区块会被销毁与重建；v-show 切换时，只会切换 display 属性\n\n（2）惰性：v-if 是惰性的，如果初始为 false 则不渲染；v-show 初始始终会渲染\n\n（3）场景：v-if 初始渲染开销较好，不会频繁切换时使用；v-show 切换开销较小，频繁切换时使用\n","source":"_posts/2-vue指令语法.md","raw":"---\ntitle: vue 指令语法\ndate: 2023-11-06 16:04:06\ntags:\n    - vue\ncategories:\n    - vue\n      - 文档\n---\n\n## 指令\n\n种类：v-html, v-bind, v-on, v-model, v-slot ...\n\n指令语法如下图所示：\n![指令语法](https://img20.360buyimg.com/img/jfs/t1/89597/35/41403/16292/65489fc5Fb2d8b302/d64ca449c9e1d57b.png)\n\n### 动态参数\n\n（1）动态参数的值应为字符串或 null（null 会移除该绑定）\n\n（2）动态参数的名称避免使用大写字母，因为会被强制转为小写（someAttr -> someattr）\n\n``` html\n<a :[attributeName]=\"url\"> ... </a>\n\n<a @[eventName]=\"doSomething\">\n```\n\n### 修饰符\n\n修饰符为以点开头的特殊后缀，比如：.prevent 修饰符会告知 v-on 指令对触发的事件调用 event.preventDefault()\n\n``` html\n<div @submit.prevent=\"onSubmit\"></div>\n```\n\n## v-html\n\nspan 的内容会被替换为 rawHtml 属性的值，其中的数据绑定会被忽略（注意：使用这种方法容易造成 XSS 漏洞）\n\n``` html\n<span v-html=\"rawHtml\"></span>\n```\n\n## v-bind\n\n``` html\n<div v-bind:id=\"dynamicId\"></div>\n<!--简写-->\n<div :id=\"dynamicId\"></div>\n```\n\n### 动态绑定多个值\n\n``` js\nconst objOfAttrs = {\n    id: 'container',\n    class: 'wrapper'\n};\n```\n\n``` html\n<div :objOfAttrs></div>\n```\n\n比如：动态 style class\n\n``` html\n<div :style=\"{class1: isClass1, class2: isClass2}\"></div>\n```\n\n## v-on\n\n``` html\n<div v-on:click=\"onClick\"></div>\n<!--简写-->\n<div @click=\"onClick\"></div>\n```\n\n## v-if\n\nv-if, v-else-if, v-else\n\n注意：v-if 的优先级大于 v-for，二者不建议同时使用（详见 v-for）\n\n### template 上的 v-if\n\n如果想要切换不止一个元素，可以在元素外包一个 ``<template>``，并用 v-if 控制（v-show 不能在 template 上使用）\n\n因为 ``<template>`` 是一个不可见的包装器元素，渲染的结果中不会包含该元素\n\n### v-if & v-show\n\n（1）原理：v-if 切换时，条件区块会被销毁与重建；v-show 切换时，只会切换 display 属性\n\n（2）惰性：v-if 是惰性的，如果初始为 false 则不渲染；v-show 初始始终会渲染\n\n（3）场景：v-if 初始渲染开销较好，不会频繁切换时使用；v-show 切换开销较小，频繁切换时使用\n","slug":"2-vue指令语法","published":1,"updated":"2023-12-26T03:21:50.740Z","_id":"clomn21kc0005m5w60q8kcman","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h2><p>种类：v-html, v-bind, v-on, v-model, v-slot …</p>\n<p>指令语法如下图所示：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://img20.360buyimg.com/img/jfs/t1/89597/35/41403/16292/65489fc5Fb2d8b302/d64ca449c9e1d57b.png\"\n                      alt=\"指令语法\"\n                ></p>\n<h3 id=\"动态参数\"><a href=\"#动态参数\" class=\"headerlink\" title=\"动态参数\"></a>动态参数</h3><p>（1）动态参数的值应为字符串或 null（null 会移除该绑定）</p>\n<p>（2）动态参数的名称避免使用大写字母，因为会被强制转为小写（someAttr -&gt; someattr）</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:</span>[<span class=\"attr\">attributeName</span>]=<span class=\"string\">&quot;url&quot;</span>&gt;</span> ... <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> @[<span class=\"attr\">eventName</span>]=<span class=\"string\">&quot;doSomething&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h3><p>修饰符为以点开头的特殊后缀，比如：.prevent 修饰符会告知 v-on 指令对触发的事件调用 event.preventDefault()</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> @<span class=\"attr\">submit.prevent</span>=<span class=\"string\">&quot;onSubmit&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"v-html\"><a href=\"#v-html\" class=\"headerlink\" title=\"v-html\"></a>v-html</h2><p>span 的内容会被替换为 rawHtml 属性的值，其中的数据绑定会被忽略（注意：使用这种方法容易造成 XSS 漏洞）</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-html</span>=<span class=\"string\">&quot;rawHtml&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"v-bind\"><a href=\"#v-bind\" class=\"headerlink\" title=\"v-bind\"></a>v-bind</h2><div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">&quot;dynamicId&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--简写--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:id</span>=<span class=\"string\">&quot;dynamicId&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"动态绑定多个值\"><a href=\"#动态绑定多个值\" class=\"headerlink\" title=\"动态绑定多个值\"></a>动态绑定多个值</h3><div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> objOfAttrs = &#123;</span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"string\">&#x27;container&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">class</span>: <span class=\"string\">&#x27;wrapper&#x27;</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></div>\n\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:objOfAttrs</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>比如：动态 style class</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;&#123;class1: isClass1, class2: isClass2&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"v-on\"><a href=\"#v-on\" class=\"headerlink\" title=\"v-on\"></a>v-on</h2><div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">&quot;onClick&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--简写--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;onClick&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"v-if\"><a href=\"#v-if\" class=\"headerlink\" title=\"v-if\"></a>v-if</h2><p>v-if, v-else-if, v-else</p>\n<p>注意：v-if 的优先级大于 v-for，二者不建议同时使用（详见 v-for）</p>\n<h3 id=\"template-上的-v-if\"><a href=\"#template-上的-v-if\" class=\"headerlink\" title=\"template 上的 v-if\"></a>template 上的 v-if</h3><p>如果想要切换不止一个元素，可以在元素外包一个 <code>&lt;template&gt;</code>，并用 v-if 控制（v-show 不能在 template 上使用）</p>\n<p>因为 <code>&lt;template&gt;</code> 是一个不可见的包装器元素，渲染的结果中不会包含该元素</p>\n<h3 id=\"v-if-v-show\"><a href=\"#v-if-v-show\" class=\"headerlink\" title=\"v-if &amp; v-show\"></a>v-if &amp; v-show</h3><p>（1）原理：v-if 切换时，条件区块会被销毁与重建；v-show 切换时，只会切换 display 属性</p>\n<p>（2）惰性：v-if 是惰性的，如果初始为 false 则不渲染；v-show 初始始终会渲染</p>\n<p>（3）场景：v-if 初始渲染开销较好，不会频繁切换时使用；v-show 切换开销较小，频繁切换时使用</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h2><p>种类：v-html, v-bind, v-on, v-model, v-slot …</p>\n<p>指令语法如下图所示：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://img20.360buyimg.com/img/jfs/t1/89597/35/41403/16292/65489fc5Fb2d8b302/d64ca449c9e1d57b.png\"\n                      alt=\"指令语法\"\n                ></p>\n<h3 id=\"动态参数\"><a href=\"#动态参数\" class=\"headerlink\" title=\"动态参数\"></a>动态参数</h3><p>（1）动态参数的值应为字符串或 null（null 会移除该绑定）</p>\n<p>（2）动态参数的名称避免使用大写字母，因为会被强制转为小写（someAttr -&gt; someattr）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:</span>[<span class=\"attr\">attributeName</span>]=<span class=\"string\">&quot;url&quot;</span>&gt;</span> ... <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> @[<span class=\"attr\">eventName</span>]=<span class=\"string\">&quot;doSomething&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h3><p>修饰符为以点开头的特殊后缀，比如：.prevent 修饰符会告知 v-on 指令对触发的事件调用 event.preventDefault()</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> @<span class=\"attr\">submit.prevent</span>=<span class=\"string\">&quot;onSubmit&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"v-html\"><a href=\"#v-html\" class=\"headerlink\" title=\"v-html\"></a>v-html</h2><p>span 的内容会被替换为 rawHtml 属性的值，其中的数据绑定会被忽略（注意：使用这种方法容易造成 XSS 漏洞）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-html</span>=<span class=\"string\">&quot;rawHtml&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"v-bind\"><a href=\"#v-bind\" class=\"headerlink\" title=\"v-bind\"></a>v-bind</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">&quot;dynamicId&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--简写--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:id</span>=<span class=\"string\">&quot;dynamicId&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"动态绑定多个值\"><a href=\"#动态绑定多个值\" class=\"headerlink\" title=\"动态绑定多个值\"></a>动态绑定多个值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> objOfAttrs = &#123;</span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"string\">&#x27;container&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">class</span>: <span class=\"string\">&#x27;wrapper&#x27;</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:objOfAttrs</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>比如：动态 style class</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;&#123;class1: isClass1, class2: isClass2&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"v-on\"><a href=\"#v-on\" class=\"headerlink\" title=\"v-on\"></a>v-on</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">&quot;onClick&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--简写--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;onClick&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"v-if\"><a href=\"#v-if\" class=\"headerlink\" title=\"v-if\"></a>v-if</h2><p>v-if, v-else-if, v-else</p>\n<p>注意：v-if 的优先级大于 v-for，二者不建议同时使用（详见 v-for）</p>\n<h3 id=\"template-上的-v-if\"><a href=\"#template-上的-v-if\" class=\"headerlink\" title=\"template 上的 v-if\"></a>template 上的 v-if</h3><p>如果想要切换不止一个元素，可以在元素外包一个 <code>&lt;template&gt;</code>，并用 v-if 控制（v-show 不能在 template 上使用）</p>\n<p>因为 <code>&lt;template&gt;</code> 是一个不可见的包装器元素，渲染的结果中不会包含该元素</p>\n<h3 id=\"v-if-v-show\"><a href=\"#v-if-v-show\" class=\"headerlink\" title=\"v-if &amp; v-show\"></a>v-if &amp; v-show</h3><p>（1）原理：v-if 切换时，条件区块会被销毁与重建；v-show 切换时，只会切换 display 属性</p>\n<p>（2）惰性：v-if 是惰性的，如果初始为 false 则不渲染；v-show 初始始终会渲染</p>\n<p>（3）场景：v-if 初始渲染开销较好，不会频繁切换时使用；v-show 切换开销较小，频繁切换时使用</p>\n"},{"title":"vue3 应用的创建&使用","date":"2023-11-06T03:27:47.000Z","_content":"\n## 创建应用\n\n``` bash\nnpm create vue@latest\n```\n\n## 通过CDN使用vue\n\n这里使用了提供 npm 包服务的 CDN —— unpkg\n\n``` html\n<script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>\n```\n\n### DOM 中的根组件模板\n\n当根组件没有设置 template 选项时，Vue 将自动使用容器的 innerHTML 作为模板\n\n这种方式通常用于此种“无构建步骤”（通过 CDN 使用 vue）的应用程序\n\n``` html\n<div id=\"app\">\n  <button @click=\"count++\">{{ count }}</button>\n</div>\n```\n\n``` js\nimport { createApp } from 'vue';\n\nconst app = createApp({\n  data() {\n    return {\n      count: 0\n    }\n  }\n}).mount('#app');\n```\n\n### 全局构建\n\n上述链接使用 *全局构建* 版本的 Vue，所有顶层 API 都暴露为全局 Vue 对象的属性\n\n``` html\n<script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>\n<div id=\"app\">{{ message }}</div>\n\n<script>\n  const { createApp, ref } = Vue;\n/**  1. 创建应用并挂载 */\n  createApp({\n    setup() {\n      const message = ref('Hello world!');\n      return {\n        message\n      };\n    }\n  }).mount('#app');\n  \n  /**  2. 分步骤 */\n  // // a. 创建应用\n  // const app = createApp({\n  //   setup() {\n  //     const message = ref('Hello world!');\n  //     return {\n  //       message\n  //     }\n  //   };\n  // });\n  // // b. 挂载\n  // app.mount('#app');\n</script>\n```\n\n### 导入映射表（Import maps）\n\n不使用完整的 CDN URL 引入，而使用 es6 的导入映射表（import maps）\n\n``` html\n<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"vue\": \"https://unpkg.com/vue@3/dist/vue.global.js\"\n    }\n  }\n</script>\n<div id=\"app\">{{ message }}</div>\n\n<script type=\"module\">\n  import { createApp, ref } from \"vue\";\n\n  createApp({\n    setup() {\n      const message = ref(\"Hello world!\");\n      return {\n        message\n      };\n    }\n  }).mount('#app');\n</script>\n```\n\n### 拆分模块\n\n将代码拆分为单独的 js 文件以便管理\n\n出于安全原因，es 模块只能通过 http 协议工作，所以需要使用本地的 http 服务器，通过 http 协议提供 index.html。比如：安装 Node.js，在 html 文件所在的文件夹运行 ``npx serve``\n\n``` html\n<!-- index.html -->\n<div id=\"app\"></div>\n\n<script type=\"module\">\n  import { createApp } from 'vue';\n  import MyComponent from './my-component.js';\n  createApp(MyComponent).mount('#app');\n</script>\n```\n\n``` js\n// my-component.js\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const count = ref(0);\n    return { count };\n  },\n  template: `<div>count is {{ count }}</div>`\n}\n```\n","source":"_posts/1-vue3应用的创建&使用.md","raw":"---\ntitle: vue3 应用的创建&使用\ndate: 2023-11-06 11:27:47\ntags:\n    - vue3\n    - vue\ncategories:\n    - vue3\n      - 文档\n---\n\n## 创建应用\n\n``` bash\nnpm create vue@latest\n```\n\n## 通过CDN使用vue\n\n这里使用了提供 npm 包服务的 CDN —— unpkg\n\n``` html\n<script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>\n```\n\n### DOM 中的根组件模板\n\n当根组件没有设置 template 选项时，Vue 将自动使用容器的 innerHTML 作为模板\n\n这种方式通常用于此种“无构建步骤”（通过 CDN 使用 vue）的应用程序\n\n``` html\n<div id=\"app\">\n  <button @click=\"count++\">{{ count }}</button>\n</div>\n```\n\n``` js\nimport { createApp } from 'vue';\n\nconst app = createApp({\n  data() {\n    return {\n      count: 0\n    }\n  }\n}).mount('#app');\n```\n\n### 全局构建\n\n上述链接使用 *全局构建* 版本的 Vue，所有顶层 API 都暴露为全局 Vue 对象的属性\n\n``` html\n<script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>\n<div id=\"app\">{{ message }}</div>\n\n<script>\n  const { createApp, ref } = Vue;\n/**  1. 创建应用并挂载 */\n  createApp({\n    setup() {\n      const message = ref('Hello world!');\n      return {\n        message\n      };\n    }\n  }).mount('#app');\n  \n  /**  2. 分步骤 */\n  // // a. 创建应用\n  // const app = createApp({\n  //   setup() {\n  //     const message = ref('Hello world!');\n  //     return {\n  //       message\n  //     }\n  //   };\n  // });\n  // // b. 挂载\n  // app.mount('#app');\n</script>\n```\n\n### 导入映射表（Import maps）\n\n不使用完整的 CDN URL 引入，而使用 es6 的导入映射表（import maps）\n\n``` html\n<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"vue\": \"https://unpkg.com/vue@3/dist/vue.global.js\"\n    }\n  }\n</script>\n<div id=\"app\">{{ message }}</div>\n\n<script type=\"module\">\n  import { createApp, ref } from \"vue\";\n\n  createApp({\n    setup() {\n      const message = ref(\"Hello world!\");\n      return {\n        message\n      };\n    }\n  }).mount('#app');\n</script>\n```\n\n### 拆分模块\n\n将代码拆分为单独的 js 文件以便管理\n\n出于安全原因，es 模块只能通过 http 协议工作，所以需要使用本地的 http 服务器，通过 http 协议提供 index.html。比如：安装 Node.js，在 html 文件所在的文件夹运行 ``npx serve``\n\n``` html\n<!-- index.html -->\n<div id=\"app\"></div>\n\n<script type=\"module\">\n  import { createApp } from 'vue';\n  import MyComponent from './my-component.js';\n  createApp(MyComponent).mount('#app');\n</script>\n```\n\n``` js\n// my-component.js\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const count = ref(0);\n    return { count };\n  },\n  template: `<div>count is {{ count }}</div>`\n}\n```\n","slug":"1-vue3应用的创建&使用","published":1,"updated":"2023-12-26T03:21:53.821Z","_id":"clomnjwvc000fm5w68cc8bqrv","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"创建应用\"><a href=\"#创建应用\" class=\"headerlink\" title=\"创建应用\"></a>创建应用</h2><div class=\"highlight-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm create vue@latest</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"通过CDN使用vue\"><a href=\"#通过CDN使用vue\" class=\"headerlink\" title=\"通过CDN使用vue\"></a>通过CDN使用vue</h2><p>这里使用了提供 npm 包服务的 CDN —— unpkg</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"DOM-中的根组件模板\"><a href=\"#DOM-中的根组件模板\" class=\"headerlink\" title=\"DOM 中的根组件模板\"></a>DOM 中的根组件模板</h3><p>当根组件没有设置 template 选项时，Vue 将自动使用容器的 innerHTML 作为模板</p>\n<p>这种方式通常用于此种“无构建步骤”（通过 CDN 使用 vue）的应用程序</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;count++&quot;</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">createApp</span>(&#123;</span><br><span class=\"line\">  <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">count</span>: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;).<span class=\"title function_\">mount</span>(<span class=\"string\">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"全局构建\"><a href=\"#全局构建\" class=\"headerlink\" title=\"全局构建\"></a>全局构建</h3><p>上述链接使用 <em>全局构建</em> 版本的 Vue，所有顶层 API 都暴露为全局 Vue 对象的属性</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> &#123; createApp, ref &#125; = <span class=\"title class_\">Vue</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"comment\">/**  1. 创建应用并挂载 */</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">createApp</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">setup</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">const</span> message = <span class=\"title function_\">ref</span>(<span class=\"string\">&#x27;Hello world!&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        message</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;).<span class=\"title function_\">mount</span>(<span class=\"string\">&#x27;#app&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  </span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">/**  2. 分步骤 */</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// // a. 创建应用</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// const app = createApp(&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">//   setup() &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">//     const message = ref(&#x27;Hello world!&#x27;);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">//     return &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">//       message</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">//     &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">//   &#125;;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// &#125;);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// // b. 挂载</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// app.mount(&#x27;#app&#x27;);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"导入映射表（Import-maps）\"><a href=\"#导入映射表（Import-maps）\" class=\"headerlink\" title=\"导入映射表（Import maps）\"></a>导入映射表（Import maps）</h3><p>不使用完整的 CDN URL 引入，而使用 es6 的导入映射表（import maps）</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;importmap&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"string\">&quot;imports&quot;</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"string\">&quot;vue&quot;</span>: <span class=\"string\">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;module&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> &#123; createApp, ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">createApp</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">setup</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">const</span> message = <span class=\"title function_\">ref</span>(<span class=\"string\">&quot;Hello world!&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        message</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;).<span class=\"title function_\">mount</span>(<span class=\"string\">&#x27;#app&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"拆分模块\"><a href=\"#拆分模块\" class=\"headerlink\" title=\"拆分模块\"></a>拆分模块</h3><p>将代码拆分为单独的 js 文件以便管理</p>\n<p>出于安全原因，es 模块只能通过 http 协议工作，所以需要使用本地的 http 服务器，通过 http 协议提供 index.html。比如：安装 Node.js，在 html 文件所在的文件夹运行 <code>npx serve</code></p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- index.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;module&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> <span class=\"title class_\">MyComponent</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./my-component.js&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">createApp</span>(<span class=\"title class_\">MyComponent</span>).<span class=\"title function_\">mount</span>(<span class=\"string\">&#x27;#app&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// my-component.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">setup</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> count = <span class=\"title function_\">ref</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; count &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">`&lt;div&gt;count is &#123;&#123; count &#125;&#125;&lt;/div&gt;`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"创建应用\"><a href=\"#创建应用\" class=\"headerlink\" title=\"创建应用\"></a>创建应用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm create vue@latest</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"通过CDN使用vue\"><a href=\"#通过CDN使用vue\" class=\"headerlink\" title=\"通过CDN使用vue\"></a>通过CDN使用vue</h2><p>这里使用了提供 npm 包服务的 CDN —— unpkg</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"DOM-中的根组件模板\"><a href=\"#DOM-中的根组件模板\" class=\"headerlink\" title=\"DOM 中的根组件模板\"></a>DOM 中的根组件模板</h3><p>当根组件没有设置 template 选项时，Vue 将自动使用容器的 innerHTML 作为模板</p>\n<p>这种方式通常用于此种“无构建步骤”（通过 CDN 使用 vue）的应用程序</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;count++&quot;</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">createApp</span>(&#123;</span><br><span class=\"line\">  <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">count</span>: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;).<span class=\"title function_\">mount</span>(<span class=\"string\">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"全局构建\"><a href=\"#全局构建\" class=\"headerlink\" title=\"全局构建\"></a>全局构建</h3><p>上述链接使用 <em>全局构建</em> 版本的 Vue，所有顶层 API 都暴露为全局 Vue 对象的属性</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> &#123; createApp, ref &#125; = <span class=\"title class_\">Vue</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"comment\">/**  1. 创建应用并挂载 */</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">createApp</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">setup</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">const</span> message = <span class=\"title function_\">ref</span>(<span class=\"string\">&#x27;Hello world!&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        message</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;).<span class=\"title function_\">mount</span>(<span class=\"string\">&#x27;#app&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  </span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">/**  2. 分步骤 */</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// // a. 创建应用</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// const app = createApp(&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">//   setup() &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">//     const message = ref(&#x27;Hello world!&#x27;);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">//     return &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">//       message</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">//     &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">//   &#125;;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// &#125;);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// // b. 挂载</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// app.mount(&#x27;#app&#x27;);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"导入映射表（Import-maps）\"><a href=\"#导入映射表（Import-maps）\" class=\"headerlink\" title=\"导入映射表（Import maps）\"></a>导入映射表（Import maps）</h3><p>不使用完整的 CDN URL 引入，而使用 es6 的导入映射表（import maps）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;importmap&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"string\">&quot;imports&quot;</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"string\">&quot;vue&quot;</span>: <span class=\"string\">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;module&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> &#123; createApp, ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">createApp</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">setup</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">const</span> message = <span class=\"title function_\">ref</span>(<span class=\"string\">&quot;Hello world!&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        message</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;).<span class=\"title function_\">mount</span>(<span class=\"string\">&#x27;#app&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"拆分模块\"><a href=\"#拆分模块\" class=\"headerlink\" title=\"拆分模块\"></a>拆分模块</h3><p>将代码拆分为单独的 js 文件以便管理</p>\n<p>出于安全原因，es 模块只能通过 http 协议工作，所以需要使用本地的 http 服务器，通过 http 协议提供 index.html。比如：安装 Node.js，在 html 文件所在的文件夹运行 <code>npx serve</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- index.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;module&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> <span class=\"title class_\">MyComponent</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./my-component.js&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">createApp</span>(<span class=\"title class_\">MyComponent</span>).<span class=\"title function_\">mount</span>(<span class=\"string\">&#x27;#app&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// my-component.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">setup</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> count = <span class=\"title function_\">ref</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; count &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">`&lt;div&gt;count is &#123;&#123; count &#125;&#125;&lt;/div&gt;`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"vue3 响应式","date":"2023-11-06T08:41:05.000Z","_content":"\n## ref()\n\nref() 返回一个包含属性 value 的对象\n\n``` js\nimport { ref } from 'vue';\n\nexport default {\n    setup() {\n        const count = ref(0);\n        function increment() {\n            count.value++;\n        }\n        return {\n            count,\n            increment\n        }\n    }\n}\n```\n\n``` html\n<button @click=\"increment\">{{ count }}</button>\n```\n\n### 原理\n\nref 的 .value 属性使得 Vue 可以检测其何时被访问或修改\n\n当一个组件首次渲染时，Vue 会**追踪**在渲染过程中使用的每一个 ref；当一个 ref 被修改时，它会**触发** 追踪它的组件 的重新渲染\n\n``` js\n// 伪代码\nconst myRef = {\n    _value: 0,\n    get value() {\n        track(); // 追踪渲染过程中使用的每一个 ref\n        return this._value;\n    },\n    set value(newValue) {\n        this._value = newValue;\n        trigger(); // 触发追踪它的组件的重新渲染\n    }\n}\n```\n\n### ``<script setup>``\n\n使用 ``<script setup>`` 简化代码\n\n``` html\n<script setup>\nimport { ref } from 'vue';\n\nconst count = ref(0);\n\nfunction increment() {\n    count.value++;\n}\n</script>\n\n<template>\n    <button @click=\"increment\">{{ count }}</button>\n</template>\n```\n\n## DOM 更新时机\n\nDOM 更新后，立即执行回调函数\n\n``` js\nimport { nextTick } from 'vue';\n\nasync function increment() {\n    count.value++;\n    await nextTick();\n    callback();\n}\n```\n\n或者\n\n``` js\nimport { nextTick } from 'vue';\n\nfunction increment() {\n    count.value++;\n    nextTick(() => callback());\n}\n```\n\n## reactive()\n\nreactive() 使对象本身具有响应性，当 ref 的值是一个对象时，会在内层调用 reactive\n\n### 原理\n\nreactive() 返回原始对象的 proxy，允许 Vue 拦截和定义基本操作的行为（如属性查找、赋值、删除等）\n\nreactive() 的返回值和原始对象不相等\n\n``` js\nconst raw = {};\nconst proxy = reactive(raw);\nconsole.log(raw === proxy); // false\n```\n\n### reactive() 的局限性\n\n（1）有限的值类型：只能用于对象类型（对象、数组、Map、Set），不能用于原始类型；\n\n（2）不能替换整个对象：替换整个对象会导致响应式连接丢失；\n\n（3）对解构操作不友好：解构后的变量会丢失响应式连接。\n\n## ref 解包\n\n### ref 作为 reactive 对象属性\n\nref 作为响应式对象的属性时，就像一个普通的属性\n\n``` js\nconst count = ref(0);\nconst state = reactive({ count });\nconsole.log(state.count); // 0\n\nstate.count = 1;\nconsole.log(state.count); // 1\n```\n\n### 在模板中解包\n\n在模板渲染上下文中，只有顶级的 ref 才会被解包\n\n第二个不符合预期是因为，obj.id 未被解包，仍是一个 ref 对象\n\n``` js\nconst count = ref(0);\nconst obj = {\n    id: ref(1)\n};\n```\n\n``` html\n<!-- 符合预期 —— 2 -->\n{{ count + 1 }}\n<!-- 不符合预期 —— [object Object]1 -->\n{{ obj.id + 1 }}\n```\n\n为了解决该问题，需要将 id 结构为顶级属性\n\n``` js\nconst { id } = obj;\n```\n\n``` html\n<!-- 符合预期 —— 2 -->\n{{ id + 1 }}\n```\n","source":"_posts/3-vue3响应式.md","raw":"---\ntitle: vue3 响应式\ndate: 2023-11-06 16:41:05\ntags:\n    - vue3\n    - vue\ncategories:\n    - vue3\n      - 文档\n---\n\n## ref()\n\nref() 返回一个包含属性 value 的对象\n\n``` js\nimport { ref } from 'vue';\n\nexport default {\n    setup() {\n        const count = ref(0);\n        function increment() {\n            count.value++;\n        }\n        return {\n            count,\n            increment\n        }\n    }\n}\n```\n\n``` html\n<button @click=\"increment\">{{ count }}</button>\n```\n\n### 原理\n\nref 的 .value 属性使得 Vue 可以检测其何时被访问或修改\n\n当一个组件首次渲染时，Vue 会**追踪**在渲染过程中使用的每一个 ref；当一个 ref 被修改时，它会**触发** 追踪它的组件 的重新渲染\n\n``` js\n// 伪代码\nconst myRef = {\n    _value: 0,\n    get value() {\n        track(); // 追踪渲染过程中使用的每一个 ref\n        return this._value;\n    },\n    set value(newValue) {\n        this._value = newValue;\n        trigger(); // 触发追踪它的组件的重新渲染\n    }\n}\n```\n\n### ``<script setup>``\n\n使用 ``<script setup>`` 简化代码\n\n``` html\n<script setup>\nimport { ref } from 'vue';\n\nconst count = ref(0);\n\nfunction increment() {\n    count.value++;\n}\n</script>\n\n<template>\n    <button @click=\"increment\">{{ count }}</button>\n</template>\n```\n\n## DOM 更新时机\n\nDOM 更新后，立即执行回调函数\n\n``` js\nimport { nextTick } from 'vue';\n\nasync function increment() {\n    count.value++;\n    await nextTick();\n    callback();\n}\n```\n\n或者\n\n``` js\nimport { nextTick } from 'vue';\n\nfunction increment() {\n    count.value++;\n    nextTick(() => callback());\n}\n```\n\n## reactive()\n\nreactive() 使对象本身具有响应性，当 ref 的值是一个对象时，会在内层调用 reactive\n\n### 原理\n\nreactive() 返回原始对象的 proxy，允许 Vue 拦截和定义基本操作的行为（如属性查找、赋值、删除等）\n\nreactive() 的返回值和原始对象不相等\n\n``` js\nconst raw = {};\nconst proxy = reactive(raw);\nconsole.log(raw === proxy); // false\n```\n\n### reactive() 的局限性\n\n（1）有限的值类型：只能用于对象类型（对象、数组、Map、Set），不能用于原始类型；\n\n（2）不能替换整个对象：替换整个对象会导致响应式连接丢失；\n\n（3）对解构操作不友好：解构后的变量会丢失响应式连接。\n\n## ref 解包\n\n### ref 作为 reactive 对象属性\n\nref 作为响应式对象的属性时，就像一个普通的属性\n\n``` js\nconst count = ref(0);\nconst state = reactive({ count });\nconsole.log(state.count); // 0\n\nstate.count = 1;\nconsole.log(state.count); // 1\n```\n\n### 在模板中解包\n\n在模板渲染上下文中，只有顶级的 ref 才会被解包\n\n第二个不符合预期是因为，obj.id 未被解包，仍是一个 ref 对象\n\n``` js\nconst count = ref(0);\nconst obj = {\n    id: ref(1)\n};\n```\n\n``` html\n<!-- 符合预期 —— 2 -->\n{{ count + 1 }}\n<!-- 不符合预期 —— [object Object]1 -->\n{{ obj.id + 1 }}\n```\n\n为了解决该问题，需要将 id 结构为顶级属性\n\n``` js\nconst { id } = obj;\n```\n\n``` html\n<!-- 符合预期 —— 2 -->\n{{ id + 1 }}\n```\n","slug":"3-vue3响应式","published":1,"updated":"2023-12-26T03:21:48.753Z","_id":"clomnki9v000im5w67a9mafk9","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref()\"></a>ref()</h2><p>ref() 返回一个包含属性 value 的对象</p>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setup</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> count = <span class=\"title function_\">ref</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"title function_\">increment</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            count.<span class=\"property\">value</span>++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            count,</span><br><span class=\"line\">            increment</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;increment&quot;</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>ref 的 .value 属性使得 Vue 可以检测其何时被访问或修改</p>\n<p>当一个组件首次渲染时，Vue 会<strong>追踪</strong>在渲染过程中使用的每一个 ref；当一个 ref 被修改时，它会<strong>触发</strong> 追踪它的组件 的重新渲染</p>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 伪代码</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> myRef = &#123;</span><br><span class=\"line\">    <span class=\"attr\">_value</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"keyword\">get</span> <span class=\"title function_\">value</span>() &#123;</span><br><span class=\"line\">        <span class=\"title function_\">track</span>(); <span class=\"comment\">// 追踪渲染过程中使用的每一个 ref</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_value</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">set</span> <span class=\"title function_\">value</span>(<span class=\"params\">newValue</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_value</span> = newValue;</span><br><span class=\"line\">        <span class=\"title function_\">trigger</span>(); <span class=\"comment\">// 触发追踪它的组件的重新渲染</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"&lt;script setup&gt;\"></a><code>&lt;script setup&gt;</code></h3><p>使用 <code>&lt;script setup&gt;</code> 简化代码</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123; ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> count = <span class=\"title function_\">ref</span>(<span class=\"number\">0</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">function</span> <span class=\"title function_\">increment</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    count.<span class=\"property\">value</span>++;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;increment&quot;</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"DOM-更新时机\"><a href=\"#DOM-更新时机\" class=\"headerlink\" title=\"DOM 更新时机\"></a>DOM 更新时机</h2><p>DOM 更新后，立即执行回调函数</p>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; nextTick &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">increment</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    count.<span class=\"property\">value</span>++;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">nextTick</span>();</span><br><span class=\"line\">    <span class=\"title function_\">callback</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>或者</p>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; nextTick &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">increment</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    count.<span class=\"property\">value</span>++;</span><br><span class=\"line\">    <span class=\"title function_\">nextTick</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">callback</span>());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"reactive\"><a href=\"#reactive\" class=\"headerlink\" title=\"reactive()\"></a>reactive()</h2><p>reactive() 使对象本身具有响应性，当 ref 的值是一个对象时，会在内层调用 reactive</p>\n<h3 id=\"原理-1\"><a href=\"#原理-1\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>reactive() 返回原始对象的 proxy，允许 Vue 拦截和定义基本操作的行为（如属性查找、赋值、删除等）</p>\n<p>reactive() 的返回值和原始对象不相等</p>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> raw = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"title function_\">reactive</span>(raw);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(raw === proxy); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"reactive-的局限性\"><a href=\"#reactive-的局限性\" class=\"headerlink\" title=\"reactive() 的局限性\"></a>reactive() 的局限性</h3><p>（1）有限的值类型：只能用于对象类型（对象、数组、Map、Set），不能用于原始类型；</p>\n<p>（2）不能替换整个对象：替换整个对象会导致响应式连接丢失；</p>\n<p>（3）对解构操作不友好：解构后的变量会丢失响应式连接。</p>\n<h2 id=\"ref-解包\"><a href=\"#ref-解包\" class=\"headerlink\" title=\"ref 解包\"></a>ref 解包</h2><h3 id=\"ref-作为-reactive-对象属性\"><a href=\"#ref-作为-reactive-对象属性\" class=\"headerlink\" title=\"ref 作为 reactive 对象属性\"></a>ref 作为 reactive 对象属性</h3><p>ref 作为响应式对象的属性时，就像一个普通的属性</p>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> count = <span class=\"title function_\">ref</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> state = <span class=\"title function_\">reactive</span>(&#123; count &#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(state.<span class=\"property\">count</span>); <span class=\"comment\">// 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">state.<span class=\"property\">count</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(state.<span class=\"property\">count</span>); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"在模板中解包\"><a href=\"#在模板中解包\" class=\"headerlink\" title=\"在模板中解包\"></a>在模板中解包</h3><p>在模板渲染上下文中，只有顶级的 ref 才会被解包</p>\n<p>第二个不符合预期是因为，obj.id 未被解包，仍是一个 ref 对象</p>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> count = <span class=\"title function_\">ref</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"title function_\">ref</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></div>\n\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 符合预期 —— 2 --&gt;</span></span><br><span class=\"line\">&#123;&#123; count + 1 &#125;&#125;</span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 不符合预期 —— [object Object]1 --&gt;</span></span><br><span class=\"line\">&#123;&#123; obj.id + 1 &#125;&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>为了解决该问题，需要将 id 结构为顶级属性</p>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; id &#125; = obj;</span><br></pre></td></tr></table></figure></div>\n\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 符合预期 —— 2 --&gt;</span></span><br><span class=\"line\">&#123;&#123; id + 1 &#125;&#125;</span><br></pre></td></tr></table></figure></div>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref()\"></a>ref()</h2><p>ref() 返回一个包含属性 value 的对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setup</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> count = <span class=\"title function_\">ref</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"title function_\">increment</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            count.<span class=\"property\">value</span>++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            count,</span><br><span class=\"line\">            increment</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;increment&quot;</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>ref 的 .value 属性使得 Vue 可以检测其何时被访问或修改</p>\n<p>当一个组件首次渲染时，Vue 会<strong>追踪</strong>在渲染过程中使用的每一个 ref；当一个 ref 被修改时，它会<strong>触发</strong> 追踪它的组件 的重新渲染</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 伪代码</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> myRef = &#123;</span><br><span class=\"line\">    <span class=\"attr\">_value</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"keyword\">get</span> <span class=\"title function_\">value</span>() &#123;</span><br><span class=\"line\">        <span class=\"title function_\">track</span>(); <span class=\"comment\">// 追踪渲染过程中使用的每一个 ref</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_value</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">set</span> <span class=\"title function_\">value</span>(<span class=\"params\">newValue</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_value</span> = newValue;</span><br><span class=\"line\">        <span class=\"title function_\">trigger</span>(); <span class=\"comment\">// 触发追踪它的组件的重新渲染</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"&lt;script setup&gt;\"></a><code>&lt;script setup&gt;</code></h3><p>使用 <code>&lt;script setup&gt;</code> 简化代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123; ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> count = <span class=\"title function_\">ref</span>(<span class=\"number\">0</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">function</span> <span class=\"title function_\">increment</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    count.<span class=\"property\">value</span>++;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;increment&quot;</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"DOM-更新时机\"><a href=\"#DOM-更新时机\" class=\"headerlink\" title=\"DOM 更新时机\"></a>DOM 更新时机</h2><p>DOM 更新后，立即执行回调函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; nextTick &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">increment</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    count.<span class=\"property\">value</span>++;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">nextTick</span>();</span><br><span class=\"line\">    <span class=\"title function_\">callback</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; nextTick &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">increment</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    count.<span class=\"property\">value</span>++;</span><br><span class=\"line\">    <span class=\"title function_\">nextTick</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">callback</span>());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"reactive\"><a href=\"#reactive\" class=\"headerlink\" title=\"reactive()\"></a>reactive()</h2><p>reactive() 使对象本身具有响应性，当 ref 的值是一个对象时，会在内层调用 reactive</p>\n<h3 id=\"原理-1\"><a href=\"#原理-1\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>reactive() 返回原始对象的 proxy，允许 Vue 拦截和定义基本操作的行为（如属性查找、赋值、删除等）</p>\n<p>reactive() 的返回值和原始对象不相等</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> raw = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"title function_\">reactive</span>(raw);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(raw === proxy); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"reactive-的局限性\"><a href=\"#reactive-的局限性\" class=\"headerlink\" title=\"reactive() 的局限性\"></a>reactive() 的局限性</h3><p>（1）有限的值类型：只能用于对象类型（对象、数组、Map、Set），不能用于原始类型；</p>\n<p>（2）不能替换整个对象：替换整个对象会导致响应式连接丢失；</p>\n<p>（3）对解构操作不友好：解构后的变量会丢失响应式连接。</p>\n<h2 id=\"ref-解包\"><a href=\"#ref-解包\" class=\"headerlink\" title=\"ref 解包\"></a>ref 解包</h2><h3 id=\"ref-作为-reactive-对象属性\"><a href=\"#ref-作为-reactive-对象属性\" class=\"headerlink\" title=\"ref 作为 reactive 对象属性\"></a>ref 作为 reactive 对象属性</h3><p>ref 作为响应式对象的属性时，就像一个普通的属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> count = <span class=\"title function_\">ref</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> state = <span class=\"title function_\">reactive</span>(&#123; count &#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(state.<span class=\"property\">count</span>); <span class=\"comment\">// 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">state.<span class=\"property\">count</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(state.<span class=\"property\">count</span>); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在模板中解包\"><a href=\"#在模板中解包\" class=\"headerlink\" title=\"在模板中解包\"></a>在模板中解包</h3><p>在模板渲染上下文中，只有顶级的 ref 才会被解包</p>\n<p>第二个不符合预期是因为，obj.id 未被解包，仍是一个 ref 对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> count = <span class=\"title function_\">ref</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"title function_\">ref</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 符合预期 —— 2 --&gt;</span></span><br><span class=\"line\">&#123;&#123; count + 1 &#125;&#125;</span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 不符合预期 —— [object Object]1 --&gt;</span></span><br><span class=\"line\">&#123;&#123; obj.id + 1 &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>为了解决该问题，需要将 id 结构为顶级属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; id &#125; = obj;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 符合预期 —— 2 --&gt;</span></span><br><span class=\"line\">&#123;&#123; id + 1 &#125;&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"vue3 计算属性","date":"2023-11-07T10:46:36.000Z","_content":"\n## 基础\n\ncomputed() 方法接受一个 getter 函数，返回一个计算属性 ref\n\n因为 ref 会在模板中自动解包，所以在表达式中引用无需 .value\n\n``` html\n<script setup>\nimport { reactive, computed } from 'vue';\n\nconst author = reactive({\n    name: \"Zoella\",\n    books: ['vue2', 'vue3', 'vue4']\n});\n\nconst hasBookPublished = computed(() => {\n    return author.books.length > 0 ? 'yes' : 'no';\n});\n</script>\n\n<template>\n  <div>\n    <span>{{ author.name }}</span> has published books: \n    <span>{{ hasBookPublished }}</span>\n  </div>\n</template>\n```\n\n## 计算属性缓存 VS 方法\n\n``` html\n<p>{{ calculateBooksMessage() }}</p>\n```\n\n``` js\nfunction calculateBooksMessage() {\n  return author.books.length > 0 ? 'yes' : 'no';\n}\n```\n\n计算属性比方法节省性能。\n\n将与上述相同的函数定义为方法，结果和计算属性相同，然而 **计算属性值会基于其响应式依赖被缓存**，只要```author.books```不变，就不会重复执行 getter 函数。但是方法总会在重渲染发生时再次执行函数。\n\n## 可写计算属性\n\n计算属性默认为只读。特殊场景下会用到“可写”的计算属性。\n\n``` html\n<script>\nimport { ref, computed } from 'vue';\n\nconst firstName = ref('John');\nconst lastName = ref('Doe');\n\nconst fullName = computed({\n  // getter\n  get() {\n    return firstName.value + ' ' + lastName.value;\n  },\n  // setter\n  set(newValue) {\n    [firstName.value, lastName.value] = newValue.split('');\n  }\n})\n</script>\n```\n\n当运行 ```fullName.value = 'Zoella Wang'``` 时，setter会被调用，firstName 和 lastName 会随之更新。\n","source":"_posts/4-vue3计算属性.md","raw":"---\ntitle: vue3 计算属性\ndate: 2023-11-07 18:46:36\ntags:\n    - vue3\n    - vue\ncategories:\n    - vue3\n      - 文档\n---\n\n## 基础\n\ncomputed() 方法接受一个 getter 函数，返回一个计算属性 ref\n\n因为 ref 会在模板中自动解包，所以在表达式中引用无需 .value\n\n``` html\n<script setup>\nimport { reactive, computed } from 'vue';\n\nconst author = reactive({\n    name: \"Zoella\",\n    books: ['vue2', 'vue3', 'vue4']\n});\n\nconst hasBookPublished = computed(() => {\n    return author.books.length > 0 ? 'yes' : 'no';\n});\n</script>\n\n<template>\n  <div>\n    <span>{{ author.name }}</span> has published books: \n    <span>{{ hasBookPublished }}</span>\n  </div>\n</template>\n```\n\n## 计算属性缓存 VS 方法\n\n``` html\n<p>{{ calculateBooksMessage() }}</p>\n```\n\n``` js\nfunction calculateBooksMessage() {\n  return author.books.length > 0 ? 'yes' : 'no';\n}\n```\n\n计算属性比方法节省性能。\n\n将与上述相同的函数定义为方法，结果和计算属性相同，然而 **计算属性值会基于其响应式依赖被缓存**，只要```author.books```不变，就不会重复执行 getter 函数。但是方法总会在重渲染发生时再次执行函数。\n\n## 可写计算属性\n\n计算属性默认为只读。特殊场景下会用到“可写”的计算属性。\n\n``` html\n<script>\nimport { ref, computed } from 'vue';\n\nconst firstName = ref('John');\nconst lastName = ref('Doe');\n\nconst fullName = computed({\n  // getter\n  get() {\n    return firstName.value + ' ' + lastName.value;\n  },\n  // setter\n  set(newValue) {\n    [firstName.value, lastName.value] = newValue.split('');\n  }\n})\n</script>\n```\n\n当运行 ```fullName.value = 'Zoella Wang'``` 时，setter会被调用，firstName 和 lastName 会随之更新。\n","slug":"4-vue3计算属性","published":1,"updated":"2023-12-26T03:21:46.284Z","_id":"cloy7augf0001blw601xvetqn","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><p>computed() 方法接受一个 getter 函数，返回一个计算属性 ref</p>\n<p>因为 ref 会在模板中自动解包，所以在表达式中引用无需 .value</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123; reactive, computed &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> author = <span class=\"title function_\">reactive</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;Zoella&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">books</span>: [<span class=\"string\">&#x27;vue2&#x27;</span>, <span class=\"string\">&#x27;vue3&#x27;</span>, <span class=\"string\">&#x27;vue4&#x27;</span>]</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> hasBookPublished = <span class=\"title function_\">computed</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">return</span> author.<span class=\"property\">books</span>.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span> ? <span class=\"string\">&#x27;yes&#x27;</span> : <span class=\"string\">&#x27;no&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123; author.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> has published books: </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123; hasBookPublished &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"计算属性缓存-VS-方法\"><a href=\"#计算属性缓存-VS-方法\" class=\"headerlink\" title=\"计算属性缓存 VS 方法\"></a>计算属性缓存 VS 方法</h2><div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; calculateBooksMessage() &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">calculateBooksMessage</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> author.<span class=\"property\">books</span>.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span> ? <span class=\"string\">&#x27;yes&#x27;</span> : <span class=\"string\">&#x27;no&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>计算属性比方法节省性能。</p>\n<p>将与上述相同的函数定义为方法，结果和计算属性相同，然而 <strong>计算属性值会基于其响应式依赖被缓存</strong>，只要<code>author.books</code>不变，就不会重复执行 getter 函数。但是方法总会在重渲染发生时再次执行函数。</p>\n<h2 id=\"可写计算属性\"><a href=\"#可写计算属性\" class=\"headerlink\" title=\"可写计算属性\"></a>可写计算属性</h2><p>计算属性默认为只读。特殊场景下会用到“可写”的计算属性。</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123; ref, computed &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> firstName = <span class=\"title function_\">ref</span>(<span class=\"string\">&#x27;John&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> lastName = <span class=\"title function_\">ref</span>(<span class=\"string\">&#x27;Doe&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> fullName = <span class=\"title function_\">computed</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// getter</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">return</span> firstName.<span class=\"property\">value</span> + <span class=\"string\">&#x27; &#x27;</span> + lastName.<span class=\"property\">value</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// setter</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">set</span>(<span class=\"params\">newValue</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    [firstName.<span class=\"property\">value</span>, lastName.<span class=\"property\">value</span>] = newValue.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>当运行 <code>fullName.value = &#39;Zoella Wang&#39;</code> 时，setter会被调用，firstName 和 lastName 会随之更新。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><p>computed() 方法接受一个 getter 函数，返回一个计算属性 ref</p>\n<p>因为 ref 会在模板中自动解包，所以在表达式中引用无需 .value</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123; reactive, computed &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> author = <span class=\"title function_\">reactive</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;Zoella&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">books</span>: [<span class=\"string\">&#x27;vue2&#x27;</span>, <span class=\"string\">&#x27;vue3&#x27;</span>, <span class=\"string\">&#x27;vue4&#x27;</span>]</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> hasBookPublished = <span class=\"title function_\">computed</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">return</span> author.<span class=\"property\">books</span>.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span> ? <span class=\"string\">&#x27;yes&#x27;</span> : <span class=\"string\">&#x27;no&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123; author.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> has published books: </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123; hasBookPublished &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"计算属性缓存-VS-方法\"><a href=\"#计算属性缓存-VS-方法\" class=\"headerlink\" title=\"计算属性缓存 VS 方法\"></a>计算属性缓存 VS 方法</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; calculateBooksMessage() &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">calculateBooksMessage</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> author.<span class=\"property\">books</span>.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span> ? <span class=\"string\">&#x27;yes&#x27;</span> : <span class=\"string\">&#x27;no&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>计算属性比方法节省性能。</p>\n<p>将与上述相同的函数定义为方法，结果和计算属性相同，然而 <strong>计算属性值会基于其响应式依赖被缓存</strong>，只要<code>author.books</code>不变，就不会重复执行 getter 函数。但是方法总会在重渲染发生时再次执行函数。</p>\n<h2 id=\"可写计算属性\"><a href=\"#可写计算属性\" class=\"headerlink\" title=\"可写计算属性\"></a>可写计算属性</h2><p>计算属性默认为只读。特殊场景下会用到“可写”的计算属性。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123; ref, computed &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> firstName = <span class=\"title function_\">ref</span>(<span class=\"string\">&#x27;John&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> lastName = <span class=\"title function_\">ref</span>(<span class=\"string\">&#x27;Doe&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> fullName = <span class=\"title function_\">computed</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// getter</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">return</span> firstName.<span class=\"property\">value</span> + <span class=\"string\">&#x27; &#x27;</span> + lastName.<span class=\"property\">value</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// setter</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">set</span>(<span class=\"params\">newValue</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    [firstName.<span class=\"property\">value</span>, lastName.<span class=\"property\">value</span>] = newValue.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>当运行 <code>fullName.value = &#39;Zoella Wang&#39;</code> 时，setter会被调用，firstName 和 lastName 会随之更新。</p>\n"},{"title":"为什么 vue 组件添加 scoped 后，某些组件样式不生效","date":"2023-11-14T09:46:52.000Z","_content":"\n## 简述\n\n在父组件中修改子组件的某些样式，发现不生效，删去``<style scoped></style>``中的 scoped 后生效。\n\n## 原因\n\nscoped 实现样式隔离的原理为：\n\n编译时，父组件的所有标签、子组件的根标签、以及所有的样式 都会加上特殊的标识；\n\n因为子组件内部的标签都没有此种标识，所以样式就不会生效。\n\n## 实例\n\n### 不添加 scoped\n\n``` html\n<!-- 父组件 -->\n<template>\n  <div class=\"parent\">\n    <p>Here is parent component</p>\n    <TestScoped />  \n  </div>\n</template>\n<style>\n.parent {\n  color: deepskyblue;\n}\n</style>\n```\n\n``` html\n<!-- 子组件 -->\n<template>\n  <div class=\"son\">\n    <p>Here is son component</p>\n  </div>\n</template>\n```\n\n编译后：\n\n``` html\n<div class=\"parent\">\n    <p>Here is parent component</p>\n    <div class=\"son\">\n        <p>Here is son component</p>\n    </div>\n</div>\n```\n\n``` css\np {\n  color: deepskyblue;\n}\n```\n\n### 添加 scoped\n\n编译后：\n\n``` html\n<div data-v-7ba5bd90 class=\"parent\">\n    <p data-v-7ba5bd90>Here is parent component</p>\n    <div data-v-7ba5bd90 class=\"son\">\n        <!-- 没有标识，所以不生效 -->\n        <p>Here is son component</p>\n    </div>\n</div>\n```\n\n``` css\np[data-v-7ba5bd90] {\n    color: deepskyblue;\n}\n```\n\n## 解决方法\n\n### 深度作用选择器\n\n使用 /deep/ 或者 ::v-deep\n\n``` css\n/deep/ p {\n  color: deepskyblue;\n}\n/* 或者 */\n::v-deep p {\n  color: deepskyblue;\n}\n```\n\n编译后：\n\nhtml 结果不变，样式代码变化\n\n``` css\n[data-v-7ba5bd90] p {\n  color: deepskyblue;\n}\n```\n\n### 使用无 scoped 的 style\n\n``` html\n<style scoped>\np {\n  color: deepskyblue;\n}\n</style>\n\n<style>\n/* 生效样式代码 */\n</style>\n```\n","source":"_posts/5-为什么vue组件添加scoped后某些组件样式不生效.md","raw":"---\ntitle: 为什么 vue 组件添加 scoped 后，某些组件样式不生效\ndate: 2023-11-14 17:46:52\ntags:\n    - vue\n    - 实践问题\ncategories:\n    - vue\n      - 样式\n---\n\n## 简述\n\n在父组件中修改子组件的某些样式，发现不生效，删去``<style scoped></style>``中的 scoped 后生效。\n\n## 原因\n\nscoped 实现样式隔离的原理为：\n\n编译时，父组件的所有标签、子组件的根标签、以及所有的样式 都会加上特殊的标识；\n\n因为子组件内部的标签都没有此种标识，所以样式就不会生效。\n\n## 实例\n\n### 不添加 scoped\n\n``` html\n<!-- 父组件 -->\n<template>\n  <div class=\"parent\">\n    <p>Here is parent component</p>\n    <TestScoped />  \n  </div>\n</template>\n<style>\n.parent {\n  color: deepskyblue;\n}\n</style>\n```\n\n``` html\n<!-- 子组件 -->\n<template>\n  <div class=\"son\">\n    <p>Here is son component</p>\n  </div>\n</template>\n```\n\n编译后：\n\n``` html\n<div class=\"parent\">\n    <p>Here is parent component</p>\n    <div class=\"son\">\n        <p>Here is son component</p>\n    </div>\n</div>\n```\n\n``` css\np {\n  color: deepskyblue;\n}\n```\n\n### 添加 scoped\n\n编译后：\n\n``` html\n<div data-v-7ba5bd90 class=\"parent\">\n    <p data-v-7ba5bd90>Here is parent component</p>\n    <div data-v-7ba5bd90 class=\"son\">\n        <!-- 没有标识，所以不生效 -->\n        <p>Here is son component</p>\n    </div>\n</div>\n```\n\n``` css\np[data-v-7ba5bd90] {\n    color: deepskyblue;\n}\n```\n\n## 解决方法\n\n### 深度作用选择器\n\n使用 /deep/ 或者 ::v-deep\n\n``` css\n/deep/ p {\n  color: deepskyblue;\n}\n/* 或者 */\n::v-deep p {\n  color: deepskyblue;\n}\n```\n\n编译后：\n\nhtml 结果不变，样式代码变化\n\n``` css\n[data-v-7ba5bd90] p {\n  color: deepskyblue;\n}\n```\n\n### 使用无 scoped 的 style\n\n``` html\n<style scoped>\np {\n  color: deepskyblue;\n}\n</style>\n\n<style>\n/* 生效样式代码 */\n</style>\n```\n","slug":"5-为什么vue组件添加scoped后某些组件样式不生效","published":1,"updated":"2024-10-14T08:48:16.350Z","_id":"cloy7augi000dblw60i4q3j4o","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h2><p>在父组件中修改子组件的某些样式，发现不生效，删去<code>&lt;style scoped&gt;&lt;/style&gt;</code>中的 scoped 后生效。</p>\n<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p>scoped 实现样式隔离的原理为：</p>\n<p>编译时，父组件的所有标签、子组件的根标签、以及所有的样式 都会加上特殊的标识；</p>\n<p>因为子组件内部的标签都没有此种标识，所以样式就不会生效。</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><h3 id=\"不添加-scoped\"><a href=\"#不添加-scoped\" class=\"headerlink\" title=\"不添加 scoped\"></a>不添加 scoped</h3><div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 父组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;parent&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Here is parent component<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TestScoped</span> /&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-class\">.parent</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">color</span>: deepskyblue;</span></span><br><span class=\"line\"><span class=\"language-css\">&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 子组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;son&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Here is son component<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>编译后：</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;parent&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Here is parent component<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;son&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Here is son component<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<div class=\"highlight-container\" data-rel=\"Css\"><figure class=\"iseeu highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: deepskyblue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"添加-scoped\"><a href=\"#添加-scoped\" class=\"headerlink\" title=\"添加 scoped\"></a>添加 scoped</h3><p>编译后：</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-v-7ba5bd90</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;parent&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">data-v-7ba5bd90</span>&gt;</span>Here is parent component<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-v-7ba5bd90</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;son&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 没有标识，所以不生效 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Here is son component<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<div class=\"highlight-container\" data-rel=\"Css\"><figure class=\"iseeu highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-attr\">[data-v-7ba5bd90]</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: deepskyblue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><h3 id=\"深度作用选择器\"><a href=\"#深度作用选择器\" class=\"headerlink\" title=\"深度作用选择器\"></a>深度作用选择器</h3><p>使用 &#x2F;deep&#x2F; 或者 ::v-deep</p>\n<div class=\"highlight-container\" data-rel=\"Css\"><figure class=\"iseeu highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/deep/ <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: deepskyblue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 或者 */</span></span><br><span class=\"line\">::v-deep p &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: deepskyblue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>编译后：</p>\n<p>html 结果不变，样式代码变化</p>\n<div class=\"highlight-container\" data-rel=\"Css\"><figure class=\"iseeu highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-attr\">[data-v-7ba5bd90]</span> <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: deepskyblue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"使用无-scoped-的-style\"><a href=\"#使用无-scoped-的-style\" class=\"headerlink\" title=\"使用无 scoped 的 style\"></a>使用无 scoped 的 style</h3><div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-tag\">p</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">color</span>: deepskyblue;</span></span><br><span class=\"line\"><span class=\"language-css\">&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"comment\">/* 生效样式代码 */</span></span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h2><p>在父组件中修改子组件的某些样式，发现不生效，删去<code>&lt;style scoped&gt;&lt;/style&gt;</code>中的 scoped 后生效。</p>\n<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p>scoped 实现样式隔离的原理为：</p>\n<p>编译时，父组件的所有标签、子组件的根标签、以及所有的样式 都会加上特殊的标识；</p>\n<p>因为子组件内部的标签都没有此种标识，所以样式就不会生效。</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><h3 id=\"不添加-scoped\"><a href=\"#不添加-scoped\" class=\"headerlink\" title=\"不添加 scoped\"></a>不添加 scoped</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 父组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;parent&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Here is parent component<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TestScoped</span> /&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-class\">.parent</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">color</span>: deepskyblue;</span></span><br><span class=\"line\"><span class=\"language-css\">&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 子组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;son&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Here is son component<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>编译后：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;parent&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Here is parent component<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;son&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Here is son component<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: deepskyblue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加-scoped\"><a href=\"#添加-scoped\" class=\"headerlink\" title=\"添加 scoped\"></a>添加 scoped</h3><p>编译后：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-v-7ba5bd90</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;parent&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">data-v-7ba5bd90</span>&gt;</span>Here is parent component<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-v-7ba5bd90</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;son&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 没有标识，所以不生效 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Here is son component<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-attr\">[data-v-7ba5bd90]</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: deepskyblue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><h3 id=\"深度作用选择器\"><a href=\"#深度作用选择器\" class=\"headerlink\" title=\"深度作用选择器\"></a>深度作用选择器</h3><p>使用 &#x2F;deep&#x2F; 或者 ::v-deep</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/deep/ <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: deepskyblue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 或者 */</span></span><br><span class=\"line\">::v-deep p &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: deepskyblue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译后：</p>\n<p>html 结果不变，样式代码变化</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-attr\">[data-v-7ba5bd90]</span> <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: deepskyblue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用无-scoped-的-style\"><a href=\"#使用无-scoped-的-style\" class=\"headerlink\" title=\"使用无 scoped 的 style\"></a>使用无 scoped 的 style</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-tag\">p</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">color</span>: deepskyblue;</span></span><br><span class=\"line\"><span class=\"language-css\">&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"comment\">/* 生效样式代码 */</span></span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"vue class 与 style 绑定","date":"2023-11-28T11:03:13.000Z","_content":"\n## 绑定一个返回对象的计算属性\n\n``` js\nconst isActive = ref(true);\nconst error = ref(null);\n\nconst classObject = computed(() => ({\n    active: isActive.value && !error.value,\n    'text-danger': error.value && error.value.type === 'fatal'\n}));\n```\n\n``` html\n<div :class=\"classObject\"></div>\n```\n\n## 子组件继承父组件传入的class\n\n### 有一个根元素的组件\n\n子组件的根元素，在渲染时会添加父组件的 class。\n\n### 有多个根元素的组件\n\n子组件中 ```:class='$attrs.class'``` 的根元素，在渲染时会添加父组件的 class。\n\n``` html\n<!-- 子组件 MyComponent.vue -->\n<p :class=\"$attrs.class\">one root element</p>\n<span>another root element</span>\n```\n\n``` html\n<!-- 父组件 -->\n<MyComponent class=\"fatherClass\"/>\n```\n\n渲染后结果：\n\n``` html\n<p class=\"fatherClass\">one root element</p>\n<span>another root element</span>\n```\n\n## 內联样式\n\n### 绑定对象\n\n``` js\nconst styleObject = reactive({\n    color: \"red\",\n    fontSize: \"13px\"\n});\n```\n\n``` html\n<div :style=\"styleObject\"></div>\n```\n\n### 绑定对象数组\n\n``` html\n<div :style=\"[baseStyle, overriddingStyle]\"></div>\n```\n\n``` js\nconst baseStyle = reactive({\n    color: \"red\",\n    ...\n});\nconst overriddingStyle = reactive({\n    color: \"black\",\n    ...\n});\n```\n","source":"_posts/6-vue class与style绑定.md","raw":"---\ntitle: vue class 与 style 绑定\ndate: 2023-11-28 19:03:13\ntags:\n    - vue3\n    - vue\ncategories:\n    - vue\n      - 样式\n    - vue3\n      - 文档\n---\n\n## 绑定一个返回对象的计算属性\n\n``` js\nconst isActive = ref(true);\nconst error = ref(null);\n\nconst classObject = computed(() => ({\n    active: isActive.value && !error.value,\n    'text-danger': error.value && error.value.type === 'fatal'\n}));\n```\n\n``` html\n<div :class=\"classObject\"></div>\n```\n\n## 子组件继承父组件传入的class\n\n### 有一个根元素的组件\n\n子组件的根元素，在渲染时会添加父组件的 class。\n\n### 有多个根元素的组件\n\n子组件中 ```:class='$attrs.class'``` 的根元素，在渲染时会添加父组件的 class。\n\n``` html\n<!-- 子组件 MyComponent.vue -->\n<p :class=\"$attrs.class\">one root element</p>\n<span>another root element</span>\n```\n\n``` html\n<!-- 父组件 -->\n<MyComponent class=\"fatherClass\"/>\n```\n\n渲染后结果：\n\n``` html\n<p class=\"fatherClass\">one root element</p>\n<span>another root element</span>\n```\n\n## 內联样式\n\n### 绑定对象\n\n``` js\nconst styleObject = reactive({\n    color: \"red\",\n    fontSize: \"13px\"\n});\n```\n\n``` html\n<div :style=\"styleObject\"></div>\n```\n\n### 绑定对象数组\n\n``` html\n<div :style=\"[baseStyle, overriddingStyle]\"></div>\n```\n\n``` js\nconst baseStyle = reactive({\n    color: \"red\",\n    ...\n});\nconst overriddingStyle = reactive({\n    color: \"black\",\n    ...\n});\n```\n","slug":"6-vue class与style绑定","published":1,"updated":"2023-12-26T03:21:11.823Z","_id":"clpj6vfnn00007uw6eiabhjv2","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"绑定一个返回对象的计算属性\"><a href=\"#绑定一个返回对象的计算属性\" class=\"headerlink\" title=\"绑定一个返回对象的计算属性\"></a>绑定一个返回对象的计算属性</h2><div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isActive = <span class=\"title function_\">ref</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> error = <span class=\"title function_\">ref</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> classObject = <span class=\"title function_\">computed</span>(<span class=\"function\">() =&gt;</span> (&#123;</span><br><span class=\"line\">    <span class=\"attr\">active</span>: isActive.<span class=\"property\">value</span> &amp;&amp; !error.<span class=\"property\">value</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;text-danger&#x27;</span>: error.<span class=\"property\">value</span> &amp;&amp; error.<span class=\"property\">value</span>.<span class=\"property\">type</span> === <span class=\"string\">&#x27;fatal&#x27;</span></span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure></div>\n\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;classObject&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"子组件继承父组件传入的class\"><a href=\"#子组件继承父组件传入的class\" class=\"headerlink\" title=\"子组件继承父组件传入的class\"></a>子组件继承父组件传入的class</h2><h3 id=\"有一个根元素的组件\"><a href=\"#有一个根元素的组件\" class=\"headerlink\" title=\"有一个根元素的组件\"></a>有一个根元素的组件</h3><p>子组件的根元素，在渲染时会添加父组件的 class。</p>\n<h3 id=\"有多个根元素的组件\"><a href=\"#有多个根元素的组件\" class=\"headerlink\" title=\"有多个根元素的组件\"></a>有多个根元素的组件</h3><p>子组件中 <code>:class=&#39;$attrs.class&#39;</code> 的根元素，在渲染时会添加父组件的 class。</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 子组件 MyComponent.vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;$attrs.class&quot;</span>&gt;</span>one root element<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>another root element<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 父组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fatherClass&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>渲染后结果：</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fatherClass&quot;</span>&gt;</span>one root element<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>another root element<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"內联样式\"><a href=\"#內联样式\" class=\"headerlink\" title=\"內联样式\"></a>內联样式</h2><h3 id=\"绑定对象\"><a href=\"#绑定对象\" class=\"headerlink\" title=\"绑定对象\"></a>绑定对象</h3><div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> styleObject = <span class=\"title function_\">reactive</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">color</span>: <span class=\"string\">&quot;red&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">fontSize</span>: <span class=\"string\">&quot;13px&quot;</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></div>\n\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;styleObject&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"绑定对象数组\"><a href=\"#绑定对象数组\" class=\"headerlink\" title=\"绑定对象数组\"></a>绑定对象数组</h3><div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;[baseStyle, overriddingStyle]&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> baseStyle = <span class=\"title function_\">reactive</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">color</span>: <span class=\"string\">&quot;red&quot;</span>,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> overriddingStyle = <span class=\"title function_\">reactive</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">color</span>: <span class=\"string\">&quot;black&quot;</span>,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></div>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"绑定一个返回对象的计算属性\"><a href=\"#绑定一个返回对象的计算属性\" class=\"headerlink\" title=\"绑定一个返回对象的计算属性\"></a>绑定一个返回对象的计算属性</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isActive = <span class=\"title function_\">ref</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> error = <span class=\"title function_\">ref</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> classObject = <span class=\"title function_\">computed</span>(<span class=\"function\">() =&gt;</span> (&#123;</span><br><span class=\"line\">    <span class=\"attr\">active</span>: isActive.<span class=\"property\">value</span> &amp;&amp; !error.<span class=\"property\">value</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;text-danger&#x27;</span>: error.<span class=\"property\">value</span> &amp;&amp; error.<span class=\"property\">value</span>.<span class=\"property\">type</span> === <span class=\"string\">&#x27;fatal&#x27;</span></span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;classObject&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"子组件继承父组件传入的class\"><a href=\"#子组件继承父组件传入的class\" class=\"headerlink\" title=\"子组件继承父组件传入的class\"></a>子组件继承父组件传入的class</h2><h3 id=\"有一个根元素的组件\"><a href=\"#有一个根元素的组件\" class=\"headerlink\" title=\"有一个根元素的组件\"></a>有一个根元素的组件</h3><p>子组件的根元素，在渲染时会添加父组件的 class。</p>\n<h3 id=\"有多个根元素的组件\"><a href=\"#有多个根元素的组件\" class=\"headerlink\" title=\"有多个根元素的组件\"></a>有多个根元素的组件</h3><p>子组件中 <code>:class=&#39;$attrs.class&#39;</code> 的根元素，在渲染时会添加父组件的 class。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 子组件 MyComponent.vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;$attrs.class&quot;</span>&gt;</span>one root element<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>another root element<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 父组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fatherClass&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>渲染后结果：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fatherClass&quot;</span>&gt;</span>one root element<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>another root element<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"內联样式\"><a href=\"#內联样式\" class=\"headerlink\" title=\"內联样式\"></a>內联样式</h2><h3 id=\"绑定对象\"><a href=\"#绑定对象\" class=\"headerlink\" title=\"绑定对象\"></a>绑定对象</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> styleObject = <span class=\"title function_\">reactive</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">color</span>: <span class=\"string\">&quot;red&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">fontSize</span>: <span class=\"string\">&quot;13px&quot;</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;styleObject&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"绑定对象数组\"><a href=\"#绑定对象数组\" class=\"headerlink\" title=\"绑定对象数组\"></a>绑定对象数组</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;[baseStyle, overriddingStyle]&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> baseStyle = <span class=\"title function_\">reactive</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">color</span>: <span class=\"string\">&quot;red&quot;</span>,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> overriddingStyle = <span class=\"title function_\">reactive</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">color</span>: <span class=\"string\">&quot;black&quot;</span>,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n"},{"title":"v-for","date":"2023-11-29T02:41:57.000Z","_content":"\n## 基础\n\n``` html\n<li v-for=\"(item, index) in items\"></li>\n```\n\n可以使用 of 代替 in：\n\n``` html\n<li v-for=\"(item, index) of items\"></li>\n```\n\n支持解构语法：\n\n``` html\n<li v-for=\"{message} in items\">\n    {{ message }}\n</li>\n\n<li v-for=\"({message}, index) in items\">\n    {{ message }}\n</li>\n```\n\n## 遍历对象属性\n\n使用 v-for 遍历对象属性，遍历的顺序和 Object.keys() 返回值的顺序一致\n\n三个参数依次为 索引、属性名、属性值：\n\n``` js\nconst myObject = reactive({\n  title: 'How to do lists in Vue',\n  author: 'Jane Doe',\n  publishedAt: '2016-04-10'\n});\n```\n\n``` html\n<li v-for=\"(index, key, value) in myObject\">\n{{ index }}. {{ key }}: {{ value }}\n</li>\n```\n\n结果为：\n\n``` txt\n0. title: How to do lists in Vue\n1. author: Jane Doe\n2. publishedAt: 2016-04-10\n```\n\n## v-for 与 v-if\n\nv-if 比 v-for 优先级高\n\n错误用法：\n\n``` html\n<!-- 此时 v-if 的 todo 还没有定义 -->\n<li v-for=\"todo in todos\" v-if=\"!todo.isComplete\">\n{{ todo.name }}\n</li>\n```\n\n正确用法：\n\n``` html\n<template v-for=\"todo in todos\">\n   <li v-if=\"!todo.isComplete\">\n   {{ todo.name }}\n   </li>\n</template>\n```\n\n## 通过 key 管理状态\n\nVue 默认按照 “就地更新” 的策略更新通过 v-for 渲染的列表。当数据项的顺序改变时，Vue 不会随之移动 DOM 元素的顺序，而是就地更新每个元素，确保它们在原本指定的索引位置上渲染。\n\n默认模式是高效的，但只适用于 **列表渲染输出的结果不依赖子组件状态或者临时 DOM 状态 (例如表单输入值) 的情况**。\n\n推荐在任何时候为 v-for 提供一个 key attribute，除非所迭代的 DOM 内容非常简单。\n","source":"_posts/7-v-for.md","raw":"---\ntitle: v-for\ndate: 2023-11-29 10:41:57\ntags: \n    - vue\ncategories:\n    - vue\n      - 文档\n---\n\n## 基础\n\n``` html\n<li v-for=\"(item, index) in items\"></li>\n```\n\n可以使用 of 代替 in：\n\n``` html\n<li v-for=\"(item, index) of items\"></li>\n```\n\n支持解构语法：\n\n``` html\n<li v-for=\"{message} in items\">\n    {{ message }}\n</li>\n\n<li v-for=\"({message}, index) in items\">\n    {{ message }}\n</li>\n```\n\n## 遍历对象属性\n\n使用 v-for 遍历对象属性，遍历的顺序和 Object.keys() 返回值的顺序一致\n\n三个参数依次为 索引、属性名、属性值：\n\n``` js\nconst myObject = reactive({\n  title: 'How to do lists in Vue',\n  author: 'Jane Doe',\n  publishedAt: '2016-04-10'\n});\n```\n\n``` html\n<li v-for=\"(index, key, value) in myObject\">\n{{ index }}. {{ key }}: {{ value }}\n</li>\n```\n\n结果为：\n\n``` txt\n0. title: How to do lists in Vue\n1. author: Jane Doe\n2. publishedAt: 2016-04-10\n```\n\n## v-for 与 v-if\n\nv-if 比 v-for 优先级高\n\n错误用法：\n\n``` html\n<!-- 此时 v-if 的 todo 还没有定义 -->\n<li v-for=\"todo in todos\" v-if=\"!todo.isComplete\">\n{{ todo.name }}\n</li>\n```\n\n正确用法：\n\n``` html\n<template v-for=\"todo in todos\">\n   <li v-if=\"!todo.isComplete\">\n   {{ todo.name }}\n   </li>\n</template>\n```\n\n## 通过 key 管理状态\n\nVue 默认按照 “就地更新” 的策略更新通过 v-for 渲染的列表。当数据项的顺序改变时，Vue 不会随之移动 DOM 元素的顺序，而是就地更新每个元素，确保它们在原本指定的索引位置上渲染。\n\n默认模式是高效的，但只适用于 **列表渲染输出的结果不依赖子组件状态或者临时 DOM 状态 (例如表单输入值) 的情况**。\n\n推荐在任何时候为 v-for 提供一个 key attribute，除非所迭代的 DOM 内容非常简单。\n","slug":"7-v-for","published":1,"updated":"2023-12-26T03:19:12.007Z","_id":"clpj6vfno00017uw61ro9869t","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item, index) in items&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>可以使用 of 代替 in：</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item, index) of items&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>支持解构语法：</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;&#123;message&#125; in items&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; message &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(&#123;message&#125;, index) in items&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; message &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"遍历对象属性\"><a href=\"#遍历对象属性\" class=\"headerlink\" title=\"遍历对象属性\"></a>遍历对象属性</h2><p>使用 v-for 遍历对象属性，遍历的顺序和 Object.keys() 返回值的顺序一致</p>\n<p>三个参数依次为 索引、属性名、属性值：</p>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myObject = <span class=\"title function_\">reactive</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">title</span>: <span class=\"string\">&#x27;How to do lists in Vue&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">author</span>: <span class=\"string\">&#x27;Jane Doe&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">publishedAt</span>: <span class=\"string\">&#x27;2016-04-10&#x27;</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></div>\n\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(index, key, value) in myObject&quot;</span>&gt;</span></span><br><span class=\"line\">&#123;&#123; index &#125;&#125;. &#123;&#123; key &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>结果为：</p>\n<div class=\"highlight-container\" data-rel=\"Txt\"><figure class=\"iseeu highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0. title: How to do lists in Vue</span><br><span class=\"line\">1. author: Jane Doe</span><br><span class=\"line\">2. publishedAt: 2016-04-10</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"v-for-与-v-if\"><a href=\"#v-for-与-v-if\" class=\"headerlink\" title=\"v-for 与 v-if\"></a>v-for 与 v-if</h2><p>v-if 比 v-for 优先级高</p>\n<p>错误用法：</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 此时 v-if 的 todo 还没有定义 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;todo in todos&quot;</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;!todo.isComplete&quot;</span>&gt;</span></span><br><span class=\"line\">&#123;&#123; todo.name &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>正确用法：</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;todo in todos&quot;</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;!todo.isComplete&quot;</span>&gt;</span></span><br><span class=\"line\">   &#123;&#123; todo.name &#125;&#125;</span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"通过-key-管理状态\"><a href=\"#通过-key-管理状态\" class=\"headerlink\" title=\"通过 key 管理状态\"></a>通过 key 管理状态</h2><p>Vue 默认按照 “就地更新” 的策略更新通过 v-for 渲染的列表。当数据项的顺序改变时，Vue 不会随之移动 DOM 元素的顺序，而是就地更新每个元素，确保它们在原本指定的索引位置上渲染。</p>\n<p>默认模式是高效的，但只适用于 <strong>列表渲染输出的结果不依赖子组件状态或者临时 DOM 状态 (例如表单输入值) 的情况</strong>。</p>\n<p>推荐在任何时候为 v-for 提供一个 key attribute，除非所迭代的 DOM 内容非常简单。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item, index) in items&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以使用 of 代替 in：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item, index) of items&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>支持解构语法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;&#123;message&#125; in items&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; message &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(&#123;message&#125;, index) in items&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; message &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"遍历对象属性\"><a href=\"#遍历对象属性\" class=\"headerlink\" title=\"遍历对象属性\"></a>遍历对象属性</h2><p>使用 v-for 遍历对象属性，遍历的顺序和 Object.keys() 返回值的顺序一致</p>\n<p>三个参数依次为 索引、属性名、属性值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myObject = <span class=\"title function_\">reactive</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">title</span>: <span class=\"string\">&#x27;How to do lists in Vue&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">author</span>: <span class=\"string\">&#x27;Jane Doe&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">publishedAt</span>: <span class=\"string\">&#x27;2016-04-10&#x27;</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(index, key, value) in myObject&quot;</span>&gt;</span></span><br><span class=\"line\">&#123;&#123; index &#125;&#125;. &#123;&#123; key &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>结果为：</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0. title: How to do lists in Vue</span><br><span class=\"line\">1. author: Jane Doe</span><br><span class=\"line\">2. publishedAt: 2016-04-10</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"v-for-与-v-if\"><a href=\"#v-for-与-v-if\" class=\"headerlink\" title=\"v-for 与 v-if\"></a>v-for 与 v-if</h2><p>v-if 比 v-for 优先级高</p>\n<p>错误用法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 此时 v-if 的 todo 还没有定义 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;todo in todos&quot;</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;!todo.isComplete&quot;</span>&gt;</span></span><br><span class=\"line\">&#123;&#123; todo.name &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>正确用法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;todo in todos&quot;</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;!todo.isComplete&quot;</span>&gt;</span></span><br><span class=\"line\">   &#123;&#123; todo.name &#125;&#125;</span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"通过-key-管理状态\"><a href=\"#通过-key-管理状态\" class=\"headerlink\" title=\"通过 key 管理状态\"></a>通过 key 管理状态</h2><p>Vue 默认按照 “就地更新” 的策略更新通过 v-for 渲染的列表。当数据项的顺序改变时，Vue 不会随之移动 DOM 元素的顺序，而是就地更新每个元素，确保它们在原本指定的索引位置上渲染。</p>\n<p>默认模式是高效的，但只适用于 <strong>列表渲染输出的结果不依赖子组件状态或者临时 DOM 状态 (例如表单输入值) 的情况</strong>。</p>\n<p>推荐在任何时候为 v-for 提供一个 key attribute，除非所迭代的 DOM 内容非常简单。</p>\n"},{"title":"js 事件","date":"2023-11-29T09:38:02.000Z","_content":"\n事件捕获和事件冒泡 是浏览器处理DOM元素事件的两种方式（顺序：先捕获，再冒泡）。\n\n``` html\n<!DOCTYPE html>\n<html>\n  <body>\n      <div>click me</div>\n  </body>\n</html>\n```\n\n## 事件捕获\n\n事件捕获从文档根节点开始，逐级向下传播到目标元素。\n\n点击 div，事件传播方向：document -> html -> body -> div\n\n## 事件冒泡\n\n事件冒泡指当目标元素触发了某事件时，事件会从该元素开始逐级向上传播，直到文档根节点。\n\n点击 div，事件传播方向：div -> body -> html -> document\n\n## 事件模型\n\n### DOM0 事件模型\n\nDOM0 只在冒泡阶段处理事件处理程序。\n\n``` html\n<div onclick=\"handleClick\">click</div>\n<script>\n  function handleClick() {\n    alert('clicked');\n  }\n</script>\n```\n\n### DOM2 事件模型\n\nDOM2 在捕获阶段和冒泡阶段都可以处理事件处理程序（更灵活可控）。\n\n使用：addEventListener() 和 removeEventListener()\n\n``` html\n<div id=\"myBtn\">click</div>\n<script>\n  function handleClick() {\n    alert('clicked');\n  }\n  const btn = document.getElementById('myBtn');\n  btn.addEventListener('click', handleClick);\n</script>\n```\n\n### IE 事件模型\n\n功能类似于 DOM0，使用方式上类似于 DOM2。\n\n使用 attachEvent() 和 detachEvent() 方法。\n\n``` html\n<div id=\"myBtn\">click</div>\n<script>\n  function handleClick() {\n    alert('clicked');\n  }\n  const btn = document.getElementById('myBtn');\n  btn.attachEvent('click', handleClick);\n</script>\n```\n\n## js 实现事件修饰符\n\n### 阻止默认行为 preventDefault\n\n比如阻止链接的跳转或表单的提交\n\n``` js\ndocument.getElementById('btn').addEventListener('click', (event) => {\n  event.preventDefault();\n});\n```\n\n### 阻止事件冒泡 stopPropagation()\n\n阻止事件传到父元素\n\n``` js\ndocument.getElementById('btn').addEventListener('click', (event) => {\n  event.stopPropagation();\n});\n```\n\n### 一次性事件处理\n\n``` js\nfunction handleClick(event) {\n  this.removeEventListener('click', handleClick); // 点击一次移除监听器\n}\ndocument.getElementById('btn').addEventListener('click', handleClick);\n```\n\n### 获取键盘按键\n\n``` js\ndocument.addEventListener('keydown', (event) => {\n  console.log(event.key);\n});\n```\n\n### 获取鼠标按键\n\n``` js\ndocument.addEventListener('mousedown', (event) => {\n  console.log(event.key);\n});\n```\n","source":"_posts/8-js事件.md","raw":"---\ntitle: js 事件\ndate: 2023-11-29 17:38:02\ntags:\n    - JavaScript\ncategories:\n    - JavaScript\n      - 事件\n---\n\n事件捕获和事件冒泡 是浏览器处理DOM元素事件的两种方式（顺序：先捕获，再冒泡）。\n\n``` html\n<!DOCTYPE html>\n<html>\n  <body>\n      <div>click me</div>\n  </body>\n</html>\n```\n\n## 事件捕获\n\n事件捕获从文档根节点开始，逐级向下传播到目标元素。\n\n点击 div，事件传播方向：document -> html -> body -> div\n\n## 事件冒泡\n\n事件冒泡指当目标元素触发了某事件时，事件会从该元素开始逐级向上传播，直到文档根节点。\n\n点击 div，事件传播方向：div -> body -> html -> document\n\n## 事件模型\n\n### DOM0 事件模型\n\nDOM0 只在冒泡阶段处理事件处理程序。\n\n``` html\n<div onclick=\"handleClick\">click</div>\n<script>\n  function handleClick() {\n    alert('clicked');\n  }\n</script>\n```\n\n### DOM2 事件模型\n\nDOM2 在捕获阶段和冒泡阶段都可以处理事件处理程序（更灵活可控）。\n\n使用：addEventListener() 和 removeEventListener()\n\n``` html\n<div id=\"myBtn\">click</div>\n<script>\n  function handleClick() {\n    alert('clicked');\n  }\n  const btn = document.getElementById('myBtn');\n  btn.addEventListener('click', handleClick);\n</script>\n```\n\n### IE 事件模型\n\n功能类似于 DOM0，使用方式上类似于 DOM2。\n\n使用 attachEvent() 和 detachEvent() 方法。\n\n``` html\n<div id=\"myBtn\">click</div>\n<script>\n  function handleClick() {\n    alert('clicked');\n  }\n  const btn = document.getElementById('myBtn');\n  btn.attachEvent('click', handleClick);\n</script>\n```\n\n## js 实现事件修饰符\n\n### 阻止默认行为 preventDefault\n\n比如阻止链接的跳转或表单的提交\n\n``` js\ndocument.getElementById('btn').addEventListener('click', (event) => {\n  event.preventDefault();\n});\n```\n\n### 阻止事件冒泡 stopPropagation()\n\n阻止事件传到父元素\n\n``` js\ndocument.getElementById('btn').addEventListener('click', (event) => {\n  event.stopPropagation();\n});\n```\n\n### 一次性事件处理\n\n``` js\nfunction handleClick(event) {\n  this.removeEventListener('click', handleClick); // 点击一次移除监听器\n}\ndocument.getElementById('btn').addEventListener('click', handleClick);\n```\n\n### 获取键盘按键\n\n``` js\ndocument.addEventListener('keydown', (event) => {\n  console.log(event.key);\n});\n```\n\n### 获取鼠标按键\n\n``` js\ndocument.addEventListener('mousedown', (event) => {\n  console.log(event.key);\n});\n```\n","slug":"8-js事件","published":1,"updated":"2023-12-26T03:21:06.250Z","_id":"clpl36b6u000059w6aufu8ufh","comments":1,"layout":"post","photos":[],"link":"","content":"<p>事件捕获和事件冒泡 是浏览器处理DOM元素事件的两种方式（顺序：先捕获，再冒泡）。</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>click me<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"事件捕获\"><a href=\"#事件捕获\" class=\"headerlink\" title=\"事件捕获\"></a>事件捕获</h2><p>事件捕获从文档根节点开始，逐级向下传播到目标元素。</p>\n<p>点击 div，事件传播方向：document -&gt; html -&gt; body -&gt; div</p>\n<h2 id=\"事件冒泡\"><a href=\"#事件冒泡\" class=\"headerlink\" title=\"事件冒泡\"></a>事件冒泡</h2><p>事件冒泡指当目标元素触发了某事件时，事件会从该元素开始逐级向上传播，直到文档根节点。</p>\n<p>点击 div，事件传播方向：div -&gt; body -&gt; html -&gt; document</p>\n<h2 id=\"事件模型\"><a href=\"#事件模型\" class=\"headerlink\" title=\"事件模型\"></a>事件模型</h2><h3 id=\"DOM0-事件模型\"><a href=\"#DOM0-事件模型\" class=\"headerlink\" title=\"DOM0 事件模型\"></a>DOM0 事件模型</h3><p>DOM0 只在冒泡阶段处理事件处理程序。</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;handleClick&quot;</span>&gt;</span>click<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">function</span> <span class=\"title function_\">handleClick</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;clicked&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"DOM2-事件模型\"><a href=\"#DOM2-事件模型\" class=\"headerlink\" title=\"DOM2 事件模型\"></a>DOM2 事件模型</h3><p>DOM2 在捕获阶段和冒泡阶段都可以处理事件处理程序（更灵活可控）。</p>\n<p>使用：addEventListener() 和 removeEventListener()</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myBtn&quot;</span>&gt;</span>click<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">function</span> <span class=\"title function_\">handleClick</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;clicked&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;myBtn&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  btn.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, handleClick);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"IE-事件模型\"><a href=\"#IE-事件模型\" class=\"headerlink\" title=\"IE 事件模型\"></a>IE 事件模型</h3><p>功能类似于 DOM0，使用方式上类似于 DOM2。</p>\n<p>使用 attachEvent() 和 detachEvent() 方法。</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myBtn&quot;</span>&gt;</span>click<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">function</span> <span class=\"title function_\">handleClick</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;clicked&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;myBtn&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  btn.<span class=\"title function_\">attachEvent</span>(<span class=\"string\">&#x27;click&#x27;</span>, handleClick);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"js-实现事件修饰符\"><a href=\"#js-实现事件修饰符\" class=\"headerlink\" title=\"js 实现事件修饰符\"></a>js 实现事件修饰符</h2><h3 id=\"阻止默认行为-preventDefault\"><a href=\"#阻止默认行为-preventDefault\" class=\"headerlink\" title=\"阻止默认行为 preventDefault\"></a>阻止默认行为 preventDefault</h3><p>比如阻止链接的跳转或表单的提交</p>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;btn&#x27;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  event.<span class=\"title function_\">preventDefault</span>();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"阻止事件冒泡-stopPropagation\"><a href=\"#阻止事件冒泡-stopPropagation\" class=\"headerlink\" title=\"阻止事件冒泡 stopPropagation()\"></a>阻止事件冒泡 stopPropagation()</h3><p>阻止事件传到父元素</p>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;btn&#x27;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  event.<span class=\"title function_\">stopPropagation</span>();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"一次性事件处理\"><a href=\"#一次性事件处理\" class=\"headerlink\" title=\"一次性事件处理\"></a>一次性事件处理</h3><div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handleClick</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">removeEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, handleClick); <span class=\"comment\">// 点击一次移除监听器</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;btn&#x27;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, handleClick);</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"获取键盘按键\"><a href=\"#获取键盘按键\" class=\"headerlink\" title=\"获取键盘按键\"></a>获取键盘按键</h3><div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;keydown&#x27;</span>, <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(event.<span class=\"property\">key</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"获取鼠标按键\"><a href=\"#获取鼠标按键\" class=\"headerlink\" title=\"获取鼠标按键\"></a>获取鼠标按键</h3><div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;mousedown&#x27;</span>, <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(event.<span class=\"property\">key</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></div>\n","site":{"data":{}},"excerpt":"","more":"<p>事件捕获和事件冒泡 是浏览器处理DOM元素事件的两种方式（顺序：先捕获，再冒泡）。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>click me<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"事件捕获\"><a href=\"#事件捕获\" class=\"headerlink\" title=\"事件捕获\"></a>事件捕获</h2><p>事件捕获从文档根节点开始，逐级向下传播到目标元素。</p>\n<p>点击 div，事件传播方向：document -&gt; html -&gt; body -&gt; div</p>\n<h2 id=\"事件冒泡\"><a href=\"#事件冒泡\" class=\"headerlink\" title=\"事件冒泡\"></a>事件冒泡</h2><p>事件冒泡指当目标元素触发了某事件时，事件会从该元素开始逐级向上传播，直到文档根节点。</p>\n<p>点击 div，事件传播方向：div -&gt; body -&gt; html -&gt; document</p>\n<h2 id=\"事件模型\"><a href=\"#事件模型\" class=\"headerlink\" title=\"事件模型\"></a>事件模型</h2><h3 id=\"DOM0-事件模型\"><a href=\"#DOM0-事件模型\" class=\"headerlink\" title=\"DOM0 事件模型\"></a>DOM0 事件模型</h3><p>DOM0 只在冒泡阶段处理事件处理程序。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;handleClick&quot;</span>&gt;</span>click<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">function</span> <span class=\"title function_\">handleClick</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;clicked&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"DOM2-事件模型\"><a href=\"#DOM2-事件模型\" class=\"headerlink\" title=\"DOM2 事件模型\"></a>DOM2 事件模型</h3><p>DOM2 在捕获阶段和冒泡阶段都可以处理事件处理程序（更灵活可控）。</p>\n<p>使用：addEventListener() 和 removeEventListener()</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myBtn&quot;</span>&gt;</span>click<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">function</span> <span class=\"title function_\">handleClick</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;clicked&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;myBtn&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  btn.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, handleClick);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"IE-事件模型\"><a href=\"#IE-事件模型\" class=\"headerlink\" title=\"IE 事件模型\"></a>IE 事件模型</h3><p>功能类似于 DOM0，使用方式上类似于 DOM2。</p>\n<p>使用 attachEvent() 和 detachEvent() 方法。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myBtn&quot;</span>&gt;</span>click<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">function</span> <span class=\"title function_\">handleClick</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;clicked&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;myBtn&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  btn.<span class=\"title function_\">attachEvent</span>(<span class=\"string\">&#x27;click&#x27;</span>, handleClick);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"js-实现事件修饰符\"><a href=\"#js-实现事件修饰符\" class=\"headerlink\" title=\"js 实现事件修饰符\"></a>js 实现事件修饰符</h2><h3 id=\"阻止默认行为-preventDefault\"><a href=\"#阻止默认行为-preventDefault\" class=\"headerlink\" title=\"阻止默认行为 preventDefault\"></a>阻止默认行为 preventDefault</h3><p>比如阻止链接的跳转或表单的提交</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;btn&#x27;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  event.<span class=\"title function_\">preventDefault</span>();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"阻止事件冒泡-stopPropagation\"><a href=\"#阻止事件冒泡-stopPropagation\" class=\"headerlink\" title=\"阻止事件冒泡 stopPropagation()\"></a>阻止事件冒泡 stopPropagation()</h3><p>阻止事件传到父元素</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;btn&#x27;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  event.<span class=\"title function_\">stopPropagation</span>();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一次性事件处理\"><a href=\"#一次性事件处理\" class=\"headerlink\" title=\"一次性事件处理\"></a>一次性事件处理</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handleClick</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">removeEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, handleClick); <span class=\"comment\">// 点击一次移除监听器</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;btn&#x27;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, handleClick);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取键盘按键\"><a href=\"#获取键盘按键\" class=\"headerlink\" title=\"获取键盘按键\"></a>获取键盘按键</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;keydown&#x27;</span>, <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(event.<span class=\"property\">key</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取鼠标按键\"><a href=\"#获取鼠标按键\" class=\"headerlink\" title=\"获取鼠标按键\"></a>获取鼠标按键</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;mousedown&#x27;</span>, <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(event.<span class=\"property\">key</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n"},{"title":"vue 事件处理","date":"2023-11-30T10:50:13.000Z","_content":"\nv-on:click=\"\" 缩写为 @click\n\n## 在內联事件处理器中访问事件参数\n\n在內联事件中访问原生 DOM 事件：\n\n### 向处理器中传入一个 $event 变量\n\n``` html\n<button @click=\"warn('message1', $event)\">\nSubmit\n</button>\n```\n\n### 使用内联箭头函数\n\n``` html\n<button @click=\"(event) => warn('message1', event)\">\nSubmit\n</button>\n```\n\n``` js\nfunction warn(message, event) {\n  // 在此处可以访问原生事件\n  if (event) {\n    event.preventDefault()\n  }\n  alert(message)\n}\n```\n\n## 事件修饰符\n\n- stop：调用 event.stopPropagation()，阻止事件继续传播。\n- prevent：调用 event.preventDefault()，阻止事件的默认行为。\n- self：只当事件是从原始目标元素本身触发时触发回调，如果事件是从内部元素冒泡上来的则不触发。\n- capture：添加事件监听器时使用 capture 模式，即在捕获阶段触发而不是冒泡阶段。\n- once：只触发一次事件，之后移除该监听器。\n- passive：提升页面滚动性能，告诉浏览器事件处理函数不会调用 event.preventDefault()。\n\n### （1）.stop\n\n``` html\n<div @click.stop=\"handleOuterClick\">\n  <button @click=\"handleInnerClick\">内部按钮</button>\n</div>\n```\n\n当内部按钮被点击时，handleOuterClick 不会被触发，因为事件不会继续向外部元素传播。\n\n### （2）.prevent\n\n``` html\n<form @submit.prevent=\"handleSubmit\">\n  <button type=\"submit\">提交</button>\n</form>\n```\n\nhandleSubmit 方法中的 event.preventDefault() 将会被调用，从而阻止表单的默认提交行为。\n\n### （3）.self\n\n``` html\n<div @click.self=\"handleClick\">只有当点击该div本身时触发</div>\n```\n\n只有当点击该 div 元素本身时，handleClick 方法才会被触发；div 内部其他元素冒泡上来的事件不会触发。\n\n### （4）.once\n\n``` html\n<button @click.once=\"handleClick\">点击我，只触发一次</button>\n```\n\n当按钮被点击后，handleClick 方法只会被触发一次，之后该事件监听器会被移除。\n\n### （5）.capture\n\n``` html\n<div @click.capture=\"handleCaptureClick\">捕获阶段触发</div>\n```\n\n事件监听器将在捕获阶段（从外向内）触发，而不是在冒泡阶段触发。\n\n### （6）.passive\n\n``` html\n<div @touchstart.passive=\"handleTouchStart\">优化页面滚动性能</div>\n```\n\n告诉浏览器 handleTouchStart 方法不会调用 event.preventDefault()，从而有助于提升页面滚动的性能。\n\n## 按键修饰符\n\n```@keyup.enter``` 中的 .enter 就是按键修饰符。\n\n### 常规按键\n\n- enter\n- tab\n- delete (捕获“Delete”和“Backspace”两个按键)\n- esc\n- space\n- up\n- down\n- left\n- right\n\n### 系统按键\n\n系统按键和常规按键不同的是，与 keyup 一起使用时，只有当系统按键被 **按下** 并松开其他键才会触发。\n\n- ctrl\n- alt\n- shift\n- meta\n\n举例：\n\n``` html\n<!-- 常规按键 -->\n<!-- 当 Alt + Enter 抬起时，触发 submit 事件 -->\n<input @keyup.alt.enter=\"submit\" />\n\n<!-- 系统按键 -->\n<!-- 当 按下 ctrl 时触发 -->\n<div @click.ctrl=\"doSth\">A</div>\n<!-- 当 按住 ctrl + 抬起其他键 时触发 -->\n<div @keyup.ctrl=\"doSth\">A</div>\n```\n\n### .exact 修饰符\n\n.exact 用于确定触发事件的确定组合。\n\n举例：\n\n``` html\n<!-- 当抬起 Ctrl 时，即使同时抬起其他系统按键也会触发 -->\n<button @keyup.ctrl=\"doSth\">A</button>\n\n<!-- 仅当抬起 Ctrl 且未抬起任何其他键时才会触发 -->\n<button @keyup.ctrl.exact=\"doSth\">A</button>\n\n<!-- 仅当没有抬起任何系统按键时触发 -->\n<button @keyup.exact=\"doSth\">A</button>\n```\n","source":"_posts/9-vue事件处理.md","raw":"---\ntitle: vue 事件处理\ndate: 2023-11-30 18:50:13\ntags: \n    - vue\ncategories:\n    - vue\n      - 文档\n---\n\nv-on:click=\"\" 缩写为 @click\n\n## 在內联事件处理器中访问事件参数\n\n在內联事件中访问原生 DOM 事件：\n\n### 向处理器中传入一个 $event 变量\n\n``` html\n<button @click=\"warn('message1', $event)\">\nSubmit\n</button>\n```\n\n### 使用内联箭头函数\n\n``` html\n<button @click=\"(event) => warn('message1', event)\">\nSubmit\n</button>\n```\n\n``` js\nfunction warn(message, event) {\n  // 在此处可以访问原生事件\n  if (event) {\n    event.preventDefault()\n  }\n  alert(message)\n}\n```\n\n## 事件修饰符\n\n- stop：调用 event.stopPropagation()，阻止事件继续传播。\n- prevent：调用 event.preventDefault()，阻止事件的默认行为。\n- self：只当事件是从原始目标元素本身触发时触发回调，如果事件是从内部元素冒泡上来的则不触发。\n- capture：添加事件监听器时使用 capture 模式，即在捕获阶段触发而不是冒泡阶段。\n- once：只触发一次事件，之后移除该监听器。\n- passive：提升页面滚动性能，告诉浏览器事件处理函数不会调用 event.preventDefault()。\n\n### （1）.stop\n\n``` html\n<div @click.stop=\"handleOuterClick\">\n  <button @click=\"handleInnerClick\">内部按钮</button>\n</div>\n```\n\n当内部按钮被点击时，handleOuterClick 不会被触发，因为事件不会继续向外部元素传播。\n\n### （2）.prevent\n\n``` html\n<form @submit.prevent=\"handleSubmit\">\n  <button type=\"submit\">提交</button>\n</form>\n```\n\nhandleSubmit 方法中的 event.preventDefault() 将会被调用，从而阻止表单的默认提交行为。\n\n### （3）.self\n\n``` html\n<div @click.self=\"handleClick\">只有当点击该div本身时触发</div>\n```\n\n只有当点击该 div 元素本身时，handleClick 方法才会被触发；div 内部其他元素冒泡上来的事件不会触发。\n\n### （4）.once\n\n``` html\n<button @click.once=\"handleClick\">点击我，只触发一次</button>\n```\n\n当按钮被点击后，handleClick 方法只会被触发一次，之后该事件监听器会被移除。\n\n### （5）.capture\n\n``` html\n<div @click.capture=\"handleCaptureClick\">捕获阶段触发</div>\n```\n\n事件监听器将在捕获阶段（从外向内）触发，而不是在冒泡阶段触发。\n\n### （6）.passive\n\n``` html\n<div @touchstart.passive=\"handleTouchStart\">优化页面滚动性能</div>\n```\n\n告诉浏览器 handleTouchStart 方法不会调用 event.preventDefault()，从而有助于提升页面滚动的性能。\n\n## 按键修饰符\n\n```@keyup.enter``` 中的 .enter 就是按键修饰符。\n\n### 常规按键\n\n- enter\n- tab\n- delete (捕获“Delete”和“Backspace”两个按键)\n- esc\n- space\n- up\n- down\n- left\n- right\n\n### 系统按键\n\n系统按键和常规按键不同的是，与 keyup 一起使用时，只有当系统按键被 **按下** 并松开其他键才会触发。\n\n- ctrl\n- alt\n- shift\n- meta\n\n举例：\n\n``` html\n<!-- 常规按键 -->\n<!-- 当 Alt + Enter 抬起时，触发 submit 事件 -->\n<input @keyup.alt.enter=\"submit\" />\n\n<!-- 系统按键 -->\n<!-- 当 按下 ctrl 时触发 -->\n<div @click.ctrl=\"doSth\">A</div>\n<!-- 当 按住 ctrl + 抬起其他键 时触发 -->\n<div @keyup.ctrl=\"doSth\">A</div>\n```\n\n### .exact 修饰符\n\n.exact 用于确定触发事件的确定组合。\n\n举例：\n\n``` html\n<!-- 当抬起 Ctrl 时，即使同时抬起其他系统按键也会触发 -->\n<button @keyup.ctrl=\"doSth\">A</button>\n\n<!-- 仅当抬起 Ctrl 且未抬起任何其他键时才会触发 -->\n<button @keyup.ctrl.exact=\"doSth\">A</button>\n\n<!-- 仅当没有抬起任何系统按键时触发 -->\n<button @keyup.exact=\"doSth\">A</button>\n```\n","slug":"9-vue事件处理","published":1,"updated":"2023-12-26T03:21:03.735Z","_id":"clpl36b6x000359w69m8dg8y3","comments":1,"layout":"post","photos":[],"link":"","content":"<p>v-on:click&#x3D;”” 缩写为 @click</p>\n<h2 id=\"在內联事件处理器中访问事件参数\"><a href=\"#在內联事件处理器中访问事件参数\" class=\"headerlink\" title=\"在內联事件处理器中访问事件参数\"></a>在內联事件处理器中访问事件参数</h2><p>在內联事件中访问原生 DOM 事件：</p>\n<h3 id=\"向处理器中传入一个-event-变量\"><a href=\"#向处理器中传入一个-event-变量\" class=\"headerlink\" title=\"向处理器中传入一个 $event 变量\"></a>向处理器中传入一个 $event 变量</h3><div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;warn(&#x27;message1&#x27;, $event)&quot;</span>&gt;</span></span><br><span class=\"line\">Submit</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"使用内联箭头函数\"><a href=\"#使用内联箭头函数\" class=\"headerlink\" title=\"使用内联箭头函数\"></a>使用内联箭头函数</h3><div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;(event) =&gt; warn(&#x27;message1&#x27;, event)&quot;</span>&gt;</span></span><br><span class=\"line\">Submit</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">warn</span>(<span class=\"params\">message, event</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 在此处可以访问原生事件</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (event) &#123;</span><br><span class=\"line\">    event.<span class=\"title function_\">preventDefault</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(message)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"事件修饰符\"><a href=\"#事件修饰符\" class=\"headerlink\" title=\"事件修饰符\"></a>事件修饰符</h2><ul>\n<li>stop：调用 event.stopPropagation()，阻止事件继续传播。</li>\n<li>prevent：调用 event.preventDefault()，阻止事件的默认行为。</li>\n<li>self：只当事件是从原始目标元素本身触发时触发回调，如果事件是从内部元素冒泡上来的则不触发。</li>\n<li>capture：添加事件监听器时使用 capture 模式，即在捕获阶段触发而不是冒泡阶段。</li>\n<li>once：只触发一次事件，之后移除该监听器。</li>\n<li>passive：提升页面滚动性能，告诉浏览器事件处理函数不会调用 event.preventDefault()。</li>\n</ul>\n<h3 id=\"（1）-stop\"><a href=\"#（1）-stop\" class=\"headerlink\" title=\"（1）.stop\"></a>（1）.stop</h3><div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> @<span class=\"attr\">click.stop</span>=<span class=\"string\">&quot;handleOuterClick&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;handleInnerClick&quot;</span>&gt;</span>内部按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>当内部按钮被点击时，handleOuterClick 不会被触发，因为事件不会继续向外部元素传播。</p>\n<h3 id=\"（2）-prevent\"><a href=\"#（2）-prevent\" class=\"headerlink\" title=\"（2）.prevent\"></a>（2）.prevent</h3><div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> @<span class=\"attr\">submit.prevent</span>=<span class=\"string\">&quot;handleSubmit&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span>提交<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>handleSubmit 方法中的 event.preventDefault() 将会被调用，从而阻止表单的默认提交行为。</p>\n<h3 id=\"（3）-self\"><a href=\"#（3）-self\" class=\"headerlink\" title=\"（3）.self\"></a>（3）.self</h3><div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> @<span class=\"attr\">click.self</span>=<span class=\"string\">&quot;handleClick&quot;</span>&gt;</span>只有当点击该div本身时触发<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>只有当点击该 div 元素本身时，handleClick 方法才会被触发；div 内部其他元素冒泡上来的事件不会触发。</p>\n<h3 id=\"（4）-once\"><a href=\"#（4）-once\" class=\"headerlink\" title=\"（4）.once\"></a>（4）.once</h3><div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click.once</span>=<span class=\"string\">&quot;handleClick&quot;</span>&gt;</span>点击我，只触发一次<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>当按钮被点击后，handleClick 方法只会被触发一次，之后该事件监听器会被移除。</p>\n<h3 id=\"（5）-capture\"><a href=\"#（5）-capture\" class=\"headerlink\" title=\"（5）.capture\"></a>（5）.capture</h3><div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> @<span class=\"attr\">click.capture</span>=<span class=\"string\">&quot;handleCaptureClick&quot;</span>&gt;</span>捕获阶段触发<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>事件监听器将在捕获阶段（从外向内）触发，而不是在冒泡阶段触发。</p>\n<h3 id=\"（6）-passive\"><a href=\"#（6）-passive\" class=\"headerlink\" title=\"（6）.passive\"></a>（6）.passive</h3><div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> @<span class=\"attr\">touchstart.passive</span>=<span class=\"string\">&quot;handleTouchStart&quot;</span>&gt;</span>优化页面滚动性能<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>告诉浏览器 handleTouchStart 方法不会调用 event.preventDefault()，从而有助于提升页面滚动的性能。</p>\n<h2 id=\"按键修饰符\"><a href=\"#按键修饰符\" class=\"headerlink\" title=\"按键修饰符\"></a>按键修饰符</h2><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><figcaption><span>中的 .enter 就是按键修饰符。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 常规按键</span><br><span class=\"line\"></span><br><span class=\"line\">- enter</span><br><span class=\"line\">- tab</span><br><span class=\"line\">- delete (捕获“Delete”和“Backspace”两个按键)</span><br><span class=\"line\">- esc</span><br><span class=\"line\">- space</span><br><span class=\"line\">- up</span><br><span class=\"line\">- down</span><br><span class=\"line\">- left</span><br><span class=\"line\">- right</span><br><span class=\"line\"></span><br><span class=\"line\">### 系统按键</span><br><span class=\"line\"></span><br><span class=\"line\">系统按键和常规按键不同的是，与 keyup 一起使用时，只有当系统按键被 **按下** 并松开其他键才会触发。</span><br><span class=\"line\"></span><br><span class=\"line\">- ctrl</span><br><span class=\"line\">- alt</span><br><span class=\"line\">- shift</span><br><span class=\"line\">- meta</span><br><span class=\"line\"></span><br><span class=\"line\">举例：</span><br><span class=\"line\"></span><br><span class=\"line\">``` html</span><br><span class=\"line\">&lt;!-- 常规按键 --&gt;</span><br><span class=\"line\">&lt;!-- 当 Alt + Enter 抬起时，触发 submit 事件 --&gt;</span><br><span class=\"line\">&lt;input @keyup.alt.enter=&quot;submit&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 系统按键 --&gt;</span><br><span class=\"line\">&lt;!-- 当 按下 ctrl 时触发 --&gt;</span><br><span class=\"line\">&lt;div @click.ctrl=&quot;doSth&quot;&gt;A&lt;/div&gt;</span><br><span class=\"line\">&lt;!-- 当 按住 ctrl + 抬起其他键 时触发 --&gt;</span><br><span class=\"line\">&lt;div @keyup.ctrl=&quot;doSth&quot;&gt;A&lt;/div&gt;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"exact-修饰符\"><a href=\"#exact-修饰符\" class=\"headerlink\" title=\".exact 修饰符\"></a>.exact 修饰符</h3><p>.exact 用于确定触发事件的确定组合。</p>\n<p>举例：</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 当抬起 Ctrl 时，即使同时抬起其他系统按键也会触发 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">keyup.ctrl</span>=<span class=\"string\">&quot;doSth&quot;</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 仅当抬起 Ctrl 且未抬起任何其他键时才会触发 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">keyup.ctrl.exact</span>=<span class=\"string\">&quot;doSth&quot;</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 仅当没有抬起任何系统按键时触发 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">keyup.exact</span>=<span class=\"string\">&quot;doSth&quot;</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n","site":{"data":{}},"excerpt":"","more":"<p>v-on:click&#x3D;”” 缩写为 @click</p>\n<h2 id=\"在內联事件处理器中访问事件参数\"><a href=\"#在內联事件处理器中访问事件参数\" class=\"headerlink\" title=\"在內联事件处理器中访问事件参数\"></a>在內联事件处理器中访问事件参数</h2><p>在內联事件中访问原生 DOM 事件：</p>\n<h3 id=\"向处理器中传入一个-event-变量\"><a href=\"#向处理器中传入一个-event-变量\" class=\"headerlink\" title=\"向处理器中传入一个 $event 变量\"></a>向处理器中传入一个 $event 变量</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;warn(&#x27;message1&#x27;, $event)&quot;</span>&gt;</span></span><br><span class=\"line\">Submit</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用内联箭头函数\"><a href=\"#使用内联箭头函数\" class=\"headerlink\" title=\"使用内联箭头函数\"></a>使用内联箭头函数</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;(event) =&gt; warn(&#x27;message1&#x27;, event)&quot;</span>&gt;</span></span><br><span class=\"line\">Submit</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">warn</span>(<span class=\"params\">message, event</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 在此处可以访问原生事件</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (event) &#123;</span><br><span class=\"line\">    event.<span class=\"title function_\">preventDefault</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(message)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"事件修饰符\"><a href=\"#事件修饰符\" class=\"headerlink\" title=\"事件修饰符\"></a>事件修饰符</h2><ul>\n<li>stop：调用 event.stopPropagation()，阻止事件继续传播。</li>\n<li>prevent：调用 event.preventDefault()，阻止事件的默认行为。</li>\n<li>self：只当事件是从原始目标元素本身触发时触发回调，如果事件是从内部元素冒泡上来的则不触发。</li>\n<li>capture：添加事件监听器时使用 capture 模式，即在捕获阶段触发而不是冒泡阶段。</li>\n<li>once：只触发一次事件，之后移除该监听器。</li>\n<li>passive：提升页面滚动性能，告诉浏览器事件处理函数不会调用 event.preventDefault()。</li>\n</ul>\n<h3 id=\"（1）-stop\"><a href=\"#（1）-stop\" class=\"headerlink\" title=\"（1）.stop\"></a>（1）.stop</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> @<span class=\"attr\">click.stop</span>=<span class=\"string\">&quot;handleOuterClick&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;handleInnerClick&quot;</span>&gt;</span>内部按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>当内部按钮被点击时，handleOuterClick 不会被触发，因为事件不会继续向外部元素传播。</p>\n<h3 id=\"（2）-prevent\"><a href=\"#（2）-prevent\" class=\"headerlink\" title=\"（2）.prevent\"></a>（2）.prevent</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> @<span class=\"attr\">submit.prevent</span>=<span class=\"string\">&quot;handleSubmit&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span>提交<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>handleSubmit 方法中的 event.preventDefault() 将会被调用，从而阻止表单的默认提交行为。</p>\n<h3 id=\"（3）-self\"><a href=\"#（3）-self\" class=\"headerlink\" title=\"（3）.self\"></a>（3）.self</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> @<span class=\"attr\">click.self</span>=<span class=\"string\">&quot;handleClick&quot;</span>&gt;</span>只有当点击该div本身时触发<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>只有当点击该 div 元素本身时，handleClick 方法才会被触发；div 内部其他元素冒泡上来的事件不会触发。</p>\n<h3 id=\"（4）-once\"><a href=\"#（4）-once\" class=\"headerlink\" title=\"（4）.once\"></a>（4）.once</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click.once</span>=<span class=\"string\">&quot;handleClick&quot;</span>&gt;</span>点击我，只触发一次<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>当按钮被点击后，handleClick 方法只会被触发一次，之后该事件监听器会被移除。</p>\n<h3 id=\"（5）-capture\"><a href=\"#（5）-capture\" class=\"headerlink\" title=\"（5）.capture\"></a>（5）.capture</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> @<span class=\"attr\">click.capture</span>=<span class=\"string\">&quot;handleCaptureClick&quot;</span>&gt;</span>捕获阶段触发<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>事件监听器将在捕获阶段（从外向内）触发，而不是在冒泡阶段触发。</p>\n<h3 id=\"（6）-passive\"><a href=\"#（6）-passive\" class=\"headerlink\" title=\"（6）.passive\"></a>（6）.passive</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> @<span class=\"attr\">touchstart.passive</span>=<span class=\"string\">&quot;handleTouchStart&quot;</span>&gt;</span>优化页面滚动性能<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>告诉浏览器 handleTouchStart 方法不会调用 event.preventDefault()，从而有助于提升页面滚动的性能。</p>\n<h2 id=\"按键修饰符\"><a href=\"#按键修饰符\" class=\"headerlink\" title=\"按键修饰符\"></a>按键修饰符</h2><figure class=\"highlight plaintext\"><figcaption><span>中的 .enter 就是按键修饰符。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 常规按键</span><br><span class=\"line\"></span><br><span class=\"line\">- enter</span><br><span class=\"line\">- tab</span><br><span class=\"line\">- delete (捕获“Delete”和“Backspace”两个按键)</span><br><span class=\"line\">- esc</span><br><span class=\"line\">- space</span><br><span class=\"line\">- up</span><br><span class=\"line\">- down</span><br><span class=\"line\">- left</span><br><span class=\"line\">- right</span><br><span class=\"line\"></span><br><span class=\"line\">### 系统按键</span><br><span class=\"line\"></span><br><span class=\"line\">系统按键和常规按键不同的是，与 keyup 一起使用时，只有当系统按键被 **按下** 并松开其他键才会触发。</span><br><span class=\"line\"></span><br><span class=\"line\">- ctrl</span><br><span class=\"line\">- alt</span><br><span class=\"line\">- shift</span><br><span class=\"line\">- meta</span><br><span class=\"line\"></span><br><span class=\"line\">举例：</span><br><span class=\"line\"></span><br><span class=\"line\">``` html</span><br><span class=\"line\">&lt;!-- 常规按键 --&gt;</span><br><span class=\"line\">&lt;!-- 当 Alt + Enter 抬起时，触发 submit 事件 --&gt;</span><br><span class=\"line\">&lt;input @keyup.alt.enter=&quot;submit&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 系统按键 --&gt;</span><br><span class=\"line\">&lt;!-- 当 按下 ctrl 时触发 --&gt;</span><br><span class=\"line\">&lt;div @click.ctrl=&quot;doSth&quot;&gt;A&lt;/div&gt;</span><br><span class=\"line\">&lt;!-- 当 按住 ctrl + 抬起其他键 时触发 --&gt;</span><br><span class=\"line\">&lt;div @keyup.ctrl=&quot;doSth&quot;&gt;A&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"exact-修饰符\"><a href=\"#exact-修饰符\" class=\"headerlink\" title=\".exact 修饰符\"></a>.exact 修饰符</h3><p>.exact 用于确定触发事件的确定组合。</p>\n<p>举例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 当抬起 Ctrl 时，即使同时抬起其他系统按键也会触发 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">keyup.ctrl</span>=<span class=\"string\">&quot;doSth&quot;</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 仅当抬起 Ctrl 且未抬起任何其他键时才会触发 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">keyup.ctrl.exact</span>=<span class=\"string\">&quot;doSth&quot;</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 仅当没有抬起任何系统按键时触发 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">keyup.exact</span>=<span class=\"string\">&quot;doSth&quot;</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"v-model","date":"2023-12-05T02:31:56.000Z","_content":"\n## 基础\n\n``` html\n<input\n    :value=\"text\"\n    @input=\"event => text = event.target.value\" />\n```\n\n用 v-model 简化：\n\n``` html\n<input v-model=\"text\" />\n```\n\n## 类型\n\n### 单行\n\n``` html\n<p>{{ message }}</p>\n<input v-model=\"message\" placeholder=\"edit\" />\n```\n\n### 多行\n\n``` html\n<p>{{ message }}</p>\n<textarea v-model=\"message\" placeholder=\"edit\"></textarea>\n```\n\n### 复选框\n\nlabel 标签 for 属性的作用：用户点击 label 标签时，浏览器会将焦点转移到与 for 属性值相匹配的表单控件上，从而提高表单的可访问性和易用性。\n\n``` html\n<div>Checked names: {{ checkedNames }}</div>\n\n<input type=\"checkbox\" id=\"jack\" value=\"Jack\" v-model=\"checkedNames\">\n<label for=\"jack\">Jack</label>\n\n<input type=\"checkbox\" id=\"john\" value=\"John\" v-model=\"checkedNames\">\n<label for=\"john\">John</label>\n\n<input type=\"checkbox\" id=\"mike\" value=\"Mike\" v-model=\"checkedNames\">\n<label for=\"mike\">Mike</label>\n```\n\n### 单选\n\n``` html\n<div>Picked: {{ picked }}</div>\n\n<input type=\"radio\" id=\"one\" value=\"One\" v-model=\"picked\" />\n<label for=\"one\">One</label>\n\n<input type=\"radio\" id=\"two\" value=\"Two\" v-model=\"picked\" />\n<label for=\"two\">Two</label>\n```\n\n### 选择器\n\n单个：\n\n``` html\n<div>Selected: {{ selected }}</div>\n\n<select v-model=\"selected\">\n  <option disabled value=\"\">Please select one</option>\n  <option>A</option>\n  <option>B</option>\n  <option>C</option>\n</select>\n```\n\n多个（将值绑定到数组上）：\n\n``` html\n<div>Selected: {{ selected }}</div>\n\n<select v-model=\"selected\" multiple>\n  <option>A</option>\n  <option>B</option>\n  <option>C</option>\n</select>\n```\n\n## 修饰符\n\n### .lazy\n\n.lazy 修饰符表示在 \"change\" 事件而不是 \"input\" 事件触发时更新：\n\n这意味着数据将在失去焦点后才会同步到视图中，而不是每次输入时都同步。可以用于减少输入框频繁更新视图的情况，尤其是在处理大量输入时可以提高性能。\n\n``` html\n<input v-model.lazy=\"msg\" />\n```\n\n### .number\n\n让用户输入自动转换为数字，如果该值无法被 parseFloat() 处理，则将返回原始值。\n\nnumber 修饰符会在输入框有 type=\"number\" 时自动启用。\n\n``` html\n<input v-model.lazy=\"msg\" />\n```\n\n### .trim\n\n默认自动去除用户输入内容中两端的空格：\n\n``` html\n<input v-model.trim=\"msg\" />\n```\n","source":"_posts/10-v-model.md","raw":"---\ntitle: v-model\ndate: 2023-12-05 10:31:56\ntags: \n    - vue\ncategories:\n    - vue\n      - 文档\n---\n\n## 基础\n\n``` html\n<input\n    :value=\"text\"\n    @input=\"event => text = event.target.value\" />\n```\n\n用 v-model 简化：\n\n``` html\n<input v-model=\"text\" />\n```\n\n## 类型\n\n### 单行\n\n``` html\n<p>{{ message }}</p>\n<input v-model=\"message\" placeholder=\"edit\" />\n```\n\n### 多行\n\n``` html\n<p>{{ message }}</p>\n<textarea v-model=\"message\" placeholder=\"edit\"></textarea>\n```\n\n### 复选框\n\nlabel 标签 for 属性的作用：用户点击 label 标签时，浏览器会将焦点转移到与 for 属性值相匹配的表单控件上，从而提高表单的可访问性和易用性。\n\n``` html\n<div>Checked names: {{ checkedNames }}</div>\n\n<input type=\"checkbox\" id=\"jack\" value=\"Jack\" v-model=\"checkedNames\">\n<label for=\"jack\">Jack</label>\n\n<input type=\"checkbox\" id=\"john\" value=\"John\" v-model=\"checkedNames\">\n<label for=\"john\">John</label>\n\n<input type=\"checkbox\" id=\"mike\" value=\"Mike\" v-model=\"checkedNames\">\n<label for=\"mike\">Mike</label>\n```\n\n### 单选\n\n``` html\n<div>Picked: {{ picked }}</div>\n\n<input type=\"radio\" id=\"one\" value=\"One\" v-model=\"picked\" />\n<label for=\"one\">One</label>\n\n<input type=\"radio\" id=\"two\" value=\"Two\" v-model=\"picked\" />\n<label for=\"two\">Two</label>\n```\n\n### 选择器\n\n单个：\n\n``` html\n<div>Selected: {{ selected }}</div>\n\n<select v-model=\"selected\">\n  <option disabled value=\"\">Please select one</option>\n  <option>A</option>\n  <option>B</option>\n  <option>C</option>\n</select>\n```\n\n多个（将值绑定到数组上）：\n\n``` html\n<div>Selected: {{ selected }}</div>\n\n<select v-model=\"selected\" multiple>\n  <option>A</option>\n  <option>B</option>\n  <option>C</option>\n</select>\n```\n\n## 修饰符\n\n### .lazy\n\n.lazy 修饰符表示在 \"change\" 事件而不是 \"input\" 事件触发时更新：\n\n这意味着数据将在失去焦点后才会同步到视图中，而不是每次输入时都同步。可以用于减少输入框频繁更新视图的情况，尤其是在处理大量输入时可以提高性能。\n\n``` html\n<input v-model.lazy=\"msg\" />\n```\n\n### .number\n\n让用户输入自动转换为数字，如果该值无法被 parseFloat() 处理，则将返回原始值。\n\nnumber 修饰符会在输入框有 type=\"number\" 时自动启用。\n\n``` html\n<input v-model.lazy=\"msg\" />\n```\n\n### .trim\n\n默认自动去除用户输入内容中两端的空格：\n\n``` html\n<input v-model.trim=\"msg\" />\n```\n","slug":"10-v-model","published":1,"updated":"2023-12-26T03:18:58.637Z","_id":"clprrpltp00009ww69lob2abv","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:value</span>=<span class=\"string\">&quot;text&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    @<span class=\"attr\">input</span>=<span class=\"string\">&quot;event =&gt; text = event.target.value&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>用 v-model 简化：</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;text&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h2><h3 id=\"单行\"><a href=\"#单行\" class=\"headerlink\" title=\"单行\"></a>单行</h3><div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;message&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;edit&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"多行\"><a href=\"#多行\" class=\"headerlink\" title=\"多行\"></a>多行</h3><div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;message&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;edit&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"复选框\"><a href=\"#复选框\" class=\"headerlink\" title=\"复选框\"></a>复选框</h3><p>label 标签 for 属性的作用：用户点击 label 标签时，浏览器会将焦点转移到与 for 属性值相匹配的表单控件上，从而提高表单的可访问性和易用性。</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Checked names: &#123;&#123; checkedNames &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;jack&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Jack&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;jack&quot;</span>&gt;</span>Jack<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;john&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;John&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;john&quot;</span>&gt;</span>John<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;mike&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Mike&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;mike&quot;</span>&gt;</span>Mike<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"单选\"><a href=\"#单选\" class=\"headerlink\" title=\"单选\"></a>单选</h3><div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Picked: &#123;&#123; picked &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;one&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;One&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;picked&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;one&quot;</span>&gt;</span>One<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;two&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Two&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;picked&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;two&quot;</span>&gt;</span>Two<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h3><p>单个：</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;selected&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">disabled</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>Please select one<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>多个（将值绑定到数组上）：</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;selected&quot;</span> <span class=\"attr\">multiple</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h2><h3 id=\"lazy\"><a href=\"#lazy\" class=\"headerlink\" title=\".lazy\"></a>.lazy</h3><p>.lazy 修饰符表示在 “change” 事件而不是 “input” 事件触发时更新：</p>\n<p>这意味着数据将在失去焦点后才会同步到视图中，而不是每次输入时都同步。可以用于减少输入框频繁更新视图的情况，尤其是在处理大量输入时可以提高性能。</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model.lazy</span>=<span class=\"string\">&quot;msg&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"number\"><a href=\"#number\" class=\"headerlink\" title=\".number\"></a>.number</h3><p>让用户输入自动转换为数字，如果该值无法被 parseFloat() 处理，则将返回原始值。</p>\n<p>number 修饰符会在输入框有 type&#x3D;”number” 时自动启用。</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model.lazy</span>=<span class=\"string\">&quot;msg&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"trim\"><a href=\"#trim\" class=\"headerlink\" title=\".trim\"></a>.trim</h3><p>默认自动去除用户输入内容中两端的空格：</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model.trim</span>=<span class=\"string\">&quot;msg&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></div>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:value</span>=<span class=\"string\">&quot;text&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    @<span class=\"attr\">input</span>=<span class=\"string\">&quot;event =&gt; text = event.target.value&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>用 v-model 简化：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;text&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h2><h3 id=\"单行\"><a href=\"#单行\" class=\"headerlink\" title=\"单行\"></a>单行</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;message&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;edit&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"多行\"><a href=\"#多行\" class=\"headerlink\" title=\"多行\"></a>多行</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;message&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;edit&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"复选框\"><a href=\"#复选框\" class=\"headerlink\" title=\"复选框\"></a>复选框</h3><p>label 标签 for 属性的作用：用户点击 label 标签时，浏览器会将焦点转移到与 for 属性值相匹配的表单控件上，从而提高表单的可访问性和易用性。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Checked names: &#123;&#123; checkedNames &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;jack&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Jack&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;jack&quot;</span>&gt;</span>Jack<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;john&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;John&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;john&quot;</span>&gt;</span>John<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;mike&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Mike&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;checkedNames&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;mike&quot;</span>&gt;</span>Mike<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"单选\"><a href=\"#单选\" class=\"headerlink\" title=\"单选\"></a>单选</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Picked: &#123;&#123; picked &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;one&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;One&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;picked&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;one&quot;</span>&gt;</span>One<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;radio&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;two&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Two&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;picked&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;two&quot;</span>&gt;</span>Two<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h3><p>单个：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;selected&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">disabled</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>Please select one<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>多个（将值绑定到数组上）：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;selected&quot;</span> <span class=\"attr\">multiple</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h2><h3 id=\"lazy\"><a href=\"#lazy\" class=\"headerlink\" title=\".lazy\"></a>.lazy</h3><p>.lazy 修饰符表示在 “change” 事件而不是 “input” 事件触发时更新：</p>\n<p>这意味着数据将在失去焦点后才会同步到视图中，而不是每次输入时都同步。可以用于减少输入框频繁更新视图的情况，尤其是在处理大量输入时可以提高性能。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model.lazy</span>=<span class=\"string\">&quot;msg&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"number\"><a href=\"#number\" class=\"headerlink\" title=\".number\"></a>.number</h3><p>让用户输入自动转换为数字，如果该值无法被 parseFloat() 处理，则将返回原始值。</p>\n<p>number 修饰符会在输入框有 type&#x3D;”number” 时自动启用。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model.lazy</span>=<span class=\"string\">&quot;msg&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"trim\"><a href=\"#trim\" class=\"headerlink\" title=\".trim\"></a>.trim</h3><p>默认自动去除用户输入内容中两端的空格：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model.trim</span>=<span class=\"string\">&quot;msg&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"vue3 生命周期","date":"2023-12-05T03:14:09.000Z","_content":"\n## vue3 生命周期图示\n\n<img src=\"https://cn.vuejs.org/assets/lifecycle.16e4c08e.png\" />\n\n## 注册生命钩子\n\n### 用法\n\n``` html\n<script setup>\nimport { onMounted } from 'vue';\n\nonMounted(() => {\n    console.log('now mounted');\n});\n</script>\n```\n\n调用 onMounted 时，Vue 会自动将回调函数注册到当前正被初始化的组件实例上，所以该钩子应当被同步注册。\n\n这并不意味对 onMounted 的调用必须放在 setup() 或 ```<script setup>``` 内的词法上下文中。\n\nonMounted() 也可以在一个外部函数中调用，只要调用栈是同步的，且最终起源自 setup() 就可以。\n","source":"_posts/11-vue3生命周期.md","raw":"---\ntitle: vue3 生命周期\ndate: 2023-12-05 11:14:09\ntags:\n    - vue3\n    - vue\ncategories:\n    - vue3\n      - 文档\n---\n\n## vue3 生命周期图示\n\n<img src=\"https://cn.vuejs.org/assets/lifecycle.16e4c08e.png\" />\n\n## 注册生命钩子\n\n### 用法\n\n``` html\n<script setup>\nimport { onMounted } from 'vue';\n\nonMounted(() => {\n    console.log('now mounted');\n});\n</script>\n```\n\n调用 onMounted 时，Vue 会自动将回调函数注册到当前正被初始化的组件实例上，所以该钩子应当被同步注册。\n\n这并不意味对 onMounted 的调用必须放在 setup() 或 ```<script setup>``` 内的词法上下文中。\n\nonMounted() 也可以在一个外部函数中调用，只要调用栈是同步的，且最终起源自 setup() 就可以。\n","slug":"11-vue3生命周期","published":1,"updated":"2023-12-26T03:20:59.278Z","_id":"clprrpltr00019ww6gvarfi6m","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"vue3-生命周期图示\"><a href=\"#vue3-生命周期图示\" class=\"headerlink\" title=\"vue3 生命周期图示\"></a>vue3 生命周期图示</h2><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cn.vuejs.org/assets/lifecycle.16e4c08e.png\"\n                      \n                >\n\n<h2 id=\"注册生命钩子\"><a href=\"#注册生命钩子\" class=\"headerlink\" title=\"注册生命钩子\"></a>注册生命钩子</h2><h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123; onMounted &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">onMounted</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;now mounted&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>调用 onMounted 时，Vue 会自动将回调函数注册到当前正被初始化的组件实例上，所以该钩子应当被同步注册。</p>\n<p>这并不意味对 onMounted 的调用必须放在 setup() 或 <code>&lt;script setup&gt;</code> 内的词法上下文中。</p>\n<p>onMounted() 也可以在一个外部函数中调用，只要调用栈是同步的，且最终起源自 setup() 就可以。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"vue3-生命周期图示\"><a href=\"#vue3-生命周期图示\" class=\"headerlink\" title=\"vue3 生命周期图示\"></a>vue3 生命周期图示</h2><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cn.vuejs.org/assets/lifecycle.16e4c08e.png\"\n                      \n                >\n\n<h2 id=\"注册生命钩子\"><a href=\"#注册生命钩子\" class=\"headerlink\" title=\"注册生命钩子\"></a>注册生命钩子</h2><h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123; onMounted &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">onMounted</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;now mounted&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>调用 onMounted 时，Vue 会自动将回调函数注册到当前正被初始化的组件实例上，所以该钩子应当被同步注册。</p>\n<p>这并不意味对 onMounted 的调用必须放在 setup() 或 <code>&lt;script setup&gt;</code> 内的词法上下文中。</p>\n<p>onMounted() 也可以在一个外部函数中调用，只要调用栈是同步的，且最终起源自 setup() 就可以。</p>\n"},{"title":"vue3 侦听器","date":"2023-12-07T10:22:34.000Z","_content":"\n## 基本用法\n\n``` html\n<script setup>\nimport { ref, watch } from 'vue';\n\nconst initVal = ref('');\n\nwatch(initVal, (newVal, oldVal) => {\n    ...\n});\n</script>\n```\n\n## 侦听数据源类型\n\nref（包括计算属性 computed）、响应式对象、getter 函数、多个数据源组成的数组\n\n``` js\nconst x = ref(0), y = ref(0);\n\n// ref\nwatch(x, (newX) => {\n    console.log(`x is ${newX}`);\n});\n\n// getter 函数\nwatch(\n    () => x.value + y.value,\n    (sum) => {\n        console.log(`sum is ${sum}`);\n    }\n);\n\n// 多个数据源组成的数组\nwatch(\n    [x, () => y.value],\n    ([newX, newY], [oldX, oldY]) => {\n        console.log(`x is ${newX} y is ${newY}`);\n    }\n);\n```\n\n## 侦听响应式对象的属性值\n\n不能直接监听响应式对象的属性值，而是使用返回该属性的 getter 函数\n\n``` js\nconst obj = reactive({ count: 0 });\n\n// 错误，因为 obj.count 是一个 number\nwatch(obj.count, () => {\n    .console.log(`count is: ${count}`)\n});\n\n// 正确，使用一个 getter 函数\nwatch(\n    () => obj.count,\n    (count) => {\n      console.log(`count is: ${count}`)\n    }\n);\n```\n\n## 深层侦听器\n\n给 watch 传响应式对象，会隐式创建深层监听器\n\n``` js\nconst obj = reactive({ count: 0 });\n\nwatch(obj, (newVal, oldVal) => {\n    ...\n});\n\nobj.count++; // 属性变更时触发\n```\n\n返回一个响应对象的 getter 函数，只在返回不同对象时才会触发回调\n\n``` js\nwatch(\n    () => source.obj,\n    () => {\n        ... // 仅当 test.obj 被替换时触发\n    }\n);\n```\n\n可以显示添加 deep，转为深层侦听器\n\n``` js\nwatch(\n    () => source.obj,\n    () => {\n        ... // 仅当 test.obj 被替换时触发\n    },\n    { deep: true }\n);\n```\n\n## 创建时立即执行的侦听器\n\n创建侦听器时，立即执行\n\n``` js\nwatch(source, \n    (newVal, oldVal) => {}, \n    { immediate: true });\n```\n","source":"_posts/12-vue3侦听器.md","raw":"---\ntitle: vue3 侦听器\ndate: 2023-12-07 18:22:34\ntags:\n    - vue3\n    - vue\ncategories:\n    - vue3\n      - 文档\n---\n\n## 基本用法\n\n``` html\n<script setup>\nimport { ref, watch } from 'vue';\n\nconst initVal = ref('');\n\nwatch(initVal, (newVal, oldVal) => {\n    ...\n});\n</script>\n```\n\n## 侦听数据源类型\n\nref（包括计算属性 computed）、响应式对象、getter 函数、多个数据源组成的数组\n\n``` js\nconst x = ref(0), y = ref(0);\n\n// ref\nwatch(x, (newX) => {\n    console.log(`x is ${newX}`);\n});\n\n// getter 函数\nwatch(\n    () => x.value + y.value,\n    (sum) => {\n        console.log(`sum is ${sum}`);\n    }\n);\n\n// 多个数据源组成的数组\nwatch(\n    [x, () => y.value],\n    ([newX, newY], [oldX, oldY]) => {\n        console.log(`x is ${newX} y is ${newY}`);\n    }\n);\n```\n\n## 侦听响应式对象的属性值\n\n不能直接监听响应式对象的属性值，而是使用返回该属性的 getter 函数\n\n``` js\nconst obj = reactive({ count: 0 });\n\n// 错误，因为 obj.count 是一个 number\nwatch(obj.count, () => {\n    .console.log(`count is: ${count}`)\n});\n\n// 正确，使用一个 getter 函数\nwatch(\n    () => obj.count,\n    (count) => {\n      console.log(`count is: ${count}`)\n    }\n);\n```\n\n## 深层侦听器\n\n给 watch 传响应式对象，会隐式创建深层监听器\n\n``` js\nconst obj = reactive({ count: 0 });\n\nwatch(obj, (newVal, oldVal) => {\n    ...\n});\n\nobj.count++; // 属性变更时触发\n```\n\n返回一个响应对象的 getter 函数，只在返回不同对象时才会触发回调\n\n``` js\nwatch(\n    () => source.obj,\n    () => {\n        ... // 仅当 test.obj 被替换时触发\n    }\n);\n```\n\n可以显示添加 deep，转为深层侦听器\n\n``` js\nwatch(\n    () => source.obj,\n    () => {\n        ... // 仅当 test.obj 被替换时触发\n    },\n    { deep: true }\n);\n```\n\n## 创建时立即执行的侦听器\n\n创建侦听器时，立即执行\n\n``` js\nwatch(source, \n    (newVal, oldVal) => {}, \n    { immediate: true });\n```\n","slug":"12-vue3侦听器","published":1,"updated":"2023-12-26T03:20:56.679Z","_id":"clq0s4b7h00005dw67395ev3g","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123; ref, watch &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> initVal = <span class=\"title function_\">ref</span>(<span class=\"string\">&#x27;&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">watch</span>(initVal, <span class=\"function\">(<span class=\"params\">newVal, oldVal</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    ...</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"侦听数据源类型\"><a href=\"#侦听数据源类型\" class=\"headerlink\" title=\"侦听数据源类型\"></a>侦听数据源类型</h2><p>ref（包括计算属性 computed）、响应式对象、getter 函数、多个数据源组成的数组</p>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> x = <span class=\"title function_\">ref</span>(<span class=\"number\">0</span>), y = <span class=\"title function_\">ref</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ref</span></span><br><span class=\"line\"><span class=\"title function_\">watch</span>(x, <span class=\"function\">(<span class=\"params\">newX</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`x is <span class=\"subst\">$&#123;newX&#125;</span>`</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// getter 函数</span></span><br><span class=\"line\"><span class=\"title function_\">watch</span>(</span><br><span class=\"line\">    <span class=\"function\">() =&gt;</span> x.<span class=\"property\">value</span> + y.<span class=\"property\">value</span>,</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">sum</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`sum is <span class=\"subst\">$&#123;sum&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 多个数据源组成的数组</span></span><br><span class=\"line\"><span class=\"title function_\">watch</span>(</span><br><span class=\"line\">    [x, <span class=\"function\">() =&gt;</span> y.<span class=\"property\">value</span>],</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">[newX, newY], [oldX, oldY]</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`x is <span class=\"subst\">$&#123;newX&#125;</span> y is <span class=\"subst\">$&#123;newY&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"侦听响应式对象的属性值\"><a href=\"#侦听响应式对象的属性值\" class=\"headerlink\" title=\"侦听响应式对象的属性值\"></a>侦听响应式对象的属性值</h2><p>不能直接监听响应式对象的属性值，而是使用返回该属性的 getter 函数</p>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"title function_\">reactive</span>(&#123; <span class=\"attr\">count</span>: <span class=\"number\">0</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 错误，因为 obj.count 是一个 number</span></span><br><span class=\"line\"><span class=\"title function_\">watch</span>(obj.<span class=\"property\">count</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    .<span class=\"property\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`count is: <span class=\"subst\">$&#123;count&#125;</span>`</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 正确，使用一个 getter 函数</span></span><br><span class=\"line\"><span class=\"title function_\">watch</span>(</span><br><span class=\"line\">    <span class=\"function\">() =&gt;</span> obj.<span class=\"property\">count</span>,</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">count</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`count is: <span class=\"subst\">$&#123;count&#125;</span>`</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"深层侦听器\"><a href=\"#深层侦听器\" class=\"headerlink\" title=\"深层侦听器\"></a>深层侦听器</h2><p>给 watch 传响应式对象，会隐式创建深层监听器</p>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"title function_\">reactive</span>(&#123; <span class=\"attr\">count</span>: <span class=\"number\">0</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">watch</span>(obj, <span class=\"function\">(<span class=\"params\">newVal, oldVal</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"property\">count</span>++; <span class=\"comment\">// 属性变更时触发</span></span><br></pre></td></tr></table></figure></div>\n\n<p>返回一个响应对象的 getter 函数，只在返回不同对象时才会触发回调</p>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">watch</span>(</span><br><span class=\"line\">    <span class=\"function\">() =&gt;</span> source.<span class=\"property\">obj</span>,</span><br><span class=\"line\">    <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        ... <span class=\"comment\">// 仅当 test.obj 被替换时触发</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></div>\n\n<p>可以显示添加 deep，转为深层侦听器</p>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">watch</span>(</span><br><span class=\"line\">    <span class=\"function\">() =&gt;</span> source.<span class=\"property\">obj</span>,</span><br><span class=\"line\">    <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        ... <span class=\"comment\">// 仅当 test.obj 被替换时触发</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">deep</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"创建时立即执行的侦听器\"><a href=\"#创建时立即执行的侦听器\" class=\"headerlink\" title=\"创建时立即执行的侦听器\"></a>创建时立即执行的侦听器</h2><p>创建侦听器时，立即执行</p>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">watch</span>(source, </span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">newVal, oldVal</span>) =&gt;</span> &#123;&#125;, </span><br><span class=\"line\">    &#123; <span class=\"attr\">immediate</span>: <span class=\"literal\">true</span> &#125;);</span><br></pre></td></tr></table></figure></div>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123; ref, watch &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> initVal = <span class=\"title function_\">ref</span>(<span class=\"string\">&#x27;&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">watch</span>(initVal, <span class=\"function\">(<span class=\"params\">newVal, oldVal</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    ...</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"侦听数据源类型\"><a href=\"#侦听数据源类型\" class=\"headerlink\" title=\"侦听数据源类型\"></a>侦听数据源类型</h2><p>ref（包括计算属性 computed）、响应式对象、getter 函数、多个数据源组成的数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> x = <span class=\"title function_\">ref</span>(<span class=\"number\">0</span>), y = <span class=\"title function_\">ref</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ref</span></span><br><span class=\"line\"><span class=\"title function_\">watch</span>(x, <span class=\"function\">(<span class=\"params\">newX</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`x is <span class=\"subst\">$&#123;newX&#125;</span>`</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// getter 函数</span></span><br><span class=\"line\"><span class=\"title function_\">watch</span>(</span><br><span class=\"line\">    <span class=\"function\">() =&gt;</span> x.<span class=\"property\">value</span> + y.<span class=\"property\">value</span>,</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">sum</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`sum is <span class=\"subst\">$&#123;sum&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 多个数据源组成的数组</span></span><br><span class=\"line\"><span class=\"title function_\">watch</span>(</span><br><span class=\"line\">    [x, <span class=\"function\">() =&gt;</span> y.<span class=\"property\">value</span>],</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">[newX, newY], [oldX, oldY]</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`x is <span class=\"subst\">$&#123;newX&#125;</span> y is <span class=\"subst\">$&#123;newY&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"侦听响应式对象的属性值\"><a href=\"#侦听响应式对象的属性值\" class=\"headerlink\" title=\"侦听响应式对象的属性值\"></a>侦听响应式对象的属性值</h2><p>不能直接监听响应式对象的属性值，而是使用返回该属性的 getter 函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"title function_\">reactive</span>(&#123; <span class=\"attr\">count</span>: <span class=\"number\">0</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 错误，因为 obj.count 是一个 number</span></span><br><span class=\"line\"><span class=\"title function_\">watch</span>(obj.<span class=\"property\">count</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    .<span class=\"property\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`count is: <span class=\"subst\">$&#123;count&#125;</span>`</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 正确，使用一个 getter 函数</span></span><br><span class=\"line\"><span class=\"title function_\">watch</span>(</span><br><span class=\"line\">    <span class=\"function\">() =&gt;</span> obj.<span class=\"property\">count</span>,</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">count</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`count is: <span class=\"subst\">$&#123;count&#125;</span>`</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"深层侦听器\"><a href=\"#深层侦听器\" class=\"headerlink\" title=\"深层侦听器\"></a>深层侦听器</h2><p>给 watch 传响应式对象，会隐式创建深层监听器</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"title function_\">reactive</span>(&#123; <span class=\"attr\">count</span>: <span class=\"number\">0</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">watch</span>(obj, <span class=\"function\">(<span class=\"params\">newVal, oldVal</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"property\">count</span>++; <span class=\"comment\">// 属性变更时触发</span></span><br></pre></td></tr></table></figure>\n\n<p>返回一个响应对象的 getter 函数，只在返回不同对象时才会触发回调</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">watch</span>(</span><br><span class=\"line\">    <span class=\"function\">() =&gt;</span> source.<span class=\"property\">obj</span>,</span><br><span class=\"line\">    <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        ... <span class=\"comment\">// 仅当 test.obj 被替换时触发</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>可以显示添加 deep，转为深层侦听器</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">watch</span>(</span><br><span class=\"line\">    <span class=\"function\">() =&gt;</span> source.<span class=\"property\">obj</span>,</span><br><span class=\"line\">    <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        ... <span class=\"comment\">// 仅当 test.obj 被替换时触发</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">deep</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建时立即执行的侦听器\"><a href=\"#创建时立即执行的侦听器\" class=\"headerlink\" title=\"创建时立即执行的侦听器\"></a>创建时立即执行的侦听器</h2><p>创建侦听器时，立即执行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">watch</span>(source, </span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">newVal, oldVal</span>) =&gt;</span> &#123;&#125;, </span><br><span class=\"line\">    &#123; <span class=\"attr\">immediate</span>: <span class=\"literal\">true</span> &#125;);</span><br></pre></td></tr></table></figure>\n"},{"title":"vue3 组件基础","date":"2023-12-11T10:35:48.000Z","_content":"\n## 基础\n\n### 父传子\n\ndefineProps 是仅在 ```<script setup>``` 中可用的编译宏命令\n\n``` html\n<script setup>\ndefineProps(['title', 'content']);\n</script>\n\n<template>{{ title }}{{ content }}</template>\n```\n\n### 子传父\n\ndefineEmits 是仅在 ```<script setup>``` 中可用的编译宏命令\n\n``` html\n<script setup>\nconst emit = defineEmits('enlarge-text');\n\nemit('enlarg-text'); // 抛出事件\n</script>\n```\n\n## slot 插槽\n\n子组件：\n\n``` html\n<template>\n    <div class=\"child\">\n        <span>123</span>\n        <slot />\n    </div>\n</template>\n```\n\n父组件：\n\n``` html\n<template>\n    <child-component>\n        <span>hahaha<span>\n    </child-component>\n</template>\n```\n\n子组件渲染结果为：\n\n``` html\n<template>\n    <div class=\"child\">\n        <span>123</span>\n        <span>hahaha</span>\n    </div>\n</template>\n```\n\n## 子组件标签\n\n### 子组件有关闭标签\n\n父组件可以子组件传递 slot 内容\n\n``` html\n<my-component></my-component>\n```\n\n### 子组件无关闭标签\n\n父组件无法向子组件传递 slot 内容\n\n``` html\n<my-component />\n```\n\n## 动态组件\n\n通过 component 组件，和 :is 属性切换动态组件\n\n``` html\n<template>\n    <!-- 点击切换 tab -->\n    <button v-for=\"tab in tabs\" @click=\"curTab = tab\">\n       {{ tab }}\n    </button>\n    <!-- 动态组件 -->\n   <component :is=\"tabs[curTab]\"></component>\n</template>\n\n<script setup>\nimport Home from './Home.vue';\nimport Posts from './Posts.vue';\nimport Archive from './Archive.vue';\nimport { ref } from 'vue';\n\nconst curTab = ref('Home'); // 初始展示 Home 组件\n\nconst tabs = {\n    Home,\n    Posts,\n    Archive\n};\n</script>\n```\n\n## 元素位置限制\n\n某些元素对于放在其中的元素类型有限制：```<ul>, <ol>, <table>, <select>```\n\n某些元素仅在特定元素中才会显示：```<li>, <tr>, <option>```\n\n``` html\n<table>\n    <!-- 自定组件在 <table> 中不生效 -->\n    <post-row></post-row>\n</table>\n```\n\n解决方案（使用 is 属性）：\n\n``` html\n<table>\n    <tr is=\"vue:post-row\"></tr>\n</table>\n```\n","source":"_posts/14-vue3组件基础.md","raw":"---\ntitle: vue3 组件基础\ndate: 2023-12-11 18:35:48\ntags:\n    - vue3\n    - vue\ncategories:\n    - vue3\n      - 文档\n---\n\n## 基础\n\n### 父传子\n\ndefineProps 是仅在 ```<script setup>``` 中可用的编译宏命令\n\n``` html\n<script setup>\ndefineProps(['title', 'content']);\n</script>\n\n<template>{{ title }}{{ content }}</template>\n```\n\n### 子传父\n\ndefineEmits 是仅在 ```<script setup>``` 中可用的编译宏命令\n\n``` html\n<script setup>\nconst emit = defineEmits('enlarge-text');\n\nemit('enlarg-text'); // 抛出事件\n</script>\n```\n\n## slot 插槽\n\n子组件：\n\n``` html\n<template>\n    <div class=\"child\">\n        <span>123</span>\n        <slot />\n    </div>\n</template>\n```\n\n父组件：\n\n``` html\n<template>\n    <child-component>\n        <span>hahaha<span>\n    </child-component>\n</template>\n```\n\n子组件渲染结果为：\n\n``` html\n<template>\n    <div class=\"child\">\n        <span>123</span>\n        <span>hahaha</span>\n    </div>\n</template>\n```\n\n## 子组件标签\n\n### 子组件有关闭标签\n\n父组件可以子组件传递 slot 内容\n\n``` html\n<my-component></my-component>\n```\n\n### 子组件无关闭标签\n\n父组件无法向子组件传递 slot 内容\n\n``` html\n<my-component />\n```\n\n## 动态组件\n\n通过 component 组件，和 :is 属性切换动态组件\n\n``` html\n<template>\n    <!-- 点击切换 tab -->\n    <button v-for=\"tab in tabs\" @click=\"curTab = tab\">\n       {{ tab }}\n    </button>\n    <!-- 动态组件 -->\n   <component :is=\"tabs[curTab]\"></component>\n</template>\n\n<script setup>\nimport Home from './Home.vue';\nimport Posts from './Posts.vue';\nimport Archive from './Archive.vue';\nimport { ref } from 'vue';\n\nconst curTab = ref('Home'); // 初始展示 Home 组件\n\nconst tabs = {\n    Home,\n    Posts,\n    Archive\n};\n</script>\n```\n\n## 元素位置限制\n\n某些元素对于放在其中的元素类型有限制：```<ul>, <ol>, <table>, <select>```\n\n某些元素仅在特定元素中才会显示：```<li>, <tr>, <option>```\n\n``` html\n<table>\n    <!-- 自定组件在 <table> 中不生效 -->\n    <post-row></post-row>\n</table>\n```\n\n解决方案（使用 is 属性）：\n\n``` html\n<table>\n    <tr is=\"vue:post-row\"></tr>\n</table>\n```\n","slug":"14-vue3组件基础","published":1,"updated":"2023-12-26T03:20:49.576Z","_id":"clq0s4b7j00015dw62cca8kw4","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><h3 id=\"父传子\"><a href=\"#父传子\" class=\"headerlink\" title=\"父传子\"></a>父传子</h3><p>defineProps 是仅在 <code>&lt;script setup&gt;</code> 中可用的编译宏命令</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">defineProps</span>([<span class=\"string\">&#x27;title&#x27;</span>, <span class=\"string\">&#x27;content&#x27;</span>]);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span>&#123;&#123; title &#125;&#125;&#123;&#123; content &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"子传父\"><a href=\"#子传父\" class=\"headerlink\" title=\"子传父\"></a>子传父</h3><p>defineEmits 是仅在 <code>&lt;script setup&gt;</code> 中可用的编译宏命令</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> emit = <span class=\"title function_\">defineEmits</span>(<span class=\"string\">&#x27;enlarge-text&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">emit</span>(<span class=\"string\">&#x27;enlarg-text&#x27;</span>); <span class=\"comment\">// 抛出事件</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"slot-插槽\"><a href=\"#slot-插槽\" class=\"headerlink\" title=\"slot 插槽\"></a>slot 插槽</h2><p>子组件：</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;child&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">slot</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>父组件：</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">child-component</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>hahaha<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">child-component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>子组件渲染结果为：</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;child&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>hahaha<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"子组件标签\"><a href=\"#子组件标签\" class=\"headerlink\" title=\"子组件标签\"></a>子组件标签</h2><h3 id=\"子组件有关闭标签\"><a href=\"#子组件有关闭标签\" class=\"headerlink\" title=\"子组件有关闭标签\"></a>子组件有关闭标签</h3><p>父组件可以子组件传递 slot 内容</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"子组件无关闭标签\"><a href=\"#子组件无关闭标签\" class=\"headerlink\" title=\"子组件无关闭标签\"></a>子组件无关闭标签</h3><p>父组件无法向子组件传递 slot 内容</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> /&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"动态组件\"><a href=\"#动态组件\" class=\"headerlink\" title=\"动态组件\"></a>动态组件</h2><p>通过 component 组件，和 :is 属性切换动态组件</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 点击切换 tab --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;tab in tabs&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;curTab = tab&quot;</span>&gt;</span></span><br><span class=\"line\">       &#123;&#123; tab &#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 动态组件 --&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">&quot;tabs[curTab]&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> <span class=\"title class_\">Home</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Home.vue&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> <span class=\"title class_\">Posts</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Posts.vue&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> <span class=\"title class_\">Archive</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Archive.vue&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123; ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> curTab = <span class=\"title function_\">ref</span>(<span class=\"string\">&#x27;Home&#x27;</span>); <span class=\"comment\">// 初始展示 Home 组件</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> tabs = &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title class_\">Home</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title class_\">Posts</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title class_\">Archive</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"元素位置限制\"><a href=\"#元素位置限制\" class=\"headerlink\" title=\"元素位置限制\"></a>元素位置限制</h2><p>某些元素对于放在其中的元素类型有限制：<code>&lt;ul&gt;, &lt;ol&gt;, &lt;table&gt;, &lt;select&gt;</code></p>\n<p>某些元素仅在特定元素中才会显示：<code>&lt;li&gt;, &lt;tr&gt;, &lt;option&gt;</code></p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 自定组件在 &lt;table&gt; 中不生效 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">post-row</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">post-row</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>解决方案（使用 is 属性）：</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">is</span>=<span class=\"string\">&quot;vue:post-row&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><h3 id=\"父传子\"><a href=\"#父传子\" class=\"headerlink\" title=\"父传子\"></a>父传子</h3><p>defineProps 是仅在 <code>&lt;script setup&gt;</code> 中可用的编译宏命令</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">defineProps</span>([<span class=\"string\">&#x27;title&#x27;</span>, <span class=\"string\">&#x27;content&#x27;</span>]);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span>&#123;&#123; title &#125;&#125;&#123;&#123; content &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"子传父\"><a href=\"#子传父\" class=\"headerlink\" title=\"子传父\"></a>子传父</h3><p>defineEmits 是仅在 <code>&lt;script setup&gt;</code> 中可用的编译宏命令</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> emit = <span class=\"title function_\">defineEmits</span>(<span class=\"string\">&#x27;enlarge-text&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">emit</span>(<span class=\"string\">&#x27;enlarg-text&#x27;</span>); <span class=\"comment\">// 抛出事件</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"slot-插槽\"><a href=\"#slot-插槽\" class=\"headerlink\" title=\"slot 插槽\"></a>slot 插槽</h2><p>子组件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;child&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">slot</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>父组件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">child-component</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>hahaha<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">child-component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>子组件渲染结果为：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;child&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>123<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>hahaha<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"子组件标签\"><a href=\"#子组件标签\" class=\"headerlink\" title=\"子组件标签\"></a>子组件标签</h2><h3 id=\"子组件有关闭标签\"><a href=\"#子组件有关闭标签\" class=\"headerlink\" title=\"子组件有关闭标签\"></a>子组件有关闭标签</h3><p>父组件可以子组件传递 slot 内容</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"子组件无关闭标签\"><a href=\"#子组件无关闭标签\" class=\"headerlink\" title=\"子组件无关闭标签\"></a>子组件无关闭标签</h3><p>父组件无法向子组件传递 slot 内容</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"动态组件\"><a href=\"#动态组件\" class=\"headerlink\" title=\"动态组件\"></a>动态组件</h2><p>通过 component 组件，和 :is 属性切换动态组件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 点击切换 tab --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;tab in tabs&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;curTab = tab&quot;</span>&gt;</span></span><br><span class=\"line\">       &#123;&#123; tab &#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 动态组件 --&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">&quot;tabs[curTab]&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> <span class=\"title class_\">Home</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Home.vue&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> <span class=\"title class_\">Posts</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Posts.vue&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> <span class=\"title class_\">Archive</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Archive.vue&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123; ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> curTab = <span class=\"title function_\">ref</span>(<span class=\"string\">&#x27;Home&#x27;</span>); <span class=\"comment\">// 初始展示 Home 组件</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> tabs = &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title class_\">Home</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title class_\">Posts</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title class_\">Archive</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"元素位置限制\"><a href=\"#元素位置限制\" class=\"headerlink\" title=\"元素位置限制\"></a>元素位置限制</h2><p>某些元素对于放在其中的元素类型有限制：<code>&lt;ul&gt;, &lt;ol&gt;, &lt;table&gt;, &lt;select&gt;</code></p>\n<p>某些元素仅在特定元素中才会显示：<code>&lt;li&gt;, &lt;tr&gt;, &lt;option&gt;</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 自定组件在 &lt;table&gt; 中不生效 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">post-row</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">post-row</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>解决方案（使用 is 属性）：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">is</span>=<span class=\"string\">&quot;vue:post-row&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"vue3 模板引用","date":"2023-12-08T10:22:28.000Z","_content":"\n## 基础\n\n``` html\n<input ref=\"myInput\" />\n\n<script setup>\n    import { ref, onMounted } from 'vue';\n\n    const myInput = ref(null); // 必须和模版中的 ref 同名\n    \n    onMounted(() => {\n        myInput.value.focus(); // 自动聚焦\n    });\n</script>\n```\n\n只能在组件挂载后访问模板引用，因为初次渲染时模板引用为 null\n\n比如：\n\n``` js\nwatchEffect(() => {\n  if (input.value) {\n    input.value.focus()\n  } else {\n    // 此时还未挂载，或此元素已卸载（例如 v-if=false）\n  }\n})\n```\n\n## 列表引用\n\n``` html\n<script setup>\nimport { ref, onMounted } from 'vue';\n\nconst list = ref([\n    /* ... */\n]);\nconst itemRefs = ref([]);\nonMounted(() => {\n    console.log(itemRefs.value);\n});\n</script>\n\n<template>\n    <ul>\n        <li v-for=\"item in list\" ref=\"itemRefs\">{{ item }}</li>\n    </ul>\n</template>\n```\n\n## 函数模板引用\n\n每次组件更新时会调用 handleRef：\n\n``` html\n<input :ref=\"handleRef(el)\" />\n\n<script setup>\nconst handleRef = (el) => {\n    /*  将 el 赋给 ref 变量 */\n};\n</script>\n```\n\n## 组件上的 ref\n\n引用获得的值是组件实例：\n\n``` html\n<script setup>\nimport { ref, onMounted } from 'vue';\nimport Child from './Child.vue';\n\nconst child = ref(null);\nonMounted(() => {\n    // child.value 是 <Child/> 组件实例\n});\n</script>\n\n<template>\n    <Child ref=\"child\" />\n</template>\n```\n\n### 父组件对子组件访问权\n\n#### 1. 选项式 API 或 不使用 ```<script setup>```\n\n父组件对子组件的所有属性和方法有完全的访问权（大多情况下应使用 props 和 emit）。\n\n#### 2. 使用 ```<script setup>```\n\n子组件默认私有，除非子组件在其中通过 defineExpose 宏显示暴露。\n\n```html\n<script setup>\nimport { ref } from 'vue';\n\nconst a = 1, b = ref(2);\n\n// 编译器宏无需导入\ndefineExpose({\n    a,\n    b\n});\n</script>\n```\n","source":"_posts/13-vue3模板引用.md","raw":"---\ntitle: vue3 模板引用\ndate: 2023-12-08 18:22:28\ntags:\n    - vue3\n    - vue\ncategories:\n    - vue3\n      - 文档\n---\n\n## 基础\n\n``` html\n<input ref=\"myInput\" />\n\n<script setup>\n    import { ref, onMounted } from 'vue';\n\n    const myInput = ref(null); // 必须和模版中的 ref 同名\n    \n    onMounted(() => {\n        myInput.value.focus(); // 自动聚焦\n    });\n</script>\n```\n\n只能在组件挂载后访问模板引用，因为初次渲染时模板引用为 null\n\n比如：\n\n``` js\nwatchEffect(() => {\n  if (input.value) {\n    input.value.focus()\n  } else {\n    // 此时还未挂载，或此元素已卸载（例如 v-if=false）\n  }\n})\n```\n\n## 列表引用\n\n``` html\n<script setup>\nimport { ref, onMounted } from 'vue';\n\nconst list = ref([\n    /* ... */\n]);\nconst itemRefs = ref([]);\nonMounted(() => {\n    console.log(itemRefs.value);\n});\n</script>\n\n<template>\n    <ul>\n        <li v-for=\"item in list\" ref=\"itemRefs\">{{ item }}</li>\n    </ul>\n</template>\n```\n\n## 函数模板引用\n\n每次组件更新时会调用 handleRef：\n\n``` html\n<input :ref=\"handleRef(el)\" />\n\n<script setup>\nconst handleRef = (el) => {\n    /*  将 el 赋给 ref 变量 */\n};\n</script>\n```\n\n## 组件上的 ref\n\n引用获得的值是组件实例：\n\n``` html\n<script setup>\nimport { ref, onMounted } from 'vue';\nimport Child from './Child.vue';\n\nconst child = ref(null);\nonMounted(() => {\n    // child.value 是 <Child/> 组件实例\n});\n</script>\n\n<template>\n    <Child ref=\"child\" />\n</template>\n```\n\n### 父组件对子组件访问权\n\n#### 1. 选项式 API 或 不使用 ```<script setup>```\n\n父组件对子组件的所有属性和方法有完全的访问权（大多情况下应使用 props 和 emit）。\n\n#### 2. 使用 ```<script setup>```\n\n子组件默认私有，除非子组件在其中通过 defineExpose 宏显示暴露。\n\n```html\n<script setup>\nimport { ref } from 'vue';\n\nconst a = 1, b = ref(2);\n\n// 编译器宏无需导入\ndefineExpose({\n    a,\n    b\n});\n</script>\n```\n","slug":"13-vue3模板引用","published":1,"updated":"2023-12-26T03:20:54.089Z","_id":"clq0s4b7k00035dw6g57045bg","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;myInput&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">import</span> &#123; ref, onMounted &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> myInput = <span class=\"title function_\">ref</span>(<span class=\"literal\">null</span>); <span class=\"comment\">// 必须和模版中的 ref 同名</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">onMounted</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        myInput.<span class=\"property\">value</span>.<span class=\"title function_\">focus</span>(); <span class=\"comment\">// 自动聚焦</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>只能在组件挂载后访问模板引用，因为初次渲染时模板引用为 null</p>\n<p>比如：</p>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">watchEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (input.<span class=\"property\">value</span>) &#123;</span><br><span class=\"line\">    input.<span class=\"property\">value</span>.<span class=\"title function_\">focus</span>()</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 此时还未挂载，或此元素已卸载（例如 v-if=false）</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"列表引用\"><a href=\"#列表引用\" class=\"headerlink\" title=\"列表引用\"></a>列表引用</h2><div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123; ref, onMounted &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> list = <span class=\"title function_\">ref</span>([</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">/* ... */</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">]);</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> itemRefs = <span class=\"title function_\">ref</span>([]);</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">onMounted</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(itemRefs.<span class=\"property\">value</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;item in list&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;itemRefs&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"函数模板引用\"><a href=\"#函数模板引用\" class=\"headerlink\" title=\"函数模板引用\"></a>函数模板引用</h2><p>每次组件更新时会调用 handleRef：</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">:ref</span>=<span class=\"string\">&quot;handleRef(el)&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> <span class=\"title function_\">handleRef</span> = (<span class=\"params\">el</span>) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">/*  将 el 赋给 ref 变量 */</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"组件上的-ref\"><a href=\"#组件上的-ref\" class=\"headerlink\" title=\"组件上的 ref\"></a>组件上的 ref</h2><p>引用获得的值是组件实例：</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123; ref, onMounted &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> <span class=\"title class_\">Child</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Child.vue&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> child = <span class=\"title function_\">ref</span>(<span class=\"literal\">null</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">onMounted</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// child.value 是 &lt;Child/&gt; 组件实例</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Child</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;child&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"父组件对子组件访问权\"><a href=\"#父组件对子组件访问权\" class=\"headerlink\" title=\"父组件对子组件访问权\"></a>父组件对子组件访问权</h3><h4 id=\"1-选项式-API-或-不使用\"><a href=\"#1-选项式-API-或-不使用\" class=\"headerlink\" title=\"1. 选项式 API 或 不使用 &lt;script setup&gt;\"></a>1. 选项式 API 或 不使用 <code>&lt;script setup&gt;</code></h4><p>父组件对子组件的所有属性和方法有完全的访问权（大多情况下应使用 props 和 emit）。</p>\n<h4 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2. 使用 &lt;script setup&gt;\"></a>2. 使用 <code>&lt;script setup&gt;</code></h4><p>子组件默认私有，除非子组件在其中通过 defineExpose 宏显示暴露。</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123; ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> a = <span class=\"number\">1</span>, b = <span class=\"title function_\">ref</span>(<span class=\"number\">2</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"comment\">// 编译器宏无需导入</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">defineExpose</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    a,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    b</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;myInput&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">import</span> &#123; ref, onMounted &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> myInput = <span class=\"title function_\">ref</span>(<span class=\"literal\">null</span>); <span class=\"comment\">// 必须和模版中的 ref 同名</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">onMounted</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        myInput.<span class=\"property\">value</span>.<span class=\"title function_\">focus</span>(); <span class=\"comment\">// 自动聚焦</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>只能在组件挂载后访问模板引用，因为初次渲染时模板引用为 null</p>\n<p>比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">watchEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (input.<span class=\"property\">value</span>) &#123;</span><br><span class=\"line\">    input.<span class=\"property\">value</span>.<span class=\"title function_\">focus</span>()</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 此时还未挂载，或此元素已卸载（例如 v-if=false）</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"列表引用\"><a href=\"#列表引用\" class=\"headerlink\" title=\"列表引用\"></a>列表引用</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123; ref, onMounted &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> list = <span class=\"title function_\">ref</span>([</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">/* ... */</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">]);</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> itemRefs = <span class=\"title function_\">ref</span>([]);</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">onMounted</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(itemRefs.<span class=\"property\">value</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;item in list&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;itemRefs&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数模板引用\"><a href=\"#函数模板引用\" class=\"headerlink\" title=\"函数模板引用\"></a>函数模板引用</h2><p>每次组件更新时会调用 handleRef：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">:ref</span>=<span class=\"string\">&quot;handleRef(el)&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> <span class=\"title function_\">handleRef</span> = (<span class=\"params\">el</span>) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">/*  将 el 赋给 ref 变量 */</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"组件上的-ref\"><a href=\"#组件上的-ref\" class=\"headerlink\" title=\"组件上的 ref\"></a>组件上的 ref</h2><p>引用获得的值是组件实例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123; ref, onMounted &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> <span class=\"title class_\">Child</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Child.vue&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> child = <span class=\"title function_\">ref</span>(<span class=\"literal\">null</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">onMounted</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// child.value 是 &lt;Child/&gt; 组件实例</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Child</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;child&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"父组件对子组件访问权\"><a href=\"#父组件对子组件访问权\" class=\"headerlink\" title=\"父组件对子组件访问权\"></a>父组件对子组件访问权</h3><h4 id=\"1-选项式-API-或-不使用\"><a href=\"#1-选项式-API-或-不使用\" class=\"headerlink\" title=\"1. 选项式 API 或 不使用 &lt;script setup&gt;\"></a>1. 选项式 API 或 不使用 <code>&lt;script setup&gt;</code></h4><p>父组件对子组件的所有属性和方法有完全的访问权（大多情况下应使用 props 和 emit）。</p>\n<h4 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2. 使用 &lt;script setup&gt;\"></a>2. 使用 <code>&lt;script setup&gt;</code></h4><p>子组件默认私有，除非子组件在其中通过 defineExpose 宏显示暴露。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123; ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> a = <span class=\"number\">1</span>, b = <span class=\"title function_\">ref</span>(<span class=\"number\">2</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"comment\">// 编译器宏无需导入</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">defineExpose</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    a,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    b</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"vue3 组件注册","date":"2023-12-13T07:16:29.000Z","_content":"\n## 全局注册\n\n所有子组件可以使用全局注册的组件。\n\n使用 vue 应用实例的 .component() 方法：\n\n``` js\nimport { createApp } from 'vue';\nconst app = createApp({});\n\napp.component('myComponent',{\n    // 组件的实现\n});\n```\n\n对于单文件组件：\n\n``` js\nimport MyComponent from './App.vue'\n\napp.component('MyComponent', MyComponent);\n```\n\n链式：\n\n``` js\napp.\n    component('ComponentA', ComponentA).\n    component('ComponentB', ComponentB).\n    component('ComponentC', ComponentC);\n```\n\n## 局部注册\n\n### 优点\n\n1. tree-shaking：全局注册的组件，即使不用，也会出现在打包后的 JS 文件中；而局部注册会移除未使用的组件。\n2. 依赖关系明确：全局注册使大型项目中组件的依赖关系不够明确；而局部组件使组件间的依赖关系更加明确。\n","source":"_posts/15-vue3组件注册.md","raw":"---\ntitle: vue3 组件注册\ndate: 2023-12-13 15:16:29\ntags:\n    - vue3\n    - vue\ncategories:\n    - vue3\n      - 文档\n---\n\n## 全局注册\n\n所有子组件可以使用全局注册的组件。\n\n使用 vue 应用实例的 .component() 方法：\n\n``` js\nimport { createApp } from 'vue';\nconst app = createApp({});\n\napp.component('myComponent',{\n    // 组件的实现\n});\n```\n\n对于单文件组件：\n\n``` js\nimport MyComponent from './App.vue'\n\napp.component('MyComponent', MyComponent);\n```\n\n链式：\n\n``` js\napp.\n    component('ComponentA', ComponentA).\n    component('ComponentB', ComponentB).\n    component('ComponentC', ComponentC);\n```\n\n## 局部注册\n\n### 优点\n\n1. tree-shaking：全局注册的组件，即使不用，也会出现在打包后的 JS 文件中；而局部注册会移除未使用的组件。\n2. 依赖关系明确：全局注册使大型项目中组件的依赖关系不够明确；而局部组件使组件间的依赖关系更加明确。\n","slug":"15-vue3组件注册","published":1,"updated":"2023-12-26T03:20:46.992Z","_id":"clq6lxtzm0000lbw6bfszev06","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"全局注册\"><a href=\"#全局注册\" class=\"headerlink\" title=\"全局注册\"></a>全局注册</h2><p>所有子组件可以使用全局注册的组件。</p>\n<p>使用 vue 应用实例的 .component() 方法：</p>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">createApp</span>(&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">component</span>(<span class=\"string\">&#x27;myComponent&#x27;</span>,&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 组件的实现</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></div>\n\n<p>对于单文件组件：</p>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">MyComponent</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App.vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">component</span>(<span class=\"string\">&#x27;MyComponent&#x27;</span>, <span class=\"title class_\">MyComponent</span>);</span><br></pre></td></tr></table></figure></div>\n\n<p>链式：</p>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.</span><br><span class=\"line\">    <span class=\"title function_\">component</span>(<span class=\"string\">&#x27;ComponentA&#x27;</span>, <span class=\"title class_\">ComponentA</span>).</span><br><span class=\"line\">    <span class=\"title function_\">component</span>(<span class=\"string\">&#x27;ComponentB&#x27;</span>, <span class=\"title class_\">ComponentB</span>).</span><br><span class=\"line\">    <span class=\"title function_\">component</span>(<span class=\"string\">&#x27;ComponentC&#x27;</span>, <span class=\"title class_\">ComponentC</span>);</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"局部注册\"><a href=\"#局部注册\" class=\"headerlink\" title=\"局部注册\"></a>局部注册</h2><h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ol>\n<li>tree-shaking：全局注册的组件，即使不用，也会出现在打包后的 JS 文件中；而局部注册会移除未使用的组件。</li>\n<li>依赖关系明确：全局注册使大型项目中组件的依赖关系不够明确；而局部组件使组件间的依赖关系更加明确。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"全局注册\"><a href=\"#全局注册\" class=\"headerlink\" title=\"全局注册\"></a>全局注册</h2><p>所有子组件可以使用全局注册的组件。</p>\n<p>使用 vue 应用实例的 .component() 方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">createApp</span>(&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">component</span>(<span class=\"string\">&#x27;myComponent&#x27;</span>,&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 组件的实现</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>对于单文件组件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">MyComponent</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App.vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">component</span>(<span class=\"string\">&#x27;MyComponent&#x27;</span>, <span class=\"title class_\">MyComponent</span>);</span><br></pre></td></tr></table></figure>\n\n<p>链式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.</span><br><span class=\"line\">    <span class=\"title function_\">component</span>(<span class=\"string\">&#x27;ComponentA&#x27;</span>, <span class=\"title class_\">ComponentA</span>).</span><br><span class=\"line\">    <span class=\"title function_\">component</span>(<span class=\"string\">&#x27;ComponentB&#x27;</span>, <span class=\"title class_\">ComponentB</span>).</span><br><span class=\"line\">    <span class=\"title function_\">component</span>(<span class=\"string\">&#x27;ComponentC&#x27;</span>, <span class=\"title class_\">ComponentC</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"局部注册\"><a href=\"#局部注册\" class=\"headerlink\" title=\"局部注册\"></a>局部注册</h2><h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ol>\n<li>tree-shaking：全局注册的组件，即使不用，也会出现在打包后的 JS 文件中；而局部注册会移除未使用的组件。</li>\n<li>依赖关系明确：全局注册使大型项目中组件的依赖关系不够明确；而局部组件使组件间的依赖关系更加明确。</li>\n</ol>\n"},{"title":"vue3 props & emits","date":"2023-12-15T12:26:11.000Z","_content":"\n## props\n\n注意：props 为单向数据流，从父组件流子组件，所以不应该在子组件中修改 props。\n\n如有需要：\n\n1. 用另一个属性接收该 prop 的初始值；\n2. 基于该 prop 定义一个计算属性；\n3. 向父组件抛出一个事件。\n\n### 声明\n\n使用字符串数组：\n\n``` html\n<script setup>\nconst props = defineProps(['foo']);\n</script>\n```\n\n使用对象：\n\n``` html\n<script setup>\nconst props = defineProps({\n    title: String,\n    likes: Number\n});\n</script>\n```\n\n### 静态 prop\n\n除了静态字符串，都应该使用变量进行传递。\n\n``` html\n<BlogPost title=\"this is a title\" />\n\n<!-- <BlogPost :likes=\"42\" /> -->\n<BlogPost :likes=\"post.likes\" />\n\n<!-- <BlogPost is-published=\"true\" /> -->\n<BlogPost :is-published=\"post.isPublished\" />\n\n<!-- <BlogPost ids=\"[1, 2, 3]\" /> -->\n<BlogPost :ids=\"post.ids\" />\n\n<!-- <BlogPost author=\"{ name: 'Zoella', age: 22 }\" /> -->\n<BlogPost :author=\"post.author\" />\n```\n\n### 一个对象绑定多个 prop\n\n使用无参数的 v-bind，而不是 :prop-name\n\n``` js\nconst post = {\n    id: 1,\n    title: \"this is title\",\n};\n```\n\n``` html\n<BlogPost v-bind=\"post\" />\n```\n\n### prop 校验\n\n``` js\ndefineProps({\n  // 多种可能的类型检查（给出 `null` 和 `undefined` 值则会跳过任何类型检查）\n  propA: [String, Number],\n  // 必传，且为 String 类型，默认值为 'defualtVal'\n  propB: {\n    type: String,\n    required: true,\n    default: 'defaultVal'\n  },\n  // 对象类型的默认值\n  propC: {\n    type: Object,\n    // 对象或数组的默认值，必须从一个工厂函数返回。\n    // 该函数接收组件所接收的原始 prop 作为参数。\n    default(rawProps) {\n      return { message: 'hello' }\n    }\n  },\n  // 自定义类型校验函数\n  propD: {\n    validator(value) {\n      return ['success', 'warning', 'danger'].includes(value)\n    }\n  },\n  // 函数类型的默认值\n  propE: {\n    type: Function,\n    default() {\n      return 'Default function'\n    }\n  }\n});\n```\n\n### Boolean 类型转换\n\n``` js\ndefineProps({\n  disabled: Boolean\n});\n```\n\n使用时：\n\n``` html\n<!-- 等同于 <MyComponent :disabled=\"true\"></MyComponent> -->\n<MyComponent disabled></MyComponent>\n\n<!-- 等同于 <MyComponent :disabled=\"false\"></MyComponent> -->\n<MyComponent></MyComponent>\n```\n\n## emit\n\n### 事件校验\n\n``` html\n<script setup>\nconst emit = defineEmits({\n  // 无校验\n  click: null,\n\n  // 校验 submit 事件\n  submit: ({ email, password }) => {\n    if (email && password) {\n      return true;\n    } else {\n      console.warn('Invalid submit event payload!')\n      return false;\n    }\n  }\n});\n\nfunction submitForm(email, password) {\n  // 抛出 submit 事件，携带 email, password 参数\n  emit('submit', { email, password });\n}\n</script>\n```\n","source":"_posts/16-vue3 props & emits.md","raw":"---\ntitle: vue3 props & emits\ndate: 2023-12-15 20:26:11\ntags:\n    - vue3\n    - vue\ncategories:\n    - vue3\n      - 文档\n---\n\n## props\n\n注意：props 为单向数据流，从父组件流子组件，所以不应该在子组件中修改 props。\n\n如有需要：\n\n1. 用另一个属性接收该 prop 的初始值；\n2. 基于该 prop 定义一个计算属性；\n3. 向父组件抛出一个事件。\n\n### 声明\n\n使用字符串数组：\n\n``` html\n<script setup>\nconst props = defineProps(['foo']);\n</script>\n```\n\n使用对象：\n\n``` html\n<script setup>\nconst props = defineProps({\n    title: String,\n    likes: Number\n});\n</script>\n```\n\n### 静态 prop\n\n除了静态字符串，都应该使用变量进行传递。\n\n``` html\n<BlogPost title=\"this is a title\" />\n\n<!-- <BlogPost :likes=\"42\" /> -->\n<BlogPost :likes=\"post.likes\" />\n\n<!-- <BlogPost is-published=\"true\" /> -->\n<BlogPost :is-published=\"post.isPublished\" />\n\n<!-- <BlogPost ids=\"[1, 2, 3]\" /> -->\n<BlogPost :ids=\"post.ids\" />\n\n<!-- <BlogPost author=\"{ name: 'Zoella', age: 22 }\" /> -->\n<BlogPost :author=\"post.author\" />\n```\n\n### 一个对象绑定多个 prop\n\n使用无参数的 v-bind，而不是 :prop-name\n\n``` js\nconst post = {\n    id: 1,\n    title: \"this is title\",\n};\n```\n\n``` html\n<BlogPost v-bind=\"post\" />\n```\n\n### prop 校验\n\n``` js\ndefineProps({\n  // 多种可能的类型检查（给出 `null` 和 `undefined` 值则会跳过任何类型检查）\n  propA: [String, Number],\n  // 必传，且为 String 类型，默认值为 'defualtVal'\n  propB: {\n    type: String,\n    required: true,\n    default: 'defaultVal'\n  },\n  // 对象类型的默认值\n  propC: {\n    type: Object,\n    // 对象或数组的默认值，必须从一个工厂函数返回。\n    // 该函数接收组件所接收的原始 prop 作为参数。\n    default(rawProps) {\n      return { message: 'hello' }\n    }\n  },\n  // 自定义类型校验函数\n  propD: {\n    validator(value) {\n      return ['success', 'warning', 'danger'].includes(value)\n    }\n  },\n  // 函数类型的默认值\n  propE: {\n    type: Function,\n    default() {\n      return 'Default function'\n    }\n  }\n});\n```\n\n### Boolean 类型转换\n\n``` js\ndefineProps({\n  disabled: Boolean\n});\n```\n\n使用时：\n\n``` html\n<!-- 等同于 <MyComponent :disabled=\"true\"></MyComponent> -->\n<MyComponent disabled></MyComponent>\n\n<!-- 等同于 <MyComponent :disabled=\"false\"></MyComponent> -->\n<MyComponent></MyComponent>\n```\n\n## emit\n\n### 事件校验\n\n``` html\n<script setup>\nconst emit = defineEmits({\n  // 无校验\n  click: null,\n\n  // 校验 submit 事件\n  submit: ({ email, password }) => {\n    if (email && password) {\n      return true;\n    } else {\n      console.warn('Invalid submit event payload!')\n      return false;\n    }\n  }\n});\n\nfunction submitForm(email, password) {\n  // 抛出 submit 事件，携带 email, password 参数\n  emit('submit', { email, password });\n}\n</script>\n```\n","slug":"16-vue3 props & emits","published":1,"updated":"2023-12-21T12:34:08.105Z","_id":"clq6lxtzn0001lbw6flcf0gn4","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"props\"><a href=\"#props\" class=\"headerlink\" title=\"props\"></a>props</h2><p>注意：props 为单向数据流，从父组件流子组件，所以不应该在子组件中修改 props。</p>\n<p>如有需要：</p>\n<ol>\n<li>用另一个属性接收该 prop 的初始值；</li>\n<li>基于该 prop 定义一个计算属性；</li>\n<li>向父组件抛出一个事件。</li>\n</ol>\n<h3 id=\"声明\"><a href=\"#声明\" class=\"headerlink\" title=\"声明\"></a>声明</h3><p>使用字符串数组：</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> props = <span class=\"title function_\">defineProps</span>([<span class=\"string\">&#x27;foo&#x27;</span>]);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>使用对象：</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> props = <span class=\"title function_\">defineProps</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">title</span>: <span class=\"title class_\">String</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">likes</span>: <span class=\"title class_\">Number</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"静态-prop\"><a href=\"#静态-prop\" class=\"headerlink\" title=\"静态 prop\"></a>静态 prop</h3><p>除了静态字符串，都应该使用变量进行传递。</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">BlogPost</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;this is a title&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- &lt;BlogPost :likes=&quot;42&quot; /&gt; --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">BlogPost</span> <span class=\"attr\">:likes</span>=<span class=\"string\">&quot;post.likes&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- &lt;BlogPost is-published=&quot;true&quot; /&gt; --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">BlogPost</span> <span class=\"attr\">:is-published</span>=<span class=\"string\">&quot;post.isPublished&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- &lt;BlogPost ids=&quot;[1, 2, 3]&quot; /&gt; --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">BlogPost</span> <span class=\"attr\">:ids</span>=<span class=\"string\">&quot;post.ids&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- &lt;BlogPost author=&quot;&#123; name: &#x27;Zoella&#x27;, age: 22 &#125;&quot; /&gt; --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">BlogPost</span> <span class=\"attr\">:author</span>=<span class=\"string\">&quot;post.author&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"一个对象绑定多个-prop\"><a href=\"#一个对象绑定多个-prop\" class=\"headerlink\" title=\"一个对象绑定多个 prop\"></a>一个对象绑定多个 prop</h3><p>使用无参数的 v-bind，而不是 :prop-name</p>\n<div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> post = &#123;</span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">title</span>: <span class=\"string\">&quot;this is title&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></div>\n\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">BlogPost</span> <span class=\"attr\">v-bind</span>=<span class=\"string\">&quot;post&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"prop-校验\"><a href=\"#prop-校验\" class=\"headerlink\" title=\"prop 校验\"></a>prop 校验</h3><div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">defineProps</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 多种可能的类型检查（给出 `null` 和 `undefined` 值则会跳过任何类型检查）</span></span><br><span class=\"line\">  <span class=\"attr\">propA</span>: [<span class=\"title class_\">String</span>, <span class=\"title class_\">Number</span>],</span><br><span class=\"line\">  <span class=\"comment\">// 必传，且为 String 类型，默认值为 &#x27;defualtVal&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">propB</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"title class_\">String</span>,</span><br><span class=\"line\">    <span class=\"attr\">required</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">default</span>: <span class=\"string\">&#x27;defaultVal&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 对象类型的默认值</span></span><br><span class=\"line\">  <span class=\"attr\">propC</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"title class_\">Object</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 对象或数组的默认值，必须从一个工厂函数返回。</span></span><br><span class=\"line\">    <span class=\"comment\">// 该函数接收组件所接收的原始 prop 作为参数。</span></span><br><span class=\"line\">    <span class=\"title function_\">default</span>(<span class=\"params\">rawProps</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">message</span>: <span class=\"string\">&#x27;hello&#x27;</span> &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 自定义类型校验函数</span></span><br><span class=\"line\">  <span class=\"attr\">propD</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">validator</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;success&#x27;</span>, <span class=\"string\">&#x27;warning&#x27;</span>, <span class=\"string\">&#x27;danger&#x27;</span>].<span class=\"title function_\">includes</span>(value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 函数类型的默认值</span></span><br><span class=\"line\">  <span class=\"attr\">propE</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"title class_\">Function</span>,</span><br><span class=\"line\">    <span class=\"title function_\">default</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Default function&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"Boolean-类型转换\"><a href=\"#Boolean-类型转换\" class=\"headerlink\" title=\"Boolean 类型转换\"></a>Boolean 类型转换</h3><div class=\"highlight-container\" data-rel=\"Js\"><figure class=\"iseeu highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">defineProps</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">disabled</span>: <span class=\"title class_\">Boolean</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></div>\n\n<p>使用时：</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 等同于 &lt;MyComponent :disabled=&quot;true&quot;&gt;&lt;/MyComponent&gt; --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span> <span class=\"attr\">disabled</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">MyComponent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 等同于 &lt;MyComponent :disabled=&quot;false&quot;&gt;&lt;/MyComponent&gt; --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">MyComponent</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"emit\"><a href=\"#emit\" class=\"headerlink\" title=\"emit\"></a>emit</h2><h3 id=\"事件校验\"><a href=\"#事件校验\" class=\"headerlink\" title=\"事件校验\"></a>事件校验</h3><div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> emit = <span class=\"title function_\">defineEmits</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 无校验</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">click</span>: <span class=\"literal\">null</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 校验 submit 事件</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">submit</span>: <span class=\"function\">(<span class=\"params\">&#123; email, password &#125;</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">if</span> (email &amp;&amp; password) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">warn</span>(<span class=\"string\">&#x27;Invalid submit event payload!&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">function</span> <span class=\"title function_\">submitForm</span>(<span class=\"params\">email, password</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 抛出 submit 事件，携带 email, password 参数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">emit</span>(<span class=\"string\">&#x27;submit&#x27;</span>, &#123; email, password &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"props\"><a href=\"#props\" class=\"headerlink\" title=\"props\"></a>props</h2><p>注意：props 为单向数据流，从父组件流子组件，所以不应该在子组件中修改 props。</p>\n<p>如有需要：</p>\n<ol>\n<li>用另一个属性接收该 prop 的初始值；</li>\n<li>基于该 prop 定义一个计算属性；</li>\n<li>向父组件抛出一个事件。</li>\n</ol>\n<h3 id=\"声明\"><a href=\"#声明\" class=\"headerlink\" title=\"声明\"></a>声明</h3><p>使用字符串数组：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> props = <span class=\"title function_\">defineProps</span>([<span class=\"string\">&#x27;foo&#x27;</span>]);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用对象：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> props = <span class=\"title function_\">defineProps</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">title</span>: <span class=\"title class_\">String</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">likes</span>: <span class=\"title class_\">Number</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"静态-prop\"><a href=\"#静态-prop\" class=\"headerlink\" title=\"静态 prop\"></a>静态 prop</h3><p>除了静态字符串，都应该使用变量进行传递。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">BlogPost</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;this is a title&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- &lt;BlogPost :likes=&quot;42&quot; /&gt; --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">BlogPost</span> <span class=\"attr\">:likes</span>=<span class=\"string\">&quot;post.likes&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- &lt;BlogPost is-published=&quot;true&quot; /&gt; --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">BlogPost</span> <span class=\"attr\">:is-published</span>=<span class=\"string\">&quot;post.isPublished&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- &lt;BlogPost ids=&quot;[1, 2, 3]&quot; /&gt; --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">BlogPost</span> <span class=\"attr\">:ids</span>=<span class=\"string\">&quot;post.ids&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- &lt;BlogPost author=&quot;&#123; name: &#x27;Zoella&#x27;, age: 22 &#125;&quot; /&gt; --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">BlogPost</span> <span class=\"attr\">:author</span>=<span class=\"string\">&quot;post.author&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"一个对象绑定多个-prop\"><a href=\"#一个对象绑定多个-prop\" class=\"headerlink\" title=\"一个对象绑定多个 prop\"></a>一个对象绑定多个 prop</h3><p>使用无参数的 v-bind，而不是 :prop-name</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> post = &#123;</span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">title</span>: <span class=\"string\">&quot;this is title&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">BlogPost</span> <span class=\"attr\">v-bind</span>=<span class=\"string\">&quot;post&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"prop-校验\"><a href=\"#prop-校验\" class=\"headerlink\" title=\"prop 校验\"></a>prop 校验</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">defineProps</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 多种可能的类型检查（给出 `null` 和 `undefined` 值则会跳过任何类型检查）</span></span><br><span class=\"line\">  <span class=\"attr\">propA</span>: [<span class=\"title class_\">String</span>, <span class=\"title class_\">Number</span>],</span><br><span class=\"line\">  <span class=\"comment\">// 必传，且为 String 类型，默认值为 &#x27;defualtVal&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">propB</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"title class_\">String</span>,</span><br><span class=\"line\">    <span class=\"attr\">required</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">default</span>: <span class=\"string\">&#x27;defaultVal&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 对象类型的默认值</span></span><br><span class=\"line\">  <span class=\"attr\">propC</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"title class_\">Object</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 对象或数组的默认值，必须从一个工厂函数返回。</span></span><br><span class=\"line\">    <span class=\"comment\">// 该函数接收组件所接收的原始 prop 作为参数。</span></span><br><span class=\"line\">    <span class=\"title function_\">default</span>(<span class=\"params\">rawProps</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">message</span>: <span class=\"string\">&#x27;hello&#x27;</span> &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 自定义类型校验函数</span></span><br><span class=\"line\">  <span class=\"attr\">propD</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">validator</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;success&#x27;</span>, <span class=\"string\">&#x27;warning&#x27;</span>, <span class=\"string\">&#x27;danger&#x27;</span>].<span class=\"title function_\">includes</span>(value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 函数类型的默认值</span></span><br><span class=\"line\">  <span class=\"attr\">propE</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"title class_\">Function</span>,</span><br><span class=\"line\">    <span class=\"title function_\">default</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Default function&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Boolean-类型转换\"><a href=\"#Boolean-类型转换\" class=\"headerlink\" title=\"Boolean 类型转换\"></a>Boolean 类型转换</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">defineProps</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">disabled</span>: <span class=\"title class_\">Boolean</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>使用时：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 等同于 &lt;MyComponent :disabled=&quot;true&quot;&gt;&lt;/MyComponent&gt; --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span> <span class=\"attr\">disabled</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">MyComponent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 等同于 &lt;MyComponent :disabled=&quot;false&quot;&gt;&lt;/MyComponent&gt; --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">MyComponent</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"emit\"><a href=\"#emit\" class=\"headerlink\" title=\"emit\"></a>emit</h2><h3 id=\"事件校验\"><a href=\"#事件校验\" class=\"headerlink\" title=\"事件校验\"></a>事件校验</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> emit = <span class=\"title function_\">defineEmits</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 无校验</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">click</span>: <span class=\"literal\">null</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 校验 submit 事件</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">submit</span>: <span class=\"function\">(<span class=\"params\">&#123; email, password &#125;</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">if</span> (email &amp;&amp; password) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">warn</span>(<span class=\"string\">&#x27;Invalid submit event payload!&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">function</span> <span class=\"title function_\">submitForm</span>(<span class=\"params\">email, password</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 抛出 submit 事件，携带 email, password 参数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">emit</span>(<span class=\"string\">&#x27;submit&#x27;</span>, &#123; email, password &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"vue3 组件 v-model","date":"2023-12-15T12:27:47.000Z","_content":"\n## 基础\n\n父组件：\n\n``` html\n<CustomInput v-model=\"searchText\" />\n\n<!-- 被展开为： -->\n<!-- <CustomInput\n    :model-value=\"searchText\"\n    @update:model-value=\"newValue => searchText = newValue\" /> -->\n```\n\n子组件：\n\n在引用的子组件中使用 v-model 指令时，子组件的 modelValue prop 默认用于传递输入值，并且会触发名为 update:modelValue 的事件来更新该属性。\n\n``` html\n\n<script setup>\n// 声明属性 modelValue，这是父组件通过 v-model 传给当前组件的 prop\ndefineProps(['modelValue']);\n// 声明事件 update:modelValue，用于在当前组件中触发父组件的更新操作\ndefineEmits(['update:modelValue']);\n</script>\n\n<template>\n  <!-- 将 modelValue 作为其值，并在输入时触发 update:modelValue 事件 -->\n  <input\n    :value=\"modelValue\"\n    @input=\"$emit('update:modelValue', $event.target.value)\"\n  />\n</template>\n```\n\n## 如何更改默认名 modelValue\n\n父组件：\n\n``` html\n<MyComponent v-model:title=\"bookTitle\" />\n```\n\n子组件：\n\n``` html\n<!-- MyComponent.vue -->\n<script setup>\ndefineProps(['title']);\ndefineEmits(['update:title']);\n</script>\n\n<template>\n  <input\n    type=\"text\"\n    :value=\"title\"\n    @input=\"$emit('update:title', $event.target.value)\"\n  />\n</template>\n```\n\n## 自定义 v-model 修饰符\n\n创建一个自定义修饰符 capitalize，自动将 v-model 绑定输入字符串的第一个字母转为大写：\n\n``` html\n<MyComponent v-model.capitalize=\"myText\" />\n```\n\n``` html\n<script setup>\n// modelModifiers prop 包含了 capitalize 且其值为 true\n// 因为它在模板中的 v-model 绑定 v-model.capitalize=\"myText\" 上被使用了\nconst props = defineProps({\n    modelValue: String,\n    modelModifiers: {\n        default: () => ({}) // 默认值为空对象\n    },\n});\n\ndefineEmits(['update:modelValue']);\n\n// 将首字母大写\nfunction emitValue(e) {\n    let value = e.target.value;\n    if(props.modelModifiers.captialize) {\n        value = value.charAt(0).toUpperCase() + value.slice(1);\n    }\n    emit('update:modelValue', value);\n}\n</script>\n\n<template>\n    <!-- 每次 <input /> 元素触发 input 事件时触发 emitValue -->\n    <input\n        type=\"text\"\n        :value=\"modelValue\"\n        @input=\"emitValue\"\n    />\n</template>\n```\n\n### 带多个不同参数的 v-model 修饰符\n\n``` html\n<UserName\n    v-model:first-name.capitalize=\"first\"\n    v-model:last-name.uppercase=\"last\"\n/>\n```\n\n``` html\n<script setup>\nconst props = defineProps({\n    firstName: String,\n    lastName: String,\n    firstNameModifiers: {  // firstName + Modifiers\n        default: () => ({}) \n    },\n    lastNameModifiers: {  // lastName + Modifiers\n        default: () => ({})\n    },\n});\n\ndefineEmits(['update:firstName', 'update:lastName']);\n\nconsole.log(props.firstNameModifiers); // { calitalize: true }\nconsole.log(props.lastNameModifiers); // { uppercase: true }\n</script>\n```\n","source":"_posts/17-vue3组件v-model.md","raw":"---\ntitle: vue3 组件 v-model\ndate: 2023-12-15 20:27:47\ntags:\n    - vue3\n    - vue\ncategories:\n    - vue3\n      - 文档\n---\n\n## 基础\n\n父组件：\n\n``` html\n<CustomInput v-model=\"searchText\" />\n\n<!-- 被展开为： -->\n<!-- <CustomInput\n    :model-value=\"searchText\"\n    @update:model-value=\"newValue => searchText = newValue\" /> -->\n```\n\n子组件：\n\n在引用的子组件中使用 v-model 指令时，子组件的 modelValue prop 默认用于传递输入值，并且会触发名为 update:modelValue 的事件来更新该属性。\n\n``` html\n\n<script setup>\n// 声明属性 modelValue，这是父组件通过 v-model 传给当前组件的 prop\ndefineProps(['modelValue']);\n// 声明事件 update:modelValue，用于在当前组件中触发父组件的更新操作\ndefineEmits(['update:modelValue']);\n</script>\n\n<template>\n  <!-- 将 modelValue 作为其值，并在输入时触发 update:modelValue 事件 -->\n  <input\n    :value=\"modelValue\"\n    @input=\"$emit('update:modelValue', $event.target.value)\"\n  />\n</template>\n```\n\n## 如何更改默认名 modelValue\n\n父组件：\n\n``` html\n<MyComponent v-model:title=\"bookTitle\" />\n```\n\n子组件：\n\n``` html\n<!-- MyComponent.vue -->\n<script setup>\ndefineProps(['title']);\ndefineEmits(['update:title']);\n</script>\n\n<template>\n  <input\n    type=\"text\"\n    :value=\"title\"\n    @input=\"$emit('update:title', $event.target.value)\"\n  />\n</template>\n```\n\n## 自定义 v-model 修饰符\n\n创建一个自定义修饰符 capitalize，自动将 v-model 绑定输入字符串的第一个字母转为大写：\n\n``` html\n<MyComponent v-model.capitalize=\"myText\" />\n```\n\n``` html\n<script setup>\n// modelModifiers prop 包含了 capitalize 且其值为 true\n// 因为它在模板中的 v-model 绑定 v-model.capitalize=\"myText\" 上被使用了\nconst props = defineProps({\n    modelValue: String,\n    modelModifiers: {\n        default: () => ({}) // 默认值为空对象\n    },\n});\n\ndefineEmits(['update:modelValue']);\n\n// 将首字母大写\nfunction emitValue(e) {\n    let value = e.target.value;\n    if(props.modelModifiers.captialize) {\n        value = value.charAt(0).toUpperCase() + value.slice(1);\n    }\n    emit('update:modelValue', value);\n}\n</script>\n\n<template>\n    <!-- 每次 <input /> 元素触发 input 事件时触发 emitValue -->\n    <input\n        type=\"text\"\n        :value=\"modelValue\"\n        @input=\"emitValue\"\n    />\n</template>\n```\n\n### 带多个不同参数的 v-model 修饰符\n\n``` html\n<UserName\n    v-model:first-name.capitalize=\"first\"\n    v-model:last-name.uppercase=\"last\"\n/>\n```\n\n``` html\n<script setup>\nconst props = defineProps({\n    firstName: String,\n    lastName: String,\n    firstNameModifiers: {  // firstName + Modifiers\n        default: () => ({}) \n    },\n    lastNameModifiers: {  // lastName + Modifiers\n        default: () => ({})\n    },\n});\n\ndefineEmits(['update:firstName', 'update:lastName']);\n\nconsole.log(props.firstNameModifiers); // { calitalize: true }\nconsole.log(props.lastNameModifiers); // { uppercase: true }\n</script>\n```\n","slug":"17-vue3组件v-model","published":1,"updated":"2023-12-26T03:20:43.927Z","_id":"clq6lxtzo0003lbw63a4i1duv","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><p>父组件：</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">CustomInput</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;searchText&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 被展开为： --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- &lt;CustomInput</span></span><br><span class=\"line\"><span class=\"comment\">    :model-value=&quot;searchText&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    @update:model-value=&quot;newValue =&gt; searchText = newValue&quot; /&gt; --&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>子组件：</p>\n<p>在引用的子组件中使用 v-model 指令时，子组件的 modelValue prop 默认用于传递输入值，并且会触发名为 update:modelValue 的事件来更新该属性。</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"comment\">// 声明属性 modelValue，这是父组件通过 v-model 传给当前组件的 prop</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">defineProps</span>([<span class=\"string\">&#x27;modelValue&#x27;</span>]);</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"comment\">// 声明事件 update:modelValue，用于在当前组件中触发父组件的更新操作</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">defineEmits</span>([<span class=\"string\">&#x27;update:modelValue&#x27;</span>]);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 将 modelValue 作为其值，并在输入时触发 update:modelValue 事件 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:value</span>=<span class=\"string\">&quot;modelValue&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    @<span class=\"attr\">input</span>=<span class=\"string\">&quot;$emit(&#x27;update:modelValue&#x27;, $event.target.value)&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"如何更改默认名-modelValue\"><a href=\"#如何更改默认名-modelValue\" class=\"headerlink\" title=\"如何更改默认名 modelValue\"></a>如何更改默认名 modelValue</h2><p>父组件：</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span> <span class=\"attr\">v-model:title</span>=<span class=\"string\">&quot;bookTitle&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>子组件：</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- MyComponent.vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">defineProps</span>([<span class=\"string\">&#x27;title&#x27;</span>]);</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">defineEmits</span>([<span class=\"string\">&#x27;update:title&#x27;</span>]);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:value</span>=<span class=\"string\">&quot;title&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    @<span class=\"attr\">input</span>=<span class=\"string\">&quot;$emit(&#x27;update:title&#x27;, $event.target.value)&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"自定义-v-model-修饰符\"><a href=\"#自定义-v-model-修饰符\" class=\"headerlink\" title=\"自定义 v-model 修饰符\"></a>自定义 v-model 修饰符</h2><p>创建一个自定义修饰符 capitalize，自动将 v-model 绑定输入字符串的第一个字母转为大写：</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span> <span class=\"attr\">v-model.capitalize</span>=<span class=\"string\">&quot;myText&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"comment\">// modelModifiers prop 包含了 capitalize 且其值为 true</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"comment\">// 因为它在模板中的 v-model 绑定 v-model.capitalize=&quot;myText&quot; 上被使用了</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> props = <span class=\"title function_\">defineProps</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">modelValue</span>: <span class=\"title class_\">String</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">modelModifiers</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">default</span>: <span class=\"function\">() =&gt;</span> (&#123;&#125;) <span class=\"comment\">// 默认值为空对象</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">defineEmits</span>([<span class=\"string\">&#x27;update:modelValue&#x27;</span>]);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"comment\">// 将首字母大写</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">function</span> <span class=\"title function_\">emitValue</span>(<span class=\"params\">e</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> value = e.<span class=\"property\">target</span>.<span class=\"property\">value</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">if</span>(props.<span class=\"property\">modelModifiers</span>.<span class=\"property\">captialize</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        value = value.<span class=\"title function_\">charAt</span>(<span class=\"number\">0</span>).<span class=\"title function_\">toUpperCase</span>() + value.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">emit</span>(<span class=\"string\">&#x27;update:modelValue&#x27;</span>, value);</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 每次 &lt;input /&gt; 元素触发 input 事件时触发 emitValue --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:value</span>=<span class=\"string\">&quot;modelValue&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        @<span class=\"attr\">input</span>=<span class=\"string\">&quot;emitValue&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"带多个不同参数的-v-model-修饰符\"><a href=\"#带多个不同参数的-v-model-修饰符\" class=\"headerlink\" title=\"带多个不同参数的 v-model 修饰符\"></a>带多个不同参数的 v-model 修饰符</h3><div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">UserName</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-model:first-name.capitalize</span>=<span class=\"string\">&quot;first&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-model:last-name.uppercase</span>=<span class=\"string\">&quot;last&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> props = <span class=\"title function_\">defineProps</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">firstName</span>: <span class=\"title class_\">String</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">lastName</span>: <span class=\"title class_\">String</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">firstNameModifiers</span>: &#123;  <span class=\"comment\">// firstName + Modifiers</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">default</span>: <span class=\"function\">() =&gt;</span> (&#123;&#125;) </span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">lastNameModifiers</span>: &#123;  <span class=\"comment\">// lastName + Modifiers</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">default</span>: <span class=\"function\">() =&gt;</span> (&#123;&#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">defineEmits</span>([<span class=\"string\">&#x27;update:firstName&#x27;</span>, <span class=\"string\">&#x27;update:lastName&#x27;</span>]);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(props.<span class=\"property\">firstNameModifiers</span>); <span class=\"comment\">// &#123; calitalize: true &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(props.<span class=\"property\">lastNameModifiers</span>); <span class=\"comment\">// &#123; uppercase: true &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><p>父组件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">CustomInput</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;searchText&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 被展开为： --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- &lt;CustomInput</span></span><br><span class=\"line\"><span class=\"comment\">    :model-value=&quot;searchText&quot;</span></span><br><span class=\"line\"><span class=\"comment\">    @update:model-value=&quot;newValue =&gt; searchText = newValue&quot; /&gt; --&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>子组件：</p>\n<p>在引用的子组件中使用 v-model 指令时，子组件的 modelValue prop 默认用于传递输入值，并且会触发名为 update:modelValue 的事件来更新该属性。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"comment\">// 声明属性 modelValue，这是父组件通过 v-model 传给当前组件的 prop</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">defineProps</span>([<span class=\"string\">&#x27;modelValue&#x27;</span>]);</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"comment\">// 声明事件 update:modelValue，用于在当前组件中触发父组件的更新操作</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">defineEmits</span>([<span class=\"string\">&#x27;update:modelValue&#x27;</span>]);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 将 modelValue 作为其值，并在输入时触发 update:modelValue 事件 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:value</span>=<span class=\"string\">&quot;modelValue&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    @<span class=\"attr\">input</span>=<span class=\"string\">&quot;$emit(&#x27;update:modelValue&#x27;, $event.target.value)&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何更改默认名-modelValue\"><a href=\"#如何更改默认名-modelValue\" class=\"headerlink\" title=\"如何更改默认名 modelValue\"></a>如何更改默认名 modelValue</h2><p>父组件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span> <span class=\"attr\">v-model:title</span>=<span class=\"string\">&quot;bookTitle&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>子组件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- MyComponent.vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">defineProps</span>([<span class=\"string\">&#x27;title&#x27;</span>]);</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">defineEmits</span>([<span class=\"string\">&#x27;update:title&#x27;</span>]);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:value</span>=<span class=\"string\">&quot;title&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    @<span class=\"attr\">input</span>=<span class=\"string\">&quot;$emit(&#x27;update:title&#x27;, $event.target.value)&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自定义-v-model-修饰符\"><a href=\"#自定义-v-model-修饰符\" class=\"headerlink\" title=\"自定义 v-model 修饰符\"></a>自定义 v-model 修饰符</h2><p>创建一个自定义修饰符 capitalize，自动将 v-model 绑定输入字符串的第一个字母转为大写：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span> <span class=\"attr\">v-model.capitalize</span>=<span class=\"string\">&quot;myText&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"comment\">// modelModifiers prop 包含了 capitalize 且其值为 true</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"comment\">// 因为它在模板中的 v-model 绑定 v-model.capitalize=&quot;myText&quot; 上被使用了</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> props = <span class=\"title function_\">defineProps</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">modelValue</span>: <span class=\"title class_\">String</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">modelModifiers</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">default</span>: <span class=\"function\">() =&gt;</span> (&#123;&#125;) <span class=\"comment\">// 默认值为空对象</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">defineEmits</span>([<span class=\"string\">&#x27;update:modelValue&#x27;</span>]);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"comment\">// 将首字母大写</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">function</span> <span class=\"title function_\">emitValue</span>(<span class=\"params\">e</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> value = e.<span class=\"property\">target</span>.<span class=\"property\">value</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">if</span>(props.<span class=\"property\">modelModifiers</span>.<span class=\"property\">captialize</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        value = value.<span class=\"title function_\">charAt</span>(<span class=\"number\">0</span>).<span class=\"title function_\">toUpperCase</span>() + value.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">emit</span>(<span class=\"string\">&#x27;update:modelValue&#x27;</span>, value);</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 每次 &lt;input /&gt; 元素触发 input 事件时触发 emitValue --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:value</span>=<span class=\"string\">&quot;modelValue&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        @<span class=\"attr\">input</span>=<span class=\"string\">&quot;emitValue&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"带多个不同参数的-v-model-修饰符\"><a href=\"#带多个不同参数的-v-model-修饰符\" class=\"headerlink\" title=\"带多个不同参数的 v-model 修饰符\"></a>带多个不同参数的 v-model 修饰符</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">UserName</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-model:first-name.capitalize</span>=<span class=\"string\">&quot;first&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">v-model:last-name.uppercase</span>=<span class=\"string\">&quot;last&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> props = <span class=\"title function_\">defineProps</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">firstName</span>: <span class=\"title class_\">String</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">lastName</span>: <span class=\"title class_\">String</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">firstNameModifiers</span>: &#123;  <span class=\"comment\">// firstName + Modifiers</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">default</span>: <span class=\"function\">() =&gt;</span> (&#123;&#125;) </span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">lastNameModifiers</span>: &#123;  <span class=\"comment\">// lastName + Modifiers</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">default</span>: <span class=\"function\">() =&gt;</span> (&#123;&#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">defineEmits</span>([<span class=\"string\">&#x27;update:firstName&#x27;</span>, <span class=\"string\">&#x27;update:lastName&#x27;</span>]);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(props.<span class=\"property\">firstNameModifiers</span>); <span class=\"comment\">// &#123; calitalize: true &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(props.<span class=\"property\">lastNameModifiers</span>); <span class=\"comment\">// &#123; uppercase: true &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"vue3 继承 attributes","date":"2023-12-21T12:33:12.000Z","_content":"\n## 禁用 attributes 继承\n\n如果不想一个组件自动继承 attribute，可在组件选项中设置 ```inheritAttrs: false```\n\n``` html\n<script setup>\ndefineOptions({\n    inheritAttrs: false\n});\n</script>\n```\n\n透传进来的 attribute 可在模版的表达式中用 $attrs 访问：\n\n``` html\n<span>attribute: {{ $attrs }}</span>\n```\n\n### 示例\n\n常见的需要禁用 attribute 继承的场景是：attribute 需要应用在根节点以外的其他元素。\n\n比如：希望透传的 attribute 应用在内层的节点而非外层。\n\n``` html\n<div class='btn-wrapper'>\n    <button class='btn' v-bind=\"$attrs\">click me</button>\n</div>\n\n<script setup>\ndefineOptions({\n    inheritAttrs: false\n});\n</script>\n```\n\n## 多根节点的 attributes 继承\n\n需要显示绑定 $attrs，否则会有警告\n\n``` html\n<header>...</header>\n<main v-bind=\"$attrs\">...</main>\n<footer>...</footer>\n```\n\n## 在 JS 中访问透传的 attributes\n\n使用 useAttrs() API 访问组件的所有透传 attribute\n\n``` html\n<script setup>\nimport { useAttrs } from 'vue';\n\nconst attrs = useAttrs();\n</script>\n```\n\n但是这里的 attrs 对象不具有响应式，如有需要：\n\n（1）可使用 prop；\n\n（2）可使用 onUpdated() 在每次更新时获取最新的 attrs。\n","source":"_posts/18-vue3继承attributes.md","raw":"---\ntitle: vue3 继承 attributes\ndate: 2023-12-21 20:33:12\ntags:\n    - vue3\n    - vue\ncategories:\n    - vue3\n      - 文档\n---\n\n## 禁用 attributes 继承\n\n如果不想一个组件自动继承 attribute，可在组件选项中设置 ```inheritAttrs: false```\n\n``` html\n<script setup>\ndefineOptions({\n    inheritAttrs: false\n});\n</script>\n```\n\n透传进来的 attribute 可在模版的表达式中用 $attrs 访问：\n\n``` html\n<span>attribute: {{ $attrs }}</span>\n```\n\n### 示例\n\n常见的需要禁用 attribute 继承的场景是：attribute 需要应用在根节点以外的其他元素。\n\n比如：希望透传的 attribute 应用在内层的节点而非外层。\n\n``` html\n<div class='btn-wrapper'>\n    <button class='btn' v-bind=\"$attrs\">click me</button>\n</div>\n\n<script setup>\ndefineOptions({\n    inheritAttrs: false\n});\n</script>\n```\n\n## 多根节点的 attributes 继承\n\n需要显示绑定 $attrs，否则会有警告\n\n``` html\n<header>...</header>\n<main v-bind=\"$attrs\">...</main>\n<footer>...</footer>\n```\n\n## 在 JS 中访问透传的 attributes\n\n使用 useAttrs() API 访问组件的所有透传 attribute\n\n``` html\n<script setup>\nimport { useAttrs } from 'vue';\n\nconst attrs = useAttrs();\n</script>\n```\n\n但是这里的 attrs 对象不具有响应式，如有需要：\n\n（1）可使用 prop；\n\n（2）可使用 onUpdated() 在每次更新时获取最新的 attrs。\n","slug":"18-vue3继承attributes","published":1,"updated":"2023-12-26T03:20:40.887Z","_id":"clqls3vvi0003ovw65nlf8a3u","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"禁用-attributes-继承\"><a href=\"#禁用-attributes-继承\" class=\"headerlink\" title=\"禁用 attributes 继承\"></a>禁用 attributes 继承</h2><p>如果不想一个组件自动继承 attribute，可在组件选项中设置 <code>inheritAttrs: false</code></p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">defineOptions</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">inheritAttrs</span>: <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>透传进来的 attribute 可在模版的表达式中用 $attrs 访问：</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>attribute: &#123;&#123; $attrs &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>常见的需要禁用 attribute 继承的场景是：attribute 需要应用在根节点以外的其他元素。</p>\n<p>比如：希望透传的 attribute 应用在内层的节点而非外层。</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;btn-wrapper&#x27;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;btn&#x27;</span> <span class=\"attr\">v-bind</span>=<span class=\"string\">&quot;$attrs&quot;</span>&gt;</span>click me<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">defineOptions</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">inheritAttrs</span>: <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"多根节点的-attributes-继承\"><a href=\"#多根节点的-attributes-继承\" class=\"headerlink\" title=\"多根节点的 attributes 继承\"></a>多根节点的 attributes 继承</h2><p>需要显示绑定 $attrs，否则会有警告</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">main</span> <span class=\"attr\">v-bind</span>=<span class=\"string\">&quot;$attrs&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"在-JS-中访问透传的-attributes\"><a href=\"#在-JS-中访问透传的-attributes\" class=\"headerlink\" title=\"在 JS 中访问透传的 attributes\"></a>在 JS 中访问透传的 attributes</h2><p>使用 useAttrs() API 访问组件的所有透传 attribute</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123; useAttrs &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> attrs = <span class=\"title function_\">useAttrs</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>但是这里的 attrs 对象不具有响应式，如有需要：</p>\n<p>（1）可使用 prop；</p>\n<p>（2）可使用 onUpdated() 在每次更新时获取最新的 attrs。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"禁用-attributes-继承\"><a href=\"#禁用-attributes-继承\" class=\"headerlink\" title=\"禁用 attributes 继承\"></a>禁用 attributes 继承</h2><p>如果不想一个组件自动继承 attribute，可在组件选项中设置 <code>inheritAttrs: false</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">defineOptions</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">inheritAttrs</span>: <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>透传进来的 attribute 可在模版的表达式中用 $attrs 访问：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>attribute: &#123;&#123; $attrs &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>常见的需要禁用 attribute 继承的场景是：attribute 需要应用在根节点以外的其他元素。</p>\n<p>比如：希望透传的 attribute 应用在内层的节点而非外层。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;btn-wrapper&#x27;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;btn&#x27;</span> <span class=\"attr\">v-bind</span>=<span class=\"string\">&quot;$attrs&quot;</span>&gt;</span>click me<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">defineOptions</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">inheritAttrs</span>: <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多根节点的-attributes-继承\"><a href=\"#多根节点的-attributes-继承\" class=\"headerlink\" title=\"多根节点的 attributes 继承\"></a>多根节点的 attributes 继承</h2><p>需要显示绑定 $attrs，否则会有警告</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">main</span> <span class=\"attr\">v-bind</span>=<span class=\"string\">&quot;$attrs&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在-JS-中访问透传的-attributes\"><a href=\"#在-JS-中访问透传的-attributes\" class=\"headerlink\" title=\"在 JS 中访问透传的 attributes\"></a>在 JS 中访问透传的 attributes</h2><p>使用 useAttrs() API 访问组件的所有透传 attribute</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123; useAttrs &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> attrs = <span class=\"title function_\">useAttrs</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>但是这里的 attrs 对象不具有响应式，如有需要：</p>\n<p>（1）可使用 prop；</p>\n<p>（2）可使用 onUpdated() 在每次更新时获取最新的 attrs。</p>\n"},{"title":"vue 插槽","date":"2023-12-26T03:18:09.000Z","_content":"\n## 基础\n\n插槽内容可以为文本、模版、组件\n\n``` html\n<!-- 父组件 -->\n<FancyButton>\n  Click me! <!-- 插槽内容 -->\n</FancyButton>\n```\n\n``` html\n<!-- 子组件 -->\n<button class=\"fancy-btn\">\n  <slot></slot> <!-- 插槽出口 -->\n</button>\n```\n\n渲染结果：\n\n``` html\n<button class=\"fancy-btn\">Click me!</button>\n```\n\n## 默认内容\n\n子组件的 ```<slot></slot>``` 标签之间是默认值\n\n``` html\n<button type=\"submit\">\n  <slot>Submit</slot> <!-- 默认内容 -->\n</button>\n```\n\n## 具名插槽\n\n当一个组件包含多个插槽出口时，需要使用 name 来给各个插槽分配唯一的 ID，没有提供 name 的插槽会隐式地命名为“default”。\n\n``` html\n<!-- 子组件 -->\n<div class=\"container\">\n  <header>\n    <slot name=\"header\"></slot>\n  </header>\n  <main>\n    <slot></slot> <!-- name 为 default -->\n  </main>\n  <footer>\n    <slot name=\"footer\"></slot>\n  </footer>\n</div>\n```\n\n在父组件中，使用 v-slot 或者 # 加上插槽名，来指定插槽内容。\n\n``` html\n<!-- 父组件 -->\n<BaseLayout>\n  <template v-slot:header>\n    <!-- header 插槽的内容 -->\n  </template>\n  <template #footer>\n    <!-- footer 插槽的内容 -->\n  </template>\n</BaseLayout>\n```\n\n## 动态插槽名\n\n可定义动态插槽名：\n\n``` html\n<base-layout>\n  <template v-slot:[dynamicSlotName]>\n  </template>\n\n  <!-- 缩写 -->\n  <template #[dynamicSlotName]>\n    ...\n  </template>\n</base-layout>\n```\n\n## 作用域插槽\n\n可以向插槽出口传递 attributes\n\n### 默认插槽\n\n``` html\n<!-- 子组件 -->\n<div>\n    <slot :text=\"message\" :count=\"1\"></slot>\n</div>\n```\n\n``` html\n<!-- 父组件 -->\n<MyComponent v-slot=\"slotProps\">\n    {{ slotProps.text }} {{ slotProps.count }}\n</MyComponent>\n\n<!-- 或者 -->\n<MyComponent v-slot=\"{ text, count }\">\n    {{ text }} {{ count }}\n</MyComponent>\n```\n\n### 具名插槽\n\n``` html\n<!-- 父组件 -->\n<MyComponent>\n  <template #header=\"headerProps\">\n    {{ headerProps }}\n  </template>\n\n  <!-- 不缩写 -->\n  <template v-slot:default=\"defaultProps\">\n    {{ defaultProps }}\n  </template>\n\n  <template #footer=\"footerProps\">\n    {{ footerProps }}\n  </template>\n</MyComponent>\n```\n\n``` html\n<!-- 子组件 -->\n<slot name=\"header\" :msg1=\"hello1\"></slot>\n<slot :msg2=\"hello2\"></slot> <!-- name 为 default -->\n<slot name=\"header\" :msg3=\"hello3\"></slot>\n```\n","source":"_posts/19-vue插槽.md","raw":"---\ntitle: vue 插槽\ndate: 2023-12-26 11:18:09\ntags:\n    - vue\ncategories:\n    - vue\n      - 文档\n---\n\n## 基础\n\n插槽内容可以为文本、模版、组件\n\n``` html\n<!-- 父组件 -->\n<FancyButton>\n  Click me! <!-- 插槽内容 -->\n</FancyButton>\n```\n\n``` html\n<!-- 子组件 -->\n<button class=\"fancy-btn\">\n  <slot></slot> <!-- 插槽出口 -->\n</button>\n```\n\n渲染结果：\n\n``` html\n<button class=\"fancy-btn\">Click me!</button>\n```\n\n## 默认内容\n\n子组件的 ```<slot></slot>``` 标签之间是默认值\n\n``` html\n<button type=\"submit\">\n  <slot>Submit</slot> <!-- 默认内容 -->\n</button>\n```\n\n## 具名插槽\n\n当一个组件包含多个插槽出口时，需要使用 name 来给各个插槽分配唯一的 ID，没有提供 name 的插槽会隐式地命名为“default”。\n\n``` html\n<!-- 子组件 -->\n<div class=\"container\">\n  <header>\n    <slot name=\"header\"></slot>\n  </header>\n  <main>\n    <slot></slot> <!-- name 为 default -->\n  </main>\n  <footer>\n    <slot name=\"footer\"></slot>\n  </footer>\n</div>\n```\n\n在父组件中，使用 v-slot 或者 # 加上插槽名，来指定插槽内容。\n\n``` html\n<!-- 父组件 -->\n<BaseLayout>\n  <template v-slot:header>\n    <!-- header 插槽的内容 -->\n  </template>\n  <template #footer>\n    <!-- footer 插槽的内容 -->\n  </template>\n</BaseLayout>\n```\n\n## 动态插槽名\n\n可定义动态插槽名：\n\n``` html\n<base-layout>\n  <template v-slot:[dynamicSlotName]>\n  </template>\n\n  <!-- 缩写 -->\n  <template #[dynamicSlotName]>\n    ...\n  </template>\n</base-layout>\n```\n\n## 作用域插槽\n\n可以向插槽出口传递 attributes\n\n### 默认插槽\n\n``` html\n<!-- 子组件 -->\n<div>\n    <slot :text=\"message\" :count=\"1\"></slot>\n</div>\n```\n\n``` html\n<!-- 父组件 -->\n<MyComponent v-slot=\"slotProps\">\n    {{ slotProps.text }} {{ slotProps.count }}\n</MyComponent>\n\n<!-- 或者 -->\n<MyComponent v-slot=\"{ text, count }\">\n    {{ text }} {{ count }}\n</MyComponent>\n```\n\n### 具名插槽\n\n``` html\n<!-- 父组件 -->\n<MyComponent>\n  <template #header=\"headerProps\">\n    {{ headerProps }}\n  </template>\n\n  <!-- 不缩写 -->\n  <template v-slot:default=\"defaultProps\">\n    {{ defaultProps }}\n  </template>\n\n  <template #footer=\"footerProps\">\n    {{ footerProps }}\n  </template>\n</MyComponent>\n```\n\n``` html\n<!-- 子组件 -->\n<slot name=\"header\" :msg1=\"hello1\"></slot>\n<slot :msg2=\"hello2\"></slot> <!-- name 为 default -->\n<slot name=\"header\" :msg3=\"hello3\"></slot>\n```\n","slug":"19-vue插槽","published":1,"updated":"2023-12-26T07:04:58.886Z","_id":"clqls3vvj0005ovw662xr0l17","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><p>插槽内容可以为文本、模版、组件</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 父组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">FancyButton</span>&gt;</span></span><br><span class=\"line\">  Click me! <span class=\"comment\">&lt;!-- 插槽内容 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">FancyButton</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 子组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fancy-btn&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span> <span class=\"comment\">&lt;!-- 插槽出口 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>渲染结果：</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fancy-btn&quot;</span>&gt;</span>Click me!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"默认内容\"><a href=\"#默认内容\" class=\"headerlink\" title=\"默认内容\"></a>默认内容</h2><p>子组件的 <code>&lt;slot&gt;&lt;/slot&gt;</code> 标签之间是默认值</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span> <span class=\"comment\">&lt;!-- 默认内容 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"具名插槽\"><a href=\"#具名插槽\" class=\"headerlink\" title=\"具名插槽\"></a>具名插槽</h2><p>当一个组件包含多个插槽出口时，需要使用 name 来给各个插槽分配唯一的 ID，没有提供 name 的插槽会隐式地命名为“default”。</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 子组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;header&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span> <span class=\"comment\">&lt;!-- name 为 default --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;footer&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<p>在父组件中，使用 v-slot 或者 # 加上插槽名，来指定插槽内容。</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 父组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">BaseLayout</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- header 插槽的内容 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- footer 插槽的内容 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">BaseLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"动态插槽名\"><a href=\"#动态插槽名\" class=\"headerlink\" title=\"动态插槽名\"></a>动态插槽名</h2><p>可定义动态插槽名：</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">base-layout</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:</span>[<span class=\"attr\">dynamicSlotName</span>]&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 缩写 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> #[<span class=\"attr\">dynamicSlotName</span>]&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">base-layout</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"作用域插槽\"><a href=\"#作用域插槽\" class=\"headerlink\" title=\"作用域插槽\"></a>作用域插槽</h2><p>可以向插槽出口传递 attributes</p>\n<h3 id=\"默认插槽\"><a href=\"#默认插槽\" class=\"headerlink\" title=\"默认插槽\"></a>默认插槽</h3><div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 子组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">:text</span>=<span class=\"string\">&quot;message&quot;</span> <span class=\"attr\">:count</span>=<span class=\"string\">&quot;1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 父组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span> <span class=\"attr\">v-slot</span>=<span class=\"string\">&quot;slotProps&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; slotProps.text &#125;&#125; &#123;&#123; slotProps.count &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">MyComponent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 或者 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span> <span class=\"attr\">v-slot</span>=<span class=\"string\">&quot;&#123; text, count &#125;&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; text &#125;&#125; &#123;&#123; count &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">MyComponent</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"具名插槽-1\"><a href=\"#具名插槽-1\" class=\"headerlink\" title=\"具名插槽\"></a>具名插槽</h3><div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 父组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">header</span>=<span class=\"string\">&quot;headerProps&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; headerProps &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 不缩写 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:default</span>=<span class=\"string\">&quot;defaultProps&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; defaultProps &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">footer</span>=<span class=\"string\">&quot;footerProps&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; footerProps &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">MyComponent</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 子组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;header&quot;</span> <span class=\"attr\">:msg1</span>=<span class=\"string\">&quot;hello1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">:msg2</span>=<span class=\"string\">&quot;hello2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span> <span class=\"comment\">&lt;!-- name 为 default --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;header&quot;</span> <span class=\"attr\">:msg3</span>=<span class=\"string\">&quot;hello3&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><p>插槽内容可以为文本、模版、组件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 父组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">FancyButton</span>&gt;</span></span><br><span class=\"line\">  Click me! <span class=\"comment\">&lt;!-- 插槽内容 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">FancyButton</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 子组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fancy-btn&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span> <span class=\"comment\">&lt;!-- 插槽出口 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>渲染结果：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fancy-btn&quot;</span>&gt;</span>Click me!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"默认内容\"><a href=\"#默认内容\" class=\"headerlink\" title=\"默认内容\"></a>默认内容</h2><p>子组件的 <code>&lt;slot&gt;&lt;/slot&gt;</code> 标签之间是默认值</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span>Submit<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span> <span class=\"comment\">&lt;!-- 默认内容 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"具名插槽\"><a href=\"#具名插槽\" class=\"headerlink\" title=\"具名插槽\"></a>具名插槽</h2><p>当一个组件包含多个插槽出口时，需要使用 name 来给各个插槽分配唯一的 ID，没有提供 name 的插槽会隐式地命名为“default”。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 子组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;header&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span> <span class=\"comment\">&lt;!-- name 为 default --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;footer&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在父组件中，使用 v-slot 或者 # 加上插槽名，来指定插槽内容。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 父组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">BaseLayout</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- header 插槽的内容 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- footer 插槽的内容 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">BaseLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"动态插槽名\"><a href=\"#动态插槽名\" class=\"headerlink\" title=\"动态插槽名\"></a>动态插槽名</h2><p>可定义动态插槽名：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">base-layout</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:</span>[<span class=\"attr\">dynamicSlotName</span>]&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 缩写 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> #[<span class=\"attr\">dynamicSlotName</span>]&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">base-layout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"作用域插槽\"><a href=\"#作用域插槽\" class=\"headerlink\" title=\"作用域插槽\"></a>作用域插槽</h2><p>可以向插槽出口传递 attributes</p>\n<h3 id=\"默认插槽\"><a href=\"#默认插槽\" class=\"headerlink\" title=\"默认插槽\"></a>默认插槽</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 子组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">:text</span>=<span class=\"string\">&quot;message&quot;</span> <span class=\"attr\">:count</span>=<span class=\"string\">&quot;1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 父组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span> <span class=\"attr\">v-slot</span>=<span class=\"string\">&quot;slotProps&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; slotProps.text &#125;&#125; &#123;&#123; slotProps.count &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">MyComponent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 或者 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span> <span class=\"attr\">v-slot</span>=<span class=\"string\">&quot;&#123; text, count &#125;&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; text &#125;&#125; &#123;&#123; count &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">MyComponent</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"具名插槽-1\"><a href=\"#具名插槽-1\" class=\"headerlink\" title=\"具名插槽\"></a>具名插槽</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 父组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">header</span>=<span class=\"string\">&quot;headerProps&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; headerProps &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 不缩写 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:default</span>=<span class=\"string\">&quot;defaultProps&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; defaultProps &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">footer</span>=<span class=\"string\">&quot;footerProps&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; footerProps &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">MyComponent</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 子组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;header&quot;</span> <span class=\"attr\">:msg1</span>=<span class=\"string\">&quot;hello1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">:msg2</span>=<span class=\"string\">&quot;hello2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span> <span class=\"comment\">&lt;!-- name 为 default --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;header&quot;</span> <span class=\"attr\">:msg3</span>=<span class=\"string\">&quot;hello3&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"vue3 依赖注入","date":"2023-12-28T03:02:35.000Z","_content":"\n## props 逐级透传\n\n深层子组件需要较远的祖先组件中的部分数据，使用 props 逐级传递很麻烦：\n\n<img src=\"https://cn.vuejs.org/assets/prop-drilling.FyV2vFBP.png\" />\n\n\n## provide（提供）\n\n为组件后代提供数据，使用 provide() 函数：\n\n``` html\n<script setup>\nimport { provide } from 'vue';\n\nprovide(/* 注入名 */'message', /* 注入值 */'value');\n</script>\n```\n\n","source":"_posts/20-vue3依赖注入.md","raw":"---\ntitle: vue3 依赖注入\ndate: 2023-12-28 11:02:35\ntags:\n    - vue3\n    - vue\ncategories:\n    - vue3\n      - 文档\n---\n\n## props 逐级透传\n\n深层子组件需要较远的祖先组件中的部分数据，使用 props 逐级传递很麻烦：\n\n<img src=\"https://cn.vuejs.org/assets/prop-drilling.FyV2vFBP.png\" />\n\n\n## provide（提供）\n\n为组件后代提供数据，使用 provide() 函数：\n\n``` html\n<script setup>\nimport { provide } from 'vue';\n\nprovide(/* 注入名 */'message', /* 注入值 */'value');\n</script>\n```\n\n","slug":"20-vue3依赖注入","published":1,"updated":"2024-01-12T09:18:16.844Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm22ma9wx00009zw6ctwyamrt","content":"<h2 id=\"props-逐级透传\"><a href=\"#props-逐级透传\" class=\"headerlink\" title=\"props 逐级透传\"></a>props 逐级透传</h2><p>深层子组件需要较远的祖先组件中的部分数据，使用 props 逐级传递很麻烦：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cn.vuejs.org/assets/prop-drilling.FyV2vFBP.png\"\n                      \n                >\n\n\n<h2 id=\"provide（提供）\"><a href=\"#provide（提供）\" class=\"headerlink\" title=\"provide（提供）\"></a>provide（提供）</h2><p>为组件后代提供数据，使用 provide() 函数：</p>\n<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123; provide &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">provide</span>(<span class=\"comment\">/* 注入名 */</span><span class=\"string\">&#x27;message&#x27;</span>, <span class=\"comment\">/* 注入值 */</span><span class=\"string\">&#x27;value&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"props-逐级透传\"><a href=\"#props-逐级透传\" class=\"headerlink\" title=\"props 逐级透传\"></a>props 逐级透传</h2><p>深层子组件需要较远的祖先组件中的部分数据，使用 props 逐级传递很麻烦：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cn.vuejs.org/assets/prop-drilling.FyV2vFBP.png\"\n                      \n                >\n\n\n<h2 id=\"provide（提供）\"><a href=\"#provide（提供）\" class=\"headerlink\" title=\"provide（提供）\"></a>provide（提供）</h2><p>为组件后代提供数据，使用 provide() 函数：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123; provide &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">provide</span>(<span class=\"comment\">/* 注入名 */</span><span class=\"string\">&#x27;message&#x27;</span>, <span class=\"comment\">/* 注入值 */</span><span class=\"string\">&#x27;value&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"浏览器输入url后发生了什么","date":"2024-10-10T01:22:10.000Z","_content":"\n## 1. URL解析\n\n用户输入的URL（例如 `https://www.example.com/index.html`）首先被浏览器解析，该过程包括：\n\n- 提取协议（如HTTP或HTTPS）\n- 主机名（如www.example.com）\n- 端口\n- 路径（如/index.html）\n- 查询参数\n- 锚点\n\n详见：\n\n- [浏览器解析url过程](./22-浏览器解析url过程.md)\n\n## 2. DNS 查询\n\n浏览器需要将域名转换为IP地址，以便进行网络通信。\n此时，浏览器会查找本地DNS缓存，如果没有找到，就会向系统的DNS服务器发送请求。DNS服务器将返回对应的IP地址。\n\n详见：\n\n- [DNS](./25-DNS.md)\n- [CDN](./26-CDN.md)\n\n## 3. TCP连接\n\n一旦获得了IP地址，浏览器通过TCP（传输控制协议）建立与目标服务器的连接。\n对于HTTPS请求，还需要进行SSL/TLS握手，以确保安全性。这一过程包括：\n\n- 客户端向服务器发送连接请求\n- 服务器确认并建立连接\n- 进行SSL/TLS证书验证以及协商加密算法\n\n## 4. 发送HTTP请求\n\n连接建立后，浏览器构建一个HTTP请求并发送到服务器。这个请求包含：\n\n- 请求行（例如 GET /index.html HTTP/1.1）\n- 请求头（例如用户代理、接受类型等信息）\n- 请求体（对于POST请求，可能包含数据）\n\n## 5. 服务器处理请求\n\n服务器接收到请求后，会根据请求的内容进行处理。它可能会查找文件、访问数据库或者执行其他逻辑，最终生成一个HTTP响应。\n\n## 6. 接收HTTP响应\n\n服务器发送回HTTP响应，包含状态码（如200表示成功，404表示未找到），响应头（如内容类型、内容长度等）和响应体（实际请求资源的内容，如HTML文档）。\n\n## 7. 渲染页面\n\n浏览器接收响应后，进行以下步骤：\n\n- 解析HTML文档，构建DOM树\n- 如果遇到CSS文件，发起请求以获取样式，并构建CSSOM树\n- 合并DOM和CSSOM，生成渲染树\n- 根据渲染树计算布局，决定每个元素的位置和大小\n- 绘制页面，将内容绘制到屏幕上\n\n## 8. 处理JavaScript\n\n如果HTML中包含JavaScript代码，浏览器会逐步执行这些脚本。\nJavaScript可以操作DOM，改变页面内容，进行AJAX请求等。\n\n## 9. 其它资源加载\n\n如果页面中包含其他资源（如图片、音频、视频），浏览器会并行请求这些资源，直至全部加载完成。\n\n## 案例说明\n\n假设用户在浏览器中输入<https://www.example.com/index.html，整个过程如下：>\n\n1. 浏览器解析出协议为HTTPS，域名为www.example.com。\n2. 发送DNS请求，获得IP地址93.184.216.34。\n3. 与该IP地址建立TCP连接，并进行TLS握手。\n4. 发送GET请求，请求/index.html资源。\n5. 服务器处理请求，返回200状态及index.html内容。\n6. 浏览器解析HTML，构建DOM树，并抓取相关的CSS和JavaScript文件。\n7. 最终呈现完整的网页给用户。\n","source":"_posts/21-浏览器输入url后发生了什么.md","raw":"---\ntitle: 浏览器输入url后发生了什么\ndate: 2024-10-10 09:22:10\ntags:\n    - 面经\n    - 计算机网络\n    - url\ncategories:\n    - 计算机网络\n      - 综合\n---\n\n## 1. URL解析\n\n用户输入的URL（例如 `https://www.example.com/index.html`）首先被浏览器解析，该过程包括：\n\n- 提取协议（如HTTP或HTTPS）\n- 主机名（如www.example.com）\n- 端口\n- 路径（如/index.html）\n- 查询参数\n- 锚点\n\n详见：\n\n- [浏览器解析url过程](./22-浏览器解析url过程.md)\n\n## 2. DNS 查询\n\n浏览器需要将域名转换为IP地址，以便进行网络通信。\n此时，浏览器会查找本地DNS缓存，如果没有找到，就会向系统的DNS服务器发送请求。DNS服务器将返回对应的IP地址。\n\n详见：\n\n- [DNS](./25-DNS.md)\n- [CDN](./26-CDN.md)\n\n## 3. TCP连接\n\n一旦获得了IP地址，浏览器通过TCP（传输控制协议）建立与目标服务器的连接。\n对于HTTPS请求，还需要进行SSL/TLS握手，以确保安全性。这一过程包括：\n\n- 客户端向服务器发送连接请求\n- 服务器确认并建立连接\n- 进行SSL/TLS证书验证以及协商加密算法\n\n## 4. 发送HTTP请求\n\n连接建立后，浏览器构建一个HTTP请求并发送到服务器。这个请求包含：\n\n- 请求行（例如 GET /index.html HTTP/1.1）\n- 请求头（例如用户代理、接受类型等信息）\n- 请求体（对于POST请求，可能包含数据）\n\n## 5. 服务器处理请求\n\n服务器接收到请求后，会根据请求的内容进行处理。它可能会查找文件、访问数据库或者执行其他逻辑，最终生成一个HTTP响应。\n\n## 6. 接收HTTP响应\n\n服务器发送回HTTP响应，包含状态码（如200表示成功，404表示未找到），响应头（如内容类型、内容长度等）和响应体（实际请求资源的内容，如HTML文档）。\n\n## 7. 渲染页面\n\n浏览器接收响应后，进行以下步骤：\n\n- 解析HTML文档，构建DOM树\n- 如果遇到CSS文件，发起请求以获取样式，并构建CSSOM树\n- 合并DOM和CSSOM，生成渲染树\n- 根据渲染树计算布局，决定每个元素的位置和大小\n- 绘制页面，将内容绘制到屏幕上\n\n## 8. 处理JavaScript\n\n如果HTML中包含JavaScript代码，浏览器会逐步执行这些脚本。\nJavaScript可以操作DOM，改变页面内容，进行AJAX请求等。\n\n## 9. 其它资源加载\n\n如果页面中包含其他资源（如图片、音频、视频），浏览器会并行请求这些资源，直至全部加载完成。\n\n## 案例说明\n\n假设用户在浏览器中输入<https://www.example.com/index.html，整个过程如下：>\n\n1. 浏览器解析出协议为HTTPS，域名为www.example.com。\n2. 发送DNS请求，获得IP地址93.184.216.34。\n3. 与该IP地址建立TCP连接，并进行TLS握手。\n4. 发送GET请求，请求/index.html资源。\n5. 服务器处理请求，返回200状态及index.html内容。\n6. 浏览器解析HTML，构建DOM树，并抓取相关的CSS和JavaScript文件。\n7. 最终呈现完整的网页给用户。\n","slug":"21-浏览器输入url后发生了什么","published":1,"updated":"2024-11-04T02:54:30.690Z","_id":"cm22ma9wz00019zw663lu8o7g","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"1-URL解析\"><a href=\"#1-URL解析\" class=\"headerlink\" title=\"1. URL解析\"></a>1. URL解析</h2><p>用户输入的URL（例如 <code>https://www.example.com/index.html</code>）首先被浏览器解析，该过程包括：</p>\n<ul>\n<li>提取协议（如HTTP或HTTPS）</li>\n<li>主机名（如<a class=\"link\"   href=\"http://www.example.com)/\" >www.example.com） <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li>端口</li>\n<li>路径（如&#x2F;index.html）</li>\n<li>查询参数</li>\n<li>锚点</li>\n</ul>\n<p>详见：</p>\n<ul>\n<li><a href=\"./22-%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A7%A3%E6%9E%90url%E8%BF%87%E7%A8%8B.md\">浏览器解析url过程</a></li>\n</ul>\n<h2 id=\"2-DNS-查询\"><a href=\"#2-DNS-查询\" class=\"headerlink\" title=\"2. DNS 查询\"></a>2. DNS 查询</h2><p>浏览器需要将域名转换为IP地址，以便进行网络通信。<br>此时，浏览器会查找本地DNS缓存，如果没有找到，就会向系统的DNS服务器发送请求。DNS服务器将返回对应的IP地址。</p>\n<p>详见：</p>\n<ul>\n<li><a href=\"./25-DNS.md\">DNS</a></li>\n<li><a href=\"./26-CDN.md\">CDN</a></li>\n</ul>\n<h2 id=\"3-TCP连接\"><a href=\"#3-TCP连接\" class=\"headerlink\" title=\"3. TCP连接\"></a>3. TCP连接</h2><p>一旦获得了IP地址，浏览器通过TCP（传输控制协议）建立与目标服务器的连接。<br>对于HTTPS请求，还需要进行SSL&#x2F;TLS握手，以确保安全性。这一过程包括：</p>\n<ul>\n<li>客户端向服务器发送连接请求</li>\n<li>服务器确认并建立连接</li>\n<li>进行SSL&#x2F;TLS证书验证以及协商加密算法</li>\n</ul>\n<h2 id=\"4-发送HTTP请求\"><a href=\"#4-发送HTTP请求\" class=\"headerlink\" title=\"4. 发送HTTP请求\"></a>4. 发送HTTP请求</h2><p>连接建立后，浏览器构建一个HTTP请求并发送到服务器。这个请求包含：</p>\n<ul>\n<li>请求行（例如 GET &#x2F;index.html HTTP&#x2F;1.1）</li>\n<li>请求头（例如用户代理、接受类型等信息）</li>\n<li>请求体（对于POST请求，可能包含数据）</li>\n</ul>\n<h2 id=\"5-服务器处理请求\"><a href=\"#5-服务器处理请求\" class=\"headerlink\" title=\"5. 服务器处理请求\"></a>5. 服务器处理请求</h2><p>服务器接收到请求后，会根据请求的内容进行处理。它可能会查找文件、访问数据库或者执行其他逻辑，最终生成一个HTTP响应。</p>\n<h2 id=\"6-接收HTTP响应\"><a href=\"#6-接收HTTP响应\" class=\"headerlink\" title=\"6. 接收HTTP响应\"></a>6. 接收HTTP响应</h2><p>服务器发送回HTTP响应，包含状态码（如200表示成功，404表示未找到），响应头（如内容类型、内容长度等）和响应体（实际请求资源的内容，如HTML文档）。</p>\n<h2 id=\"7-渲染页面\"><a href=\"#7-渲染页面\" class=\"headerlink\" title=\"7. 渲染页面\"></a>7. 渲染页面</h2><p>浏览器接收响应后，进行以下步骤：</p>\n<ul>\n<li>解析HTML文档，构建DOM树</li>\n<li>如果遇到CSS文件，发起请求以获取样式，并构建CSSOM树</li>\n<li>合并DOM和CSSOM，生成渲染树</li>\n<li>根据渲染树计算布局，决定每个元素的位置和大小</li>\n<li>绘制页面，将内容绘制到屏幕上</li>\n</ul>\n<h2 id=\"8-处理JavaScript\"><a href=\"#8-处理JavaScript\" class=\"headerlink\" title=\"8. 处理JavaScript\"></a>8. 处理JavaScript</h2><p>如果HTML中包含JavaScript代码，浏览器会逐步执行这些脚本。<br>JavaScript可以操作DOM，改变页面内容，进行AJAX请求等。</p>\n<h2 id=\"9-其它资源加载\"><a href=\"#9-其它资源加载\" class=\"headerlink\" title=\"9. 其它资源加载\"></a>9. 其它资源加载</h2><p>如果页面中包含其他资源（如图片、音频、视频），浏览器会并行请求这些资源，直至全部加载完成。</p>\n<h2 id=\"案例说明\"><a href=\"#案例说明\" class=\"headerlink\" title=\"案例说明\"></a>案例说明</h2><p>假设用户在浏览器中输入<a class=\"link\"   href=\"https://www.example.com/index.html%EF%BC%8C%E6%95%B4%E4%B8%AA%E8%BF%87%E7%A8%8B%E5%A6%82%E4%B8%8B%EF%BC%9A\" >https://www.example.com/index.html，整个过程如下： <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<ol>\n<li>浏览器解析出协议为HTTPS，域名为<a class=\"link\"   href=\"http://www.example.com./\" >www.example.com。 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li>发送DNS请求，获得IP地址93.184.216.34。</li>\n<li>与该IP地址建立TCP连接，并进行TLS握手。</li>\n<li>发送GET请求，请求&#x2F;index.html资源。</li>\n<li>服务器处理请求，返回200状态及index.html内容。</li>\n<li>浏览器解析HTML，构建DOM树，并抓取相关的CSS和JavaScript文件。</li>\n<li>最终呈现完整的网页给用户。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-URL解析\"><a href=\"#1-URL解析\" class=\"headerlink\" title=\"1. URL解析\"></a>1. URL解析</h2><p>用户输入的URL（例如 <code>https://www.example.com/index.html</code>）首先被浏览器解析，该过程包括：</p>\n<ul>\n<li>提取协议（如HTTP或HTTPS）</li>\n<li>主机名（如<a class=\"link\"   href=\"http://www.example.com)/\" >www.example.com） <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li>端口</li>\n<li>路径（如&#x2F;index.html）</li>\n<li>查询参数</li>\n<li>锚点</li>\n</ul>\n<p>详见：</p>\n<ul>\n<li><a href=\"./22-%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A7%A3%E6%9E%90url%E8%BF%87%E7%A8%8B.md\">浏览器解析url过程</a></li>\n</ul>\n<h2 id=\"2-DNS-查询\"><a href=\"#2-DNS-查询\" class=\"headerlink\" title=\"2. DNS 查询\"></a>2. DNS 查询</h2><p>浏览器需要将域名转换为IP地址，以便进行网络通信。<br>此时，浏览器会查找本地DNS缓存，如果没有找到，就会向系统的DNS服务器发送请求。DNS服务器将返回对应的IP地址。</p>\n<p>详见：</p>\n<ul>\n<li><a href=\"./25-DNS.md\">DNS</a></li>\n<li><a href=\"./26-CDN.md\">CDN</a></li>\n</ul>\n<h2 id=\"3-TCP连接\"><a href=\"#3-TCP连接\" class=\"headerlink\" title=\"3. TCP连接\"></a>3. TCP连接</h2><p>一旦获得了IP地址，浏览器通过TCP（传输控制协议）建立与目标服务器的连接。<br>对于HTTPS请求，还需要进行SSL&#x2F;TLS握手，以确保安全性。这一过程包括：</p>\n<ul>\n<li>客户端向服务器发送连接请求</li>\n<li>服务器确认并建立连接</li>\n<li>进行SSL&#x2F;TLS证书验证以及协商加密算法</li>\n</ul>\n<h2 id=\"4-发送HTTP请求\"><a href=\"#4-发送HTTP请求\" class=\"headerlink\" title=\"4. 发送HTTP请求\"></a>4. 发送HTTP请求</h2><p>连接建立后，浏览器构建一个HTTP请求并发送到服务器。这个请求包含：</p>\n<ul>\n<li>请求行（例如 GET &#x2F;index.html HTTP&#x2F;1.1）</li>\n<li>请求头（例如用户代理、接受类型等信息）</li>\n<li>请求体（对于POST请求，可能包含数据）</li>\n</ul>\n<h2 id=\"5-服务器处理请求\"><a href=\"#5-服务器处理请求\" class=\"headerlink\" title=\"5. 服务器处理请求\"></a>5. 服务器处理请求</h2><p>服务器接收到请求后，会根据请求的内容进行处理。它可能会查找文件、访问数据库或者执行其他逻辑，最终生成一个HTTP响应。</p>\n<h2 id=\"6-接收HTTP响应\"><a href=\"#6-接收HTTP响应\" class=\"headerlink\" title=\"6. 接收HTTP响应\"></a>6. 接收HTTP响应</h2><p>服务器发送回HTTP响应，包含状态码（如200表示成功，404表示未找到），响应头（如内容类型、内容长度等）和响应体（实际请求资源的内容，如HTML文档）。</p>\n<h2 id=\"7-渲染页面\"><a href=\"#7-渲染页面\" class=\"headerlink\" title=\"7. 渲染页面\"></a>7. 渲染页面</h2><p>浏览器接收响应后，进行以下步骤：</p>\n<ul>\n<li>解析HTML文档，构建DOM树</li>\n<li>如果遇到CSS文件，发起请求以获取样式，并构建CSSOM树</li>\n<li>合并DOM和CSSOM，生成渲染树</li>\n<li>根据渲染树计算布局，决定每个元素的位置和大小</li>\n<li>绘制页面，将内容绘制到屏幕上</li>\n</ul>\n<h2 id=\"8-处理JavaScript\"><a href=\"#8-处理JavaScript\" class=\"headerlink\" title=\"8. 处理JavaScript\"></a>8. 处理JavaScript</h2><p>如果HTML中包含JavaScript代码，浏览器会逐步执行这些脚本。<br>JavaScript可以操作DOM，改变页面内容，进行AJAX请求等。</p>\n<h2 id=\"9-其它资源加载\"><a href=\"#9-其它资源加载\" class=\"headerlink\" title=\"9. 其它资源加载\"></a>9. 其它资源加载</h2><p>如果页面中包含其他资源（如图片、音频、视频），浏览器会并行请求这些资源，直至全部加载完成。</p>\n<h2 id=\"案例说明\"><a href=\"#案例说明\" class=\"headerlink\" title=\"案例说明\"></a>案例说明</h2><p>假设用户在浏览器中输入<a class=\"link\"   href=\"https://www.example.com/index.html%EF%BC%8C%E6%95%B4%E4%B8%AA%E8%BF%87%E7%A8%8B%E5%A6%82%E4%B8%8B%EF%BC%9A\" >https://www.example.com/index.html，整个过程如下： <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<ol>\n<li>浏览器解析出协议为HTTPS，域名为<a class=\"link\"   href=\"http://www.example.com./\" >www.example.com。 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li>发送DNS请求，获得IP地址93.184.216.34。</li>\n<li>与该IP地址建立TCP连接，并进行TLS握手。</li>\n<li>发送GET请求，请求&#x2F;index.html资源。</li>\n<li>服务器处理请求，返回200状态及index.html内容。</li>\n<li>浏览器解析HTML，构建DOM树，并抓取相关的CSS和JavaScript文件。</li>\n<li>最终呈现完整的网页给用户。</li>\n</ol>\n"},{"title":"浏览器解析url过程","date":"2024-10-14T06:15:10.000Z","_content":"\n## 1. URL的格式\n\n协议表示浏览器应当使用的访问方法，包括：\"http：\"\"ftp：\"\"file：\"\"mailto：\"。\n比如访问Web服务器使用HTTP协议，访问本地服务器使用FILE协议，访问FTP服务器使用FTP协议。\n\n图1 列举了常见的几种URL，访问自标不同，URL的写法也不同。\n例如在访问Web服务器和FTP服务器时，URL中包含服务器的域名和要访问的文件的路径名等，而发邮件的URL则包含收件人的邮件地址。此外，URL还可能包含用户名、密码、服务器端口号等信息。\n\n图1.1：URL的各种格式\n![图1.1](https://pica.zhimg.com/80/v2-e72ee2cb036bb9fa21e2817228a43e42_1440w.webp?source=2c26e567)\n\n## 2. URL的组成元素\n\n图1.2：Web浏览器解析url的过程\n![图1.2](https://picx.zhimg.com/80/v2-42f11c5b60c90af055cc232d71d15fd0_1440w.webp?source=2c26e567)\n\n图1.3：路径名为/dir/file1.html的文件\n![图1.3](https://pic1.zhimg.com/80/v2-204e5983725b0bf4ea61bef9c66d8d99_1440w.webp?source=2c26e567)\n\n## 3. 省略文件名的情况\n\n#### (a) 以\"/\"结尾：`lab.glasscom.com/dir/`\n\n以\"/dir/\"结尾代表/dir/后面本应该有的文件名被省略了。\n我们会在服务器上事先设置好文件名省略时要访问的默认文件名，大多情况下是index.html或者default.htm。因此，像前面这样省略文件名时，服务器就会访问其中的默认文件。\n\n#### (b) 域名+\"/\"：`lab.glasscom.com/`\n\n以\"域名+/\"结尾表示访问一个名叫\"/\"的目录（根目录）；\n由于省略了文件名，会访问/index.html之类的文件。\n\n#### (c) 域名：`lab.glasscom.com`\n\n以域名结尾时，就代表访问根目录下事先设置的默认文件，也就是/index.html之类的文件。\n\n#### (d) 路径结尾无\"/\"：`lab.glasscom.com/whatisthis`\n\n**先文件，后目录。**\n如果Web服务器上存在名为whatisthis的文件，则将whatisthis作为文件名来处理；\n如果存在名为whatisthis的目录，则将whatisthis作为目录名来处理。\n\n### 备注\n\n- URL：Uniform Resource Locator，统一资源定位符。\n- FTP：File Transfer Protocol，文件传送协议。是在上传、下载文件时使用的协议（也指使用FTP协议传送文件的程序）。\n- HTTP：Hypertext Transfer Protocol，超文本传送协议。\n- 根目录：\"/\"目录 表示最顶层的目录 \"根目录\"。\n","source":"_posts/22-浏览器解析url过程.md","raw":"---\ntitle: 浏览器解析url过程\ndate: 2024-10-14 14:15:10\ntags:\n    - 面经\n    - 计算机网络\n    - url\ncategories:\n    - 计算机网络\n      - url\n---\n\n## 1. URL的格式\n\n协议表示浏览器应当使用的访问方法，包括：\"http：\"\"ftp：\"\"file：\"\"mailto：\"。\n比如访问Web服务器使用HTTP协议，访问本地服务器使用FILE协议，访问FTP服务器使用FTP协议。\n\n图1 列举了常见的几种URL，访问自标不同，URL的写法也不同。\n例如在访问Web服务器和FTP服务器时，URL中包含服务器的域名和要访问的文件的路径名等，而发邮件的URL则包含收件人的邮件地址。此外，URL还可能包含用户名、密码、服务器端口号等信息。\n\n图1.1：URL的各种格式\n![图1.1](https://pica.zhimg.com/80/v2-e72ee2cb036bb9fa21e2817228a43e42_1440w.webp?source=2c26e567)\n\n## 2. URL的组成元素\n\n图1.2：Web浏览器解析url的过程\n![图1.2](https://picx.zhimg.com/80/v2-42f11c5b60c90af055cc232d71d15fd0_1440w.webp?source=2c26e567)\n\n图1.3：路径名为/dir/file1.html的文件\n![图1.3](https://pic1.zhimg.com/80/v2-204e5983725b0bf4ea61bef9c66d8d99_1440w.webp?source=2c26e567)\n\n## 3. 省略文件名的情况\n\n#### (a) 以\"/\"结尾：`lab.glasscom.com/dir/`\n\n以\"/dir/\"结尾代表/dir/后面本应该有的文件名被省略了。\n我们会在服务器上事先设置好文件名省略时要访问的默认文件名，大多情况下是index.html或者default.htm。因此，像前面这样省略文件名时，服务器就会访问其中的默认文件。\n\n#### (b) 域名+\"/\"：`lab.glasscom.com/`\n\n以\"域名+/\"结尾表示访问一个名叫\"/\"的目录（根目录）；\n由于省略了文件名，会访问/index.html之类的文件。\n\n#### (c) 域名：`lab.glasscom.com`\n\n以域名结尾时，就代表访问根目录下事先设置的默认文件，也就是/index.html之类的文件。\n\n#### (d) 路径结尾无\"/\"：`lab.glasscom.com/whatisthis`\n\n**先文件，后目录。**\n如果Web服务器上存在名为whatisthis的文件，则将whatisthis作为文件名来处理；\n如果存在名为whatisthis的目录，则将whatisthis作为目录名来处理。\n\n### 备注\n\n- URL：Uniform Resource Locator，统一资源定位符。\n- FTP：File Transfer Protocol，文件传送协议。是在上传、下载文件时使用的协议（也指使用FTP协议传送文件的程序）。\n- HTTP：Hypertext Transfer Protocol，超文本传送协议。\n- 根目录：\"/\"目录 表示最顶层的目录 \"根目录\"。\n","slug":"22-浏览器解析url过程","published":1,"updated":"2024-10-16T12:43:18.500Z","_id":"cm28ok88d0000eww60xuf3yim","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"1-URL的格式\"><a href=\"#1-URL的格式\" class=\"headerlink\" title=\"1. URL的格式\"></a>1. URL的格式</h2><p>协议表示浏览器应当使用的访问方法，包括：”http：””ftp：””file：””mailto：”。<br>比如访问Web服务器使用HTTP协议，访问本地服务器使用FILE协议，访问FTP服务器使用FTP协议。</p>\n<p>图1 列举了常见的几种URL，访问自标不同，URL的写法也不同。<br>例如在访问Web服务器和FTP服务器时，URL中包含服务器的域名和要访问的文件的路径名等，而发邮件的URL则包含收件人的邮件地址。此外，URL还可能包含用户名、密码、服务器端口号等信息。</p>\n<p>图1.1：URL的各种格式<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://pica.zhimg.com/80/v2-e72ee2cb036bb9fa21e2817228a43e42_1440w.webp?source=2c26e567\"\n                      alt=\"图1.1\"\n                ></p>\n<h2 id=\"2-URL的组成元素\"><a href=\"#2-URL的组成元素\" class=\"headerlink\" title=\"2. URL的组成元素\"></a>2. URL的组成元素</h2><p>图1.2：Web浏览器解析url的过程<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://picx.zhimg.com/80/v2-42f11c5b60c90af055cc232d71d15fd0_1440w.webp?source=2c26e567\"\n                      alt=\"图1.2\"\n                ></p>\n<p>图1.3：路径名为&#x2F;dir&#x2F;file1.html的文件<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://pic1.zhimg.com/80/v2-204e5983725b0bf4ea61bef9c66d8d99_1440w.webp?source=2c26e567\"\n                      alt=\"图1.3\"\n                ></p>\n<h2 id=\"3-省略文件名的情况\"><a href=\"#3-省略文件名的情况\" class=\"headerlink\" title=\"3. 省略文件名的情况\"></a>3. 省略文件名的情况</h2><h4 id=\"a-以”-“结尾：lab-glasscom-com-dir\"><a href=\"#a-以”-“结尾：lab-glasscom-com-dir\" class=\"headerlink\" title=\"(a) 以”&#x2F;“结尾：lab.glasscom.com/dir/\"></a>(a) 以”&#x2F;“结尾：<code>lab.glasscom.com/dir/</code></h4><p>以”&#x2F;dir&#x2F;“结尾代表&#x2F;dir&#x2F;后面本应该有的文件名被省略了。<br>我们会在服务器上事先设置好文件名省略时要访问的默认文件名，大多情况下是index.html或者default.htm。因此，像前面这样省略文件名时，服务器就会访问其中的默认文件。</p>\n<h4 id=\"b-域名-”-“：lab-glasscom-com\"><a href=\"#b-域名-”-“：lab-glasscom-com\" class=\"headerlink\" title=\"(b) 域名+”&#x2F;“：lab.glasscom.com/\"></a>(b) 域名+”&#x2F;“：<code>lab.glasscom.com/</code></h4><p>以”域名+&#x2F;“结尾表示访问一个名叫”&#x2F;“的目录（根目录）；<br>由于省略了文件名，会访问&#x2F;index.html之类的文件。</p>\n<h4 id=\"c-域名：lab-glasscom-com\"><a href=\"#c-域名：lab-glasscom-com\" class=\"headerlink\" title=\"(c) 域名：lab.glasscom.com\"></a>(c) 域名：<code>lab.glasscom.com</code></h4><p>以域名结尾时，就代表访问根目录下事先设置的默认文件，也就是&#x2F;index.html之类的文件。</p>\n<h4 id=\"d-路径结尾无”-“：lab-glasscom-com-whatisthis\"><a href=\"#d-路径结尾无”-“：lab-glasscom-com-whatisthis\" class=\"headerlink\" title=\"(d) 路径结尾无”&#x2F;“：lab.glasscom.com/whatisthis\"></a>(d) 路径结尾无”&#x2F;“：<code>lab.glasscom.com/whatisthis</code></h4><p><strong>先文件，后目录。</strong><br>如果Web服务器上存在名为whatisthis的文件，则将whatisthis作为文件名来处理；<br>如果存在名为whatisthis的目录，则将whatisthis作为目录名来处理。</p>\n<h3 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h3><ul>\n<li>URL：Uniform Resource Locator，统一资源定位符。</li>\n<li>FTP：File Transfer Protocol，文件传送协议。是在上传、下载文件时使用的协议（也指使用FTP协议传送文件的程序）。</li>\n<li>HTTP：Hypertext Transfer Protocol，超文本传送协议。</li>\n<li>根目录：”&#x2F;“目录 表示最顶层的目录 “根目录”。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-URL的格式\"><a href=\"#1-URL的格式\" class=\"headerlink\" title=\"1. URL的格式\"></a>1. URL的格式</h2><p>协议表示浏览器应当使用的访问方法，包括：”http：””ftp：””file：””mailto：”。<br>比如访问Web服务器使用HTTP协议，访问本地服务器使用FILE协议，访问FTP服务器使用FTP协议。</p>\n<p>图1 列举了常见的几种URL，访问自标不同，URL的写法也不同。<br>例如在访问Web服务器和FTP服务器时，URL中包含服务器的域名和要访问的文件的路径名等，而发邮件的URL则包含收件人的邮件地址。此外，URL还可能包含用户名、密码、服务器端口号等信息。</p>\n<p>图1.1：URL的各种格式<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://pica.zhimg.com/80/v2-e72ee2cb036bb9fa21e2817228a43e42_1440w.webp?source=2c26e567\"\n                      alt=\"图1.1\"\n                ></p>\n<h2 id=\"2-URL的组成元素\"><a href=\"#2-URL的组成元素\" class=\"headerlink\" title=\"2. URL的组成元素\"></a>2. URL的组成元素</h2><p>图1.2：Web浏览器解析url的过程<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://picx.zhimg.com/80/v2-42f11c5b60c90af055cc232d71d15fd0_1440w.webp?source=2c26e567\"\n                      alt=\"图1.2\"\n                ></p>\n<p>图1.3：路径名为&#x2F;dir&#x2F;file1.html的文件<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://pic1.zhimg.com/80/v2-204e5983725b0bf4ea61bef9c66d8d99_1440w.webp?source=2c26e567\"\n                      alt=\"图1.3\"\n                ></p>\n<h2 id=\"3-省略文件名的情况\"><a href=\"#3-省略文件名的情况\" class=\"headerlink\" title=\"3. 省略文件名的情况\"></a>3. 省略文件名的情况</h2><h4 id=\"a-以”-“结尾：lab-glasscom-com-dir\"><a href=\"#a-以”-“结尾：lab-glasscom-com-dir\" class=\"headerlink\" title=\"(a) 以”&#x2F;“结尾：lab.glasscom.com/dir/\"></a>(a) 以”&#x2F;“结尾：<code>lab.glasscom.com/dir/</code></h4><p>以”&#x2F;dir&#x2F;“结尾代表&#x2F;dir&#x2F;后面本应该有的文件名被省略了。<br>我们会在服务器上事先设置好文件名省略时要访问的默认文件名，大多情况下是index.html或者default.htm。因此，像前面这样省略文件名时，服务器就会访问其中的默认文件。</p>\n<h4 id=\"b-域名-”-“：lab-glasscom-com\"><a href=\"#b-域名-”-“：lab-glasscom-com\" class=\"headerlink\" title=\"(b) 域名+”&#x2F;“：lab.glasscom.com/\"></a>(b) 域名+”&#x2F;“：<code>lab.glasscom.com/</code></h4><p>以”域名+&#x2F;“结尾表示访问一个名叫”&#x2F;“的目录（根目录）；<br>由于省略了文件名，会访问&#x2F;index.html之类的文件。</p>\n<h4 id=\"c-域名：lab-glasscom-com\"><a href=\"#c-域名：lab-glasscom-com\" class=\"headerlink\" title=\"(c) 域名：lab.glasscom.com\"></a>(c) 域名：<code>lab.glasscom.com</code></h4><p>以域名结尾时，就代表访问根目录下事先设置的默认文件，也就是&#x2F;index.html之类的文件。</p>\n<h4 id=\"d-路径结尾无”-“：lab-glasscom-com-whatisthis\"><a href=\"#d-路径结尾无”-“：lab-glasscom-com-whatisthis\" class=\"headerlink\" title=\"(d) 路径结尾无”&#x2F;“：lab.glasscom.com/whatisthis\"></a>(d) 路径结尾无”&#x2F;“：<code>lab.glasscom.com/whatisthis</code></h4><p><strong>先文件，后目录。</strong><br>如果Web服务器上存在名为whatisthis的文件，则将whatisthis作为文件名来处理；<br>如果存在名为whatisthis的目录，则将whatisthis作为目录名来处理。</p>\n<h3 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h3><ul>\n<li>URL：Uniform Resource Locator，统一资源定位符。</li>\n<li>FTP：File Transfer Protocol，文件传送协议。是在上传、下载文件时使用的协议（也指使用FTP协议传送文件的程序）。</li>\n<li>HTTP：Hypertext Transfer Protocol，超文本传送协议。</li>\n<li>根目录：”&#x2F;“目录 表示最顶层的目录 “根目录”。</li>\n</ul>\n"},{"title":"投放链接防重定向","date":"2024-10-14T08:56:06.000Z","_content":"\n为了防止浏览器进行多次重定向，影响页面性能，投放链接应该以 https 开头，以 '/' 结尾\n不用：`http://lc.jr.jd.com/finance/fund/fundinvest/investZone`\n使用：`https://lc.jr.jd.com/finance/fund/fundinvest/investZone/`\n\n## 不正确投放链接\n\n访问`http://lc.jr.jd.com/finance/fund/fundinvest/investZone`的请求过程：\n\n### 一、有缓存\n\n#### 1. 协议变为 https\n\n浏览器把协议从http替换为https（使用307重定向，保证不改变请求方法GET）\n\n![图1](../images/23/1.png)\n\n#### 2. 本地缓存获取IP\n\n浏览器在本地缓存中获取到IP（远端地址）；重定向到补充末尾\"/\"的规范URL\n\n- 返回304响应码，该GET请求的request header中包含（与缓存相关的）条件参数\n- 使用path相对路径进行重定向，因为nginx在server中设置了`absolute_redirect off`\n\n![图2](../images/23/2.png)\n\n请求头中的条件参数（If-xxx）：\n![图3](../images/23/3.png)\n\n#### 3. 请求资源\n\n浏览器使用上述请求从本地缓存中获取的IP，向远端服务器GET资源，并成功\n![图4](../images/23/4.png)\n\n### 二、无缓存\n\n无缓存时，第2步变为使用301重定向\n\n![图5](../images/23/5.png)\n\n## 正确投放链接\n\n访问`https://lc.jr.jd.com/finance/fund/fundinvest/investZone/`的请求过程：\n\n### 一、有缓存\n\n服务器返回304响应码，表示可以使用客户端中之前缓存的副本\n\n- 该请求的request header中包含「与缓存相关」的条件参数\n\n![图6](../images/23/6.png)\n\n### 二、无缓存\n\n普通请求，响应码为200\n","source":"_posts/23-投放链接防重定向.md","raw":"---\ntitle: 投放链接防重定向\ndate: 2024-10-14 16:56:06\ntags:\n    - 面经\n    - 计算机网络\n    - url\n    - 实践问题\ncategories:\n    - 计算机网络\n      - url\n---\n\n为了防止浏览器进行多次重定向，影响页面性能，投放链接应该以 https 开头，以 '/' 结尾\n不用：`http://lc.jr.jd.com/finance/fund/fundinvest/investZone`\n使用：`https://lc.jr.jd.com/finance/fund/fundinvest/investZone/`\n\n## 不正确投放链接\n\n访问`http://lc.jr.jd.com/finance/fund/fundinvest/investZone`的请求过程：\n\n### 一、有缓存\n\n#### 1. 协议变为 https\n\n浏览器把协议从http替换为https（使用307重定向，保证不改变请求方法GET）\n\n![图1](../images/23/1.png)\n\n#### 2. 本地缓存获取IP\n\n浏览器在本地缓存中获取到IP（远端地址）；重定向到补充末尾\"/\"的规范URL\n\n- 返回304响应码，该GET请求的request header中包含（与缓存相关的）条件参数\n- 使用path相对路径进行重定向，因为nginx在server中设置了`absolute_redirect off`\n\n![图2](../images/23/2.png)\n\n请求头中的条件参数（If-xxx）：\n![图3](../images/23/3.png)\n\n#### 3. 请求资源\n\n浏览器使用上述请求从本地缓存中获取的IP，向远端服务器GET资源，并成功\n![图4](../images/23/4.png)\n\n### 二、无缓存\n\n无缓存时，第2步变为使用301重定向\n\n![图5](../images/23/5.png)\n\n## 正确投放链接\n\n访问`https://lc.jr.jd.com/finance/fund/fundinvest/investZone/`的请求过程：\n\n### 一、有缓存\n\n服务器返回304响应码，表示可以使用客户端中之前缓存的副本\n\n- 该请求的request header中包含「与缓存相关」的条件参数\n\n![图6](../images/23/6.png)\n\n### 二、无缓存\n\n普通请求，响应码为200\n","slug":"23-投放链接防重定向","published":1,"updated":"2025-01-02T05:14:30.835Z","_id":"cm2bos5uv0000dow62cxr6472","comments":1,"layout":"post","photos":[],"link":"","content":"<p>为了防止浏览器进行多次重定向，影响页面性能，投放链接应该以 https 开头，以 ‘&#x2F;‘ 结尾<br>不用：<code>http://lc.jr.jd.com/finance/fund/fundinvest/investZone</code><br>使用：<code>https://lc.jr.jd.com/finance/fund/fundinvest/investZone/</code></p>\n<h2 id=\"不正确投放链接\"><a href=\"#不正确投放链接\" class=\"headerlink\" title=\"不正确投放链接\"></a>不正确投放链接</h2><p>访问<code>http://lc.jr.jd.com/finance/fund/fundinvest/investZone</code>的请求过程：</p>\n<h3 id=\"一、有缓存\"><a href=\"#一、有缓存\" class=\"headerlink\" title=\"一、有缓存\"></a>一、有缓存</h3><h4 id=\"1-协议变为-https\"><a href=\"#1-协议变为-https\" class=\"headerlink\" title=\"1. 协议变为 https\"></a>1. 协议变为 https</h4><p>浏览器把协议从http替换为https（使用307重定向，保证不改变请求方法GET）</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/23/1.png\"\n                      alt=\"图1\"\n                ></p>\n<h4 id=\"2-本地缓存获取IP\"><a href=\"#2-本地缓存获取IP\" class=\"headerlink\" title=\"2. 本地缓存获取IP\"></a>2. 本地缓存获取IP</h4><p>浏览器在本地缓存中获取到IP（远端地址）；重定向到补充末尾”&#x2F;“的规范URL</p>\n<ul>\n<li>返回304响应码，该GET请求的request header中包含（与缓存相关的）条件参数</li>\n<li>使用path相对路径进行重定向，因为nginx在server中设置了<code>absolute_redirect off</code></li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/23/2.png\"\n                      alt=\"图2\"\n                ></p>\n<p>请求头中的条件参数（If-xxx）：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/23/3.png\"\n                      alt=\"图3\"\n                ></p>\n<h4 id=\"3-请求资源\"><a href=\"#3-请求资源\" class=\"headerlink\" title=\"3. 请求资源\"></a>3. 请求资源</h4><p>浏览器使用上述请求从本地缓存中获取的IP，向远端服务器GET资源，并成功<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/23/4.png\"\n                      alt=\"图4\"\n                ></p>\n<h3 id=\"二、无缓存\"><a href=\"#二、无缓存\" class=\"headerlink\" title=\"二、无缓存\"></a>二、无缓存</h3><p>无缓存时，第2步变为使用301重定向</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/23/5.png\"\n                      alt=\"图5\"\n                ></p>\n<h2 id=\"正确投放链接\"><a href=\"#正确投放链接\" class=\"headerlink\" title=\"正确投放链接\"></a>正确投放链接</h2><p>访问<code>https://lc.jr.jd.com/finance/fund/fundinvest/investZone/</code>的请求过程：</p>\n<h3 id=\"一、有缓存-1\"><a href=\"#一、有缓存-1\" class=\"headerlink\" title=\"一、有缓存\"></a>一、有缓存</h3><p>服务器返回304响应码，表示可以使用客户端中之前缓存的副本</p>\n<ul>\n<li>该请求的request header中包含「与缓存相关」的条件参数</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/23/6.png\"\n                      alt=\"图6\"\n                ></p>\n<h3 id=\"二、无缓存-1\"><a href=\"#二、无缓存-1\" class=\"headerlink\" title=\"二、无缓存\"></a>二、无缓存</h3><p>普通请求，响应码为200</p>\n","site":{"data":{}},"excerpt":"","more":"<p>为了防止浏览器进行多次重定向，影响页面性能，投放链接应该以 https 开头，以 ‘&#x2F;‘ 结尾<br>不用：<code>http://lc.jr.jd.com/finance/fund/fundinvest/investZone</code><br>使用：<code>https://lc.jr.jd.com/finance/fund/fundinvest/investZone/</code></p>\n<h2 id=\"不正确投放链接\"><a href=\"#不正确投放链接\" class=\"headerlink\" title=\"不正确投放链接\"></a>不正确投放链接</h2><p>访问<code>http://lc.jr.jd.com/finance/fund/fundinvest/investZone</code>的请求过程：</p>\n<h3 id=\"一、有缓存\"><a href=\"#一、有缓存\" class=\"headerlink\" title=\"一、有缓存\"></a>一、有缓存</h3><h4 id=\"1-协议变为-https\"><a href=\"#1-协议变为-https\" class=\"headerlink\" title=\"1. 协议变为 https\"></a>1. 协议变为 https</h4><p>浏览器把协议从http替换为https（使用307重定向，保证不改变请求方法GET）</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/23/1.png\"\n                      alt=\"图1\"\n                ></p>\n<h4 id=\"2-本地缓存获取IP\"><a href=\"#2-本地缓存获取IP\" class=\"headerlink\" title=\"2. 本地缓存获取IP\"></a>2. 本地缓存获取IP</h4><p>浏览器在本地缓存中获取到IP（远端地址）；重定向到补充末尾”&#x2F;“的规范URL</p>\n<ul>\n<li>返回304响应码，该GET请求的request header中包含（与缓存相关的）条件参数</li>\n<li>使用path相对路径进行重定向，因为nginx在server中设置了<code>absolute_redirect off</code></li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/23/2.png\"\n                      alt=\"图2\"\n                ></p>\n<p>请求头中的条件参数（If-xxx）：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/23/3.png\"\n                      alt=\"图3\"\n                ></p>\n<h4 id=\"3-请求资源\"><a href=\"#3-请求资源\" class=\"headerlink\" title=\"3. 请求资源\"></a>3. 请求资源</h4><p>浏览器使用上述请求从本地缓存中获取的IP，向远端服务器GET资源，并成功<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/23/4.png\"\n                      alt=\"图4\"\n                ></p>\n<h3 id=\"二、无缓存\"><a href=\"#二、无缓存\" class=\"headerlink\" title=\"二、无缓存\"></a>二、无缓存</h3><p>无缓存时，第2步变为使用301重定向</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/23/5.png\"\n                      alt=\"图5\"\n                ></p>\n<h2 id=\"正确投放链接\"><a href=\"#正确投放链接\" class=\"headerlink\" title=\"正确投放链接\"></a>正确投放链接</h2><p>访问<code>https://lc.jr.jd.com/finance/fund/fundinvest/investZone/</code>的请求过程：</p>\n<h3 id=\"一、有缓存-1\"><a href=\"#一、有缓存-1\" class=\"headerlink\" title=\"一、有缓存\"></a>一、有缓存</h3><p>服务器返回304响应码，表示可以使用客户端中之前缓存的副本</p>\n<ul>\n<li>该请求的request header中包含「与缓存相关」的条件参数</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/23/6.png\"\n                      alt=\"图6\"\n                ></p>\n<h3 id=\"二、无缓存-1\"><a href=\"#二、无缓存-1\" class=\"headerlink\" title=\"二、无缓存\"></a>二、无缓存</h3><p>普通请求，响应码为200</p>\n"},{"title":"浏览器缓存与304状态码","date":"2024-10-16T09:52:10.000Z","_content":"\n## 总结\n\n出现304状态码的条件\n\n- 不禁止缓存\n- 不检查本地缓存是否过期；或者检查本地缓存、且未过期\n- 响应头有`Etag`（则下次的请求头中有`If-None-Match`）；或者响应头有`Last-Modified`（则下次的请求头中有`If-Modified-since`）\n- 缓存有效\n\n注意：下图中的`Etag`和`Last-Modified`之间不存在先后顺序\n\n![图1](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/11/22/15fe1d6fc1269a86~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png)\n\n## 一、304请求的交互过程\n\n假设用户通过浏览器访问某静态资源（比如图片image.png），且该资源之前已被浏览器缓存，现在分析两次请求的交互过程。\n\n### 第一次请求（初始加载）\n\n#### 1、浏览器发送请求\n\n用户在浏览器中输入 URL，浏览器向服务器发送 GET 请求，获取 image.png。\n请求头可能如下：\n\n``` http\nGET /image.png HTTP/1.1\nHost: example.com\nUser-Agent: Mozilla/5.0 ...\nAccept: image/webp,image/apng,image/*,*/*;q=0.8\n```\n\n#### 2、服务器响应\n\n服务器处理请求，并返回 200 OK 响应，同时附带以下响应头：\n\n```http\nHTTP/1.1 200 OK\nContent-Type: image/png\nContent-Length: 123456\nLast-Modified: Mon, 01 Jan 2023 12:00:00 GMT\nETag: \"abc123\"\nCache-Control: max-age=31536000\n```\n\n- `Last-Modified`：表示资源最后修改的时间\n- `ETag`：资源的唯一标识符\n- `Cache-Control`：指示浏览器可以缓存该资源的时长\n\n#### 3、浏览器缓存资源\n\n浏览器接收响应后，将image.png缓存到本地，并根据响应头信息（如`Last-Modified`和`ETag`）记录该资源的状态\n\n### 第二次请求（缓存验证）\n\n#### 1、浏览器发送条件请求\n\n当用户再次访问同一资源，浏览器会检查缓存，如果该资源仍然有效，就发送一个带条件的 GET 请求到服务器，请求头如下：\n\n``` http\nGET /image.png HTTP/1.1\nHost: example.com\nIf-Modified-Since: Mon, 01 Jan 2023 12:00:00 GMT\nIf-None-Match: \"abc123\"\nUser-Agent: Mozilla/5.0 ...\n```\n\n- `If-Modified-Since`：告诉服务器，如果在指定日期之后资源被修改，则返回新的资源\n- `If-None-Match`：告诉服务器，如果资源的`ETag`与提供的值不匹配，则返回新的资源\n\n#### 2、服务器处理请求\n\n服务器接收到条件请求后，检查该资源的状态：\n如果资源自`Last-Modified`时间以来未被修改，且`ETag`匹配，那么服务器不会返回新的内容，而是返回 304 Not Modified。\n\n服务器返回如下响应：\n\n``` http\nHTTP/1.1 304 Not Modified\nDate: Mon, 02 Jan 2023 12:00:00 GMT\n```\n\n**注意：304 响应没有消息体，通常只包含必要的状态码和一些响应头。**\n\n#### 3、浏览器处理304响应\n\n当浏览器接收到 304 Not Modified 响应时，了解到之前缓存的 image.png 仍然有效，因此直接使用缓存中的版本，而无需重新下载。\n\n## 二、详细讨论\n\n### 1、是否禁止缓存\n\n**禁止缓存**：缓存中不得存储任何关于客户端请求和服务端响应的内容，客户端每次发起的请求都会下载完整的响应内容\n\n在请求头中，`Cache-Control: no-store` 与 `Pragma: no-cache` 都可以禁止缓存\n\n- `Pragma: no-cache` 可用于 `http 1.0` 和 `http 1.1`\n- `Cache-Control: no-store` 只能用于 `http 1.1`\n\n### 2、是否检查本地副本是否过期\n\n由 `Cache-Control` 的 `no-cache` 和 `must-revalidate` 两个可选值控制\n\n- `no-cache`：告诉浏览器、缓存服务器，不管本地副本是否过期，**使用资源副本前，必须到源服务器进行副本有效性校验**\n- `must-revalidate`：告诉浏览器、缓存服务器，**本地副本过期前，可使用本地副本**；本地副本一旦过期，必须去源服务器进行有效性校验（如果没有该属性，若发生网络问题等情况，客户端可能直接使用本地缓存，而不会向服务器发起校验）\n\n### 3、检查本地副本是否过期\n\n与「缓存的过期机制」相关的响应头字段（优先级依次降低）：\n\n#### （1）`max-age=<seconds>`\n\n表示资源能被缓存的最大时间，通常和 `must-revalidate` 一起使用。\n\n本地副本过期前，可使用本地副本，缓存时间为60秒；\n如果本地副本已过期，则重新向服务器请求（要求必须进行有效性校验）：\n\n``` http\nCache-Control: max-age=60, must-revalidate\n```\n\n共享缓存（如代理服务器）将在60秒后失效，而个人用户的缓存则在120秒后失效：\n\n``` http\nCache-Control: max-age=120, smax-age=60\n```\n\n#### （2）`Expires`\n\n表示资源的过期时间。\n如果无`max-age`但有`Expires`，通过比较`Expires`和`Date`的值来判断是否缓存有效：\n\n![图2](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/24/16569eec71a24236~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png)\n\n#### （3）`Last-Modified`\n\n表示资源的最后修改时间。\n如果无`max-age`和`expires`但有`Last-Modified`，缓存的时长等于\n\n``` json\n(Date - Last-Modified) / 10\n```\n\n![图3](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/24/16569eec6d61c11a~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png)\n\n**如果都没有，浏览器将不会对该需求进行缓存。**\n\n### 4、本地副本没过期\n\n直接从缓存中读取资源，并返回200状态码。\n\n![图4](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/24/16569eec7215656e~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png)\n\n### 5、本地副本已过期\n\n进行「源服务器进行有效性校验」的前期准备：\n\n#### （1）If-None-Match\n\n首先，在请求头里寻找`If-None-Match`字段（其值为服务器上次返回的`ETag`响应头的值）\n\n![图5](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/24/16569eec71ddeec1~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png)\n![图6](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/24/16569eec89fb1991~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png)\n\n#### （2）If-Modified-Since\n\n如果没有`If-None-Match`，则在请求头中寻找`If-Modified-Since`字段（其值为服务器上次返回的`Last-Modified`响应头中的日期值）\n\n![图7](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/24/16569eec8a29d072~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png)\n![图8](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/24/16569eed35bf1c0e~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png)\n\n如果`If-None-Match`与`If-Modified-Since`都没有，则直接向服务器请求数据\n\n### 6、去源服务器进行有效性校验\n\n如果请求头中有`If-None-Match`或`If-Modified-Since`，则到源服务器进行有效性校验。\n如果源服务器资源没有变化，则返回304；如果有变化，则返回200。\n\n### 7、上述流程的总结图\n\n![图9](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/24/16569eed5984fb4b~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png)\n\n## 三、意义\n\n- **避免了不必要的数据传输，提高了网络效率和用户体验**；\n- **在频繁访问相同资源的情况下，可以显著降低带宽消耗和服务器负载**。\n\n## 四、补充\n\n### 私有缓存和公共缓存\n\n在`Cache-Control`还有两个值：`private`与`public`：\n\n- public 表示该响应可被任何中间人（比如中间代理、CDN等）缓存。\n- private 表示该响应是专用于某单个用户的，不能被中间人缓存，应该用于浏览器的私有缓存中，比如：带有HTTP验证信息（帐号密码）的页面 或 某些特定影响状态码的页面*。\n\n“某些特定影响状态码的页面”指具有特殊语义的状态码，比如：\n\n##### （1）401 Unauthorized\n\n当访问受保护的资源时，如果用户未通过身份验证，服务器可能返回401状态码。\n此时通常只应允许客户端缓存该响应，因为该内容对其他用户是不适用的。\n\n#### （2）403 Forbidden\n\n表示服务器理解请求但拒绝执行它。\n在某些情况下，公共内容也可能出于安全考虑而不被中间缓存，因此可标记为 private。\n\n##### （2）404 Not Found\n\n如果某资源不存在，虽然它是公开的，但可能在某些应用场景下不希望被中间缓存。\n\n##### （3）500 Internal Server Error\n\n表示服务器出现了问题，返回的内容可能不稳定，因此不应被中间缓存。\n\n#### private 使用场景\n\n##### （1）用户特定数据\n\n如个性化推荐、用户历史记录等，仅对特定用户合适，其他用户无法访问，即便返回成功状态，为了保护用户隐私，建议使用 private。\n\n##### （2）临时性数据\n\n如操作结果、表单提交后给予反馈的信息等，这类信息通常只需当前用户知道，对其他用户无意义，适合标记为 private。\n","source":"_posts/24-浏览器缓存与304状态码.md","raw":"---\ntitle: 浏览器缓存与304状态码\ndate: 2024-10-16 17:52:10\ntags:\n    - 面经\n    - 计算机网络\n    - url\n    - 状态码\n    - 浏览器\ncategories:\n    - 计算机网络\n      - 状态码\n    - 计算机网络\n      - 浏览器\n---\n\n## 总结\n\n出现304状态码的条件\n\n- 不禁止缓存\n- 不检查本地缓存是否过期；或者检查本地缓存、且未过期\n- 响应头有`Etag`（则下次的请求头中有`If-None-Match`）；或者响应头有`Last-Modified`（则下次的请求头中有`If-Modified-since`）\n- 缓存有效\n\n注意：下图中的`Etag`和`Last-Modified`之间不存在先后顺序\n\n![图1](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/11/22/15fe1d6fc1269a86~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png)\n\n## 一、304请求的交互过程\n\n假设用户通过浏览器访问某静态资源（比如图片image.png），且该资源之前已被浏览器缓存，现在分析两次请求的交互过程。\n\n### 第一次请求（初始加载）\n\n#### 1、浏览器发送请求\n\n用户在浏览器中输入 URL，浏览器向服务器发送 GET 请求，获取 image.png。\n请求头可能如下：\n\n``` http\nGET /image.png HTTP/1.1\nHost: example.com\nUser-Agent: Mozilla/5.0 ...\nAccept: image/webp,image/apng,image/*,*/*;q=0.8\n```\n\n#### 2、服务器响应\n\n服务器处理请求，并返回 200 OK 响应，同时附带以下响应头：\n\n```http\nHTTP/1.1 200 OK\nContent-Type: image/png\nContent-Length: 123456\nLast-Modified: Mon, 01 Jan 2023 12:00:00 GMT\nETag: \"abc123\"\nCache-Control: max-age=31536000\n```\n\n- `Last-Modified`：表示资源最后修改的时间\n- `ETag`：资源的唯一标识符\n- `Cache-Control`：指示浏览器可以缓存该资源的时长\n\n#### 3、浏览器缓存资源\n\n浏览器接收响应后，将image.png缓存到本地，并根据响应头信息（如`Last-Modified`和`ETag`）记录该资源的状态\n\n### 第二次请求（缓存验证）\n\n#### 1、浏览器发送条件请求\n\n当用户再次访问同一资源，浏览器会检查缓存，如果该资源仍然有效，就发送一个带条件的 GET 请求到服务器，请求头如下：\n\n``` http\nGET /image.png HTTP/1.1\nHost: example.com\nIf-Modified-Since: Mon, 01 Jan 2023 12:00:00 GMT\nIf-None-Match: \"abc123\"\nUser-Agent: Mozilla/5.0 ...\n```\n\n- `If-Modified-Since`：告诉服务器，如果在指定日期之后资源被修改，则返回新的资源\n- `If-None-Match`：告诉服务器，如果资源的`ETag`与提供的值不匹配，则返回新的资源\n\n#### 2、服务器处理请求\n\n服务器接收到条件请求后，检查该资源的状态：\n如果资源自`Last-Modified`时间以来未被修改，且`ETag`匹配，那么服务器不会返回新的内容，而是返回 304 Not Modified。\n\n服务器返回如下响应：\n\n``` http\nHTTP/1.1 304 Not Modified\nDate: Mon, 02 Jan 2023 12:00:00 GMT\n```\n\n**注意：304 响应没有消息体，通常只包含必要的状态码和一些响应头。**\n\n#### 3、浏览器处理304响应\n\n当浏览器接收到 304 Not Modified 响应时，了解到之前缓存的 image.png 仍然有效，因此直接使用缓存中的版本，而无需重新下载。\n\n## 二、详细讨论\n\n### 1、是否禁止缓存\n\n**禁止缓存**：缓存中不得存储任何关于客户端请求和服务端响应的内容，客户端每次发起的请求都会下载完整的响应内容\n\n在请求头中，`Cache-Control: no-store` 与 `Pragma: no-cache` 都可以禁止缓存\n\n- `Pragma: no-cache` 可用于 `http 1.0` 和 `http 1.1`\n- `Cache-Control: no-store` 只能用于 `http 1.1`\n\n### 2、是否检查本地副本是否过期\n\n由 `Cache-Control` 的 `no-cache` 和 `must-revalidate` 两个可选值控制\n\n- `no-cache`：告诉浏览器、缓存服务器，不管本地副本是否过期，**使用资源副本前，必须到源服务器进行副本有效性校验**\n- `must-revalidate`：告诉浏览器、缓存服务器，**本地副本过期前，可使用本地副本**；本地副本一旦过期，必须去源服务器进行有效性校验（如果没有该属性，若发生网络问题等情况，客户端可能直接使用本地缓存，而不会向服务器发起校验）\n\n### 3、检查本地副本是否过期\n\n与「缓存的过期机制」相关的响应头字段（优先级依次降低）：\n\n#### （1）`max-age=<seconds>`\n\n表示资源能被缓存的最大时间，通常和 `must-revalidate` 一起使用。\n\n本地副本过期前，可使用本地副本，缓存时间为60秒；\n如果本地副本已过期，则重新向服务器请求（要求必须进行有效性校验）：\n\n``` http\nCache-Control: max-age=60, must-revalidate\n```\n\n共享缓存（如代理服务器）将在60秒后失效，而个人用户的缓存则在120秒后失效：\n\n``` http\nCache-Control: max-age=120, smax-age=60\n```\n\n#### （2）`Expires`\n\n表示资源的过期时间。\n如果无`max-age`但有`Expires`，通过比较`Expires`和`Date`的值来判断是否缓存有效：\n\n![图2](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/24/16569eec71a24236~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png)\n\n#### （3）`Last-Modified`\n\n表示资源的最后修改时间。\n如果无`max-age`和`expires`但有`Last-Modified`，缓存的时长等于\n\n``` json\n(Date - Last-Modified) / 10\n```\n\n![图3](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/24/16569eec6d61c11a~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png)\n\n**如果都没有，浏览器将不会对该需求进行缓存。**\n\n### 4、本地副本没过期\n\n直接从缓存中读取资源，并返回200状态码。\n\n![图4](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/24/16569eec7215656e~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png)\n\n### 5、本地副本已过期\n\n进行「源服务器进行有效性校验」的前期准备：\n\n#### （1）If-None-Match\n\n首先，在请求头里寻找`If-None-Match`字段（其值为服务器上次返回的`ETag`响应头的值）\n\n![图5](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/24/16569eec71ddeec1~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png)\n![图6](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/24/16569eec89fb1991~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png)\n\n#### （2）If-Modified-Since\n\n如果没有`If-None-Match`，则在请求头中寻找`If-Modified-Since`字段（其值为服务器上次返回的`Last-Modified`响应头中的日期值）\n\n![图7](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/24/16569eec8a29d072~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png)\n![图8](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/24/16569eed35bf1c0e~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png)\n\n如果`If-None-Match`与`If-Modified-Since`都没有，则直接向服务器请求数据\n\n### 6、去源服务器进行有效性校验\n\n如果请求头中有`If-None-Match`或`If-Modified-Since`，则到源服务器进行有效性校验。\n如果源服务器资源没有变化，则返回304；如果有变化，则返回200。\n\n### 7、上述流程的总结图\n\n![图9](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/24/16569eed5984fb4b~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png)\n\n## 三、意义\n\n- **避免了不必要的数据传输，提高了网络效率和用户体验**；\n- **在频繁访问相同资源的情况下，可以显著降低带宽消耗和服务器负载**。\n\n## 四、补充\n\n### 私有缓存和公共缓存\n\n在`Cache-Control`还有两个值：`private`与`public`：\n\n- public 表示该响应可被任何中间人（比如中间代理、CDN等）缓存。\n- private 表示该响应是专用于某单个用户的，不能被中间人缓存，应该用于浏览器的私有缓存中，比如：带有HTTP验证信息（帐号密码）的页面 或 某些特定影响状态码的页面*。\n\n“某些特定影响状态码的页面”指具有特殊语义的状态码，比如：\n\n##### （1）401 Unauthorized\n\n当访问受保护的资源时，如果用户未通过身份验证，服务器可能返回401状态码。\n此时通常只应允许客户端缓存该响应，因为该内容对其他用户是不适用的。\n\n#### （2）403 Forbidden\n\n表示服务器理解请求但拒绝执行它。\n在某些情况下，公共内容也可能出于安全考虑而不被中间缓存，因此可标记为 private。\n\n##### （2）404 Not Found\n\n如果某资源不存在，虽然它是公开的，但可能在某些应用场景下不希望被中间缓存。\n\n##### （3）500 Internal Server Error\n\n表示服务器出现了问题，返回的内容可能不稳定，因此不应被中间缓存。\n\n#### private 使用场景\n\n##### （1）用户特定数据\n\n如个性化推荐、用户历史记录等，仅对特定用户合适，其他用户无法访问，即便返回成功状态，为了保护用户隐私，建议使用 private。\n\n##### （2）临时性数据\n\n如操作结果、表单提交后给予反馈的信息等，这类信息通常只需当前用户知道，对其他用户无意义，适合标记为 private。\n","slug":"24-浏览器缓存与304状态码","published":1,"updated":"2024-10-18T13:42:31.526Z","_id":"cm2buup6v0000ihw6h51eb5lr","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>出现304状态码的条件</p>\n<ul>\n<li>不禁止缓存</li>\n<li>不检查本地缓存是否过期；或者检查本地缓存、且未过期</li>\n<li>响应头有<code>Etag</code>（则下次的请求头中有<code>If-None-Match</code>）；或者响应头有<code>Last-Modified</code>（则下次的请求头中有<code>If-Modified-since</code>）</li>\n<li>缓存有效</li>\n</ul>\n<p>注意：下图中的<code>Etag</code>和<code>Last-Modified</code>之间不存在先后顺序</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/11/22/15fe1d6fc1269a86~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\"\n                      alt=\"图1\"\n                ></p>\n<h2 id=\"一、304请求的交互过程\"><a href=\"#一、304请求的交互过程\" class=\"headerlink\" title=\"一、304请求的交互过程\"></a>一、304请求的交互过程</h2><p>假设用户通过浏览器访问某静态资源（比如图片image.png），且该资源之前已被浏览器缓存，现在分析两次请求的交互过程。</p>\n<h3 id=\"第一次请求（初始加载）\"><a href=\"#第一次请求（初始加载）\" class=\"headerlink\" title=\"第一次请求（初始加载）\"></a>第一次请求（初始加载）</h3><h4 id=\"1、浏览器发送请求\"><a href=\"#1、浏览器发送请求\" class=\"headerlink\" title=\"1、浏览器发送请求\"></a>1、浏览器发送请求</h4><p>用户在浏览器中输入 URL，浏览器向服务器发送 GET 请求，获取 image.png。<br>请求头可能如下：</p>\n<div class=\"highlight-container\" data-rel=\"Http\"><figure class=\"iseeu highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GET</span> <span class=\"string\">/image.png</span> <span class=\"meta\">HTTP/1.1</span></span><br><span class=\"line\"><span class=\"attribute\">Host</span><span class=\"punctuation\">: </span>example.com</span><br><span class=\"line\"><span class=\"attribute\">User-Agent</span><span class=\"punctuation\">: </span>Mozilla/5.0 ...</span><br><span class=\"line\"><span class=\"attribute\">Accept</span><span class=\"punctuation\">: </span>image/webp,image/apng,image/*,*/*;q=0.8</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"2、服务器响应\"><a href=\"#2、服务器响应\" class=\"headerlink\" title=\"2、服务器响应\"></a>2、服务器响应</h4><p>服务器处理请求，并返回 200 OK 响应，同时附带以下响应头：</p>\n<div class=\"highlight-container\" data-rel=\"Http\"><figure class=\"iseeu highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">HTTP/1.1</span> <span class=\"number\">200</span> OK</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span><span class=\"punctuation\">: </span>image/png</span><br><span class=\"line\"><span class=\"attribute\">Content-Length</span><span class=\"punctuation\">: </span>123456</span><br><span class=\"line\"><span class=\"attribute\">Last-Modified</span><span class=\"punctuation\">: </span>Mon, 01 Jan 2023 12:00:00 GMT</span><br><span class=\"line\"><span class=\"attribute\">ETag</span><span class=\"punctuation\">: </span>&quot;abc123&quot;</span><br><span class=\"line\"><span class=\"attribute\">Cache-Control</span><span class=\"punctuation\">: </span>max-age=31536000</span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li><code>Last-Modified</code>：表示资源最后修改的时间</li>\n<li><code>ETag</code>：资源的唯一标识符</li>\n<li><code>Cache-Control</code>：指示浏览器可以缓存该资源的时长</li>\n</ul>\n<h4 id=\"3、浏览器缓存资源\"><a href=\"#3、浏览器缓存资源\" class=\"headerlink\" title=\"3、浏览器缓存资源\"></a>3、浏览器缓存资源</h4><p>浏览器接收响应后，将image.png缓存到本地，并根据响应头信息（如<code>Last-Modified</code>和<code>ETag</code>）记录该资源的状态</p>\n<h3 id=\"第二次请求（缓存验证）\"><a href=\"#第二次请求（缓存验证）\" class=\"headerlink\" title=\"第二次请求（缓存验证）\"></a>第二次请求（缓存验证）</h3><h4 id=\"1、浏览器发送条件请求\"><a href=\"#1、浏览器发送条件请求\" class=\"headerlink\" title=\"1、浏览器发送条件请求\"></a>1、浏览器发送条件请求</h4><p>当用户再次访问同一资源，浏览器会检查缓存，如果该资源仍然有效，就发送一个带条件的 GET 请求到服务器，请求头如下：</p>\n<div class=\"highlight-container\" data-rel=\"Http\"><figure class=\"iseeu highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GET</span> <span class=\"string\">/image.png</span> <span class=\"meta\">HTTP/1.1</span></span><br><span class=\"line\"><span class=\"attribute\">Host</span><span class=\"punctuation\">: </span>example.com</span><br><span class=\"line\"><span class=\"attribute\">If-Modified-Since</span><span class=\"punctuation\">: </span>Mon, 01 Jan 2023 12:00:00 GMT</span><br><span class=\"line\"><span class=\"attribute\">If-None-Match</span><span class=\"punctuation\">: </span>&quot;abc123&quot;</span><br><span class=\"line\"><span class=\"attribute\">User-Agent</span><span class=\"punctuation\">: </span>Mozilla/5.0 ...</span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li><code>If-Modified-Since</code>：告诉服务器，如果在指定日期之后资源被修改，则返回新的资源</li>\n<li><code>If-None-Match</code>：告诉服务器，如果资源的<code>ETag</code>与提供的值不匹配，则返回新的资源</li>\n</ul>\n<h4 id=\"2、服务器处理请求\"><a href=\"#2、服务器处理请求\" class=\"headerlink\" title=\"2、服务器处理请求\"></a>2、服务器处理请求</h4><p>服务器接收到条件请求后，检查该资源的状态：<br>如果资源自<code>Last-Modified</code>时间以来未被修改，且<code>ETag</code>匹配，那么服务器不会返回新的内容，而是返回 304 Not Modified。</p>\n<p>服务器返回如下响应：</p>\n<div class=\"highlight-container\" data-rel=\"Http\"><figure class=\"iseeu highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">HTTP/1.1</span> <span class=\"number\">304</span> Not Modified</span><br><span class=\"line\"><span class=\"attribute\">Date</span><span class=\"punctuation\">: </span>Mon, 02 Jan 2023 12:00:00 GMT</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>注意：304 响应没有消息体，通常只包含必要的状态码和一些响应头。</strong></p>\n<h4 id=\"3、浏览器处理304响应\"><a href=\"#3、浏览器处理304响应\" class=\"headerlink\" title=\"3、浏览器处理304响应\"></a>3、浏览器处理304响应</h4><p>当浏览器接收到 304 Not Modified 响应时，了解到之前缓存的 image.png 仍然有效，因此直接使用缓存中的版本，而无需重新下载。</p>\n<h2 id=\"二、详细讨论\"><a href=\"#二、详细讨论\" class=\"headerlink\" title=\"二、详细讨论\"></a>二、详细讨论</h2><h3 id=\"1、是否禁止缓存\"><a href=\"#1、是否禁止缓存\" class=\"headerlink\" title=\"1、是否禁止缓存\"></a>1、是否禁止缓存</h3><p><strong>禁止缓存</strong>：缓存中不得存储任何关于客户端请求和服务端响应的内容，客户端每次发起的请求都会下载完整的响应内容</p>\n<p>在请求头中，<code>Cache-Control: no-store</code> 与 <code>Pragma: no-cache</code> 都可以禁止缓存</p>\n<ul>\n<li><code>Pragma: no-cache</code> 可用于 <code>http 1.0</code> 和 <code>http 1.1</code></li>\n<li><code>Cache-Control: no-store</code> 只能用于 <code>http 1.1</code></li>\n</ul>\n<h3 id=\"2、是否检查本地副本是否过期\"><a href=\"#2、是否检查本地副本是否过期\" class=\"headerlink\" title=\"2、是否检查本地副本是否过期\"></a>2、是否检查本地副本是否过期</h3><p>由 <code>Cache-Control</code> 的 <code>no-cache</code> 和 <code>must-revalidate</code> 两个可选值控制</p>\n<ul>\n<li><code>no-cache</code>：告诉浏览器、缓存服务器，不管本地副本是否过期，<strong>使用资源副本前，必须到源服务器进行副本有效性校验</strong></li>\n<li><code>must-revalidate</code>：告诉浏览器、缓存服务器，<strong>本地副本过期前，可使用本地副本</strong>；本地副本一旦过期，必须去源服务器进行有效性校验（如果没有该属性，若发生网络问题等情况，客户端可能直接使用本地缓存，而不会向服务器发起校验）</li>\n</ul>\n<h3 id=\"3、检查本地副本是否过期\"><a href=\"#3、检查本地副本是否过期\" class=\"headerlink\" title=\"3、检查本地副本是否过期\"></a>3、检查本地副本是否过期</h3><p>与「缓存的过期机制」相关的响应头字段（优先级依次降低）：</p>\n<h4 id=\"（1）max-age\"><a href=\"#（1）max-age\" class=\"headerlink\" title=\"（1）max-age=&lt;seconds&gt;\"></a>（1）<code>max-age=&lt;seconds&gt;</code></h4><p>表示资源能被缓存的最大时间，通常和 <code>must-revalidate</code> 一起使用。</p>\n<p>本地副本过期前，可使用本地副本，缓存时间为60秒；<br>如果本地副本已过期，则重新向服务器请求（要求必须进行有效性校验）：</p>\n<div class=\"highlight-container\" data-rel=\"Http\"><figure class=\"iseeu highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Cache-Control</span><span class=\"punctuation\">: </span>max-age=60, must-revalidate</span><br></pre></td></tr></table></figure></div>\n\n<p>共享缓存（如代理服务器）将在60秒后失效，而个人用户的缓存则在120秒后失效：</p>\n<div class=\"highlight-container\" data-rel=\"Http\"><figure class=\"iseeu highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Cache-Control</span><span class=\"punctuation\">: </span>max-age=120, smax-age=60</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"（2）Expires\"><a href=\"#（2）Expires\" class=\"headerlink\" title=\"（2）Expires\"></a>（2）<code>Expires</code></h4><p>表示资源的过期时间。<br>如果无<code>max-age</code>但有<code>Expires</code>，通过比较<code>Expires</code>和<code>Date</code>的值来判断是否缓存有效：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/24/16569eec71a24236~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\"\n                      alt=\"图2\"\n                ></p>\n<h4 id=\"（3）Last-Modified\"><a href=\"#（3）Last-Modified\" class=\"headerlink\" title=\"（3）Last-Modified\"></a>（3）<code>Last-Modified</code></h4><p>表示资源的最后修改时间。<br>如果无<code>max-age</code>和<code>expires</code>但有<code>Last-Modified</code>，缓存的时长等于</p>\n<div class=\"highlight-container\" data-rel=\"Json\"><figure class=\"iseeu highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(Date - Last-Modified) / <span class=\"number\">10</span></span><br></pre></td></tr></table></figure></div>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/24/16569eec6d61c11a~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\"\n                      alt=\"图3\"\n                ></p>\n<p><strong>如果都没有，浏览器将不会对该需求进行缓存。</strong></p>\n<h3 id=\"4、本地副本没过期\"><a href=\"#4、本地副本没过期\" class=\"headerlink\" title=\"4、本地副本没过期\"></a>4、本地副本没过期</h3><p>直接从缓存中读取资源，并返回200状态码。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/24/16569eec7215656e~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\"\n                      alt=\"图4\"\n                ></p>\n<h3 id=\"5、本地副本已过期\"><a href=\"#5、本地副本已过期\" class=\"headerlink\" title=\"5、本地副本已过期\"></a>5、本地副本已过期</h3><p>进行「源服务器进行有效性校验」的前期准备：</p>\n<h4 id=\"（1）If-None-Match\"><a href=\"#（1）If-None-Match\" class=\"headerlink\" title=\"（1）If-None-Match\"></a>（1）If-None-Match</h4><p>首先，在请求头里寻找<code>If-None-Match</code>字段（其值为服务器上次返回的<code>ETag</code>响应头的值）</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/24/16569eec71ddeec1~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\"\n                      alt=\"图5\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/24/16569eec89fb1991~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\"\n                      alt=\"图6\"\n                ></p>\n<h4 id=\"（2）If-Modified-Since\"><a href=\"#（2）If-Modified-Since\" class=\"headerlink\" title=\"（2）If-Modified-Since\"></a>（2）If-Modified-Since</h4><p>如果没有<code>If-None-Match</code>，则在请求头中寻找<code>If-Modified-Since</code>字段（其值为服务器上次返回的<code>Last-Modified</code>响应头中的日期值）</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/24/16569eec8a29d072~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\"\n                      alt=\"图7\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/24/16569eed35bf1c0e~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\"\n                      alt=\"图8\"\n                ></p>\n<p>如果<code>If-None-Match</code>与<code>If-Modified-Since</code>都没有，则直接向服务器请求数据</p>\n<h3 id=\"6、去源服务器进行有效性校验\"><a href=\"#6、去源服务器进行有效性校验\" class=\"headerlink\" title=\"6、去源服务器进行有效性校验\"></a>6、去源服务器进行有效性校验</h3><p>如果请求头中有<code>If-None-Match</code>或<code>If-Modified-Since</code>，则到源服务器进行有效性校验。<br>如果源服务器资源没有变化，则返回304；如果有变化，则返回200。</p>\n<h3 id=\"7、上述流程的总结图\"><a href=\"#7、上述流程的总结图\" class=\"headerlink\" title=\"7、上述流程的总结图\"></a>7、上述流程的总结图</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/24/16569eed5984fb4b~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\"\n                      alt=\"图9\"\n                ></p>\n<h2 id=\"三、意义\"><a href=\"#三、意义\" class=\"headerlink\" title=\"三、意义\"></a>三、意义</h2><ul>\n<li><strong>避免了不必要的数据传输，提高了网络效率和用户体验</strong>；</li>\n<li><strong>在频繁访问相同资源的情况下，可以显著降低带宽消耗和服务器负载</strong>。</li>\n</ul>\n<h2 id=\"四、补充\"><a href=\"#四、补充\" class=\"headerlink\" title=\"四、补充\"></a>四、补充</h2><h3 id=\"私有缓存和公共缓存\"><a href=\"#私有缓存和公共缓存\" class=\"headerlink\" title=\"私有缓存和公共缓存\"></a>私有缓存和公共缓存</h3><p>在<code>Cache-Control</code>还有两个值：<code>private</code>与<code>public</code>：</p>\n<ul>\n<li>public 表示该响应可被任何中间人（比如中间代理、CDN等）缓存。</li>\n<li>private 表示该响应是专用于某单个用户的，不能被中间人缓存，应该用于浏览器的私有缓存中，比如：带有HTTP验证信息（帐号密码）的页面 或 某些特定影响状态码的页面*。</li>\n</ul>\n<p>“某些特定影响状态码的页面”指具有特殊语义的状态码，比如：</p>\n<h5 id=\"（1）401-Unauthorized\"><a href=\"#（1）401-Unauthorized\" class=\"headerlink\" title=\"（1）401 Unauthorized\"></a>（1）401 Unauthorized</h5><p>当访问受保护的资源时，如果用户未通过身份验证，服务器可能返回401状态码。<br>此时通常只应允许客户端缓存该响应，因为该内容对其他用户是不适用的。</p>\n<h4 id=\"（2）403-Forbidden\"><a href=\"#（2）403-Forbidden\" class=\"headerlink\" title=\"（2）403 Forbidden\"></a>（2）403 Forbidden</h4><p>表示服务器理解请求但拒绝执行它。<br>在某些情况下，公共内容也可能出于安全考虑而不被中间缓存，因此可标记为 private。</p>\n<h5 id=\"（2）404-Not-Found\"><a href=\"#（2）404-Not-Found\" class=\"headerlink\" title=\"（2）404 Not Found\"></a>（2）404 Not Found</h5><p>如果某资源不存在，虽然它是公开的，但可能在某些应用场景下不希望被中间缓存。</p>\n<h5 id=\"（3）500-Internal-Server-Error\"><a href=\"#（3）500-Internal-Server-Error\" class=\"headerlink\" title=\"（3）500 Internal Server Error\"></a>（3）500 Internal Server Error</h5><p>表示服务器出现了问题，返回的内容可能不稳定，因此不应被中间缓存。</p>\n<h4 id=\"private-使用场景\"><a href=\"#private-使用场景\" class=\"headerlink\" title=\"private 使用场景\"></a>private 使用场景</h4><h5 id=\"（1）用户特定数据\"><a href=\"#（1）用户特定数据\" class=\"headerlink\" title=\"（1）用户特定数据\"></a>（1）用户特定数据</h5><p>如个性化推荐、用户历史记录等，仅对特定用户合适，其他用户无法访问，即便返回成功状态，为了保护用户隐私，建议使用 private。</p>\n<h5 id=\"（2）临时性数据\"><a href=\"#（2）临时性数据\" class=\"headerlink\" title=\"（2）临时性数据\"></a>（2）临时性数据</h5><p>如操作结果、表单提交后给予反馈的信息等，这类信息通常只需当前用户知道，对其他用户无意义，适合标记为 private。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>出现304状态码的条件</p>\n<ul>\n<li>不禁止缓存</li>\n<li>不检查本地缓存是否过期；或者检查本地缓存、且未过期</li>\n<li>响应头有<code>Etag</code>（则下次的请求头中有<code>If-None-Match</code>）；或者响应头有<code>Last-Modified</code>（则下次的请求头中有<code>If-Modified-since</code>）</li>\n<li>缓存有效</li>\n</ul>\n<p>注意：下图中的<code>Etag</code>和<code>Last-Modified</code>之间不存在先后顺序</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/11/22/15fe1d6fc1269a86~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\"\n                      alt=\"图1\"\n                ></p>\n<h2 id=\"一、304请求的交互过程\"><a href=\"#一、304请求的交互过程\" class=\"headerlink\" title=\"一、304请求的交互过程\"></a>一、304请求的交互过程</h2><p>假设用户通过浏览器访问某静态资源（比如图片image.png），且该资源之前已被浏览器缓存，现在分析两次请求的交互过程。</p>\n<h3 id=\"第一次请求（初始加载）\"><a href=\"#第一次请求（初始加载）\" class=\"headerlink\" title=\"第一次请求（初始加载）\"></a>第一次请求（初始加载）</h3><h4 id=\"1、浏览器发送请求\"><a href=\"#1、浏览器发送请求\" class=\"headerlink\" title=\"1、浏览器发送请求\"></a>1、浏览器发送请求</h4><p>用户在浏览器中输入 URL，浏览器向服务器发送 GET 请求，获取 image.png。<br>请求头可能如下：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GET</span> <span class=\"string\">/image.png</span> <span class=\"meta\">HTTP/1.1</span></span><br><span class=\"line\"><span class=\"attribute\">Host</span><span class=\"punctuation\">: </span>example.com</span><br><span class=\"line\"><span class=\"attribute\">User-Agent</span><span class=\"punctuation\">: </span>Mozilla/5.0 ...</span><br><span class=\"line\"><span class=\"attribute\">Accept</span><span class=\"punctuation\">: </span>image/webp,image/apng,image/*,*/*;q=0.8</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、服务器响应\"><a href=\"#2、服务器响应\" class=\"headerlink\" title=\"2、服务器响应\"></a>2、服务器响应</h4><p>服务器处理请求，并返回 200 OK 响应，同时附带以下响应头：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">HTTP/1.1</span> <span class=\"number\">200</span> OK</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span><span class=\"punctuation\">: </span>image/png</span><br><span class=\"line\"><span class=\"attribute\">Content-Length</span><span class=\"punctuation\">: </span>123456</span><br><span class=\"line\"><span class=\"attribute\">Last-Modified</span><span class=\"punctuation\">: </span>Mon, 01 Jan 2023 12:00:00 GMT</span><br><span class=\"line\"><span class=\"attribute\">ETag</span><span class=\"punctuation\">: </span>&quot;abc123&quot;</span><br><span class=\"line\"><span class=\"attribute\">Cache-Control</span><span class=\"punctuation\">: </span>max-age=31536000</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Last-Modified</code>：表示资源最后修改的时间</li>\n<li><code>ETag</code>：资源的唯一标识符</li>\n<li><code>Cache-Control</code>：指示浏览器可以缓存该资源的时长</li>\n</ul>\n<h4 id=\"3、浏览器缓存资源\"><a href=\"#3、浏览器缓存资源\" class=\"headerlink\" title=\"3、浏览器缓存资源\"></a>3、浏览器缓存资源</h4><p>浏览器接收响应后，将image.png缓存到本地，并根据响应头信息（如<code>Last-Modified</code>和<code>ETag</code>）记录该资源的状态</p>\n<h3 id=\"第二次请求（缓存验证）\"><a href=\"#第二次请求（缓存验证）\" class=\"headerlink\" title=\"第二次请求（缓存验证）\"></a>第二次请求（缓存验证）</h3><h4 id=\"1、浏览器发送条件请求\"><a href=\"#1、浏览器发送条件请求\" class=\"headerlink\" title=\"1、浏览器发送条件请求\"></a>1、浏览器发送条件请求</h4><p>当用户再次访问同一资源，浏览器会检查缓存，如果该资源仍然有效，就发送一个带条件的 GET 请求到服务器，请求头如下：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GET</span> <span class=\"string\">/image.png</span> <span class=\"meta\">HTTP/1.1</span></span><br><span class=\"line\"><span class=\"attribute\">Host</span><span class=\"punctuation\">: </span>example.com</span><br><span class=\"line\"><span class=\"attribute\">If-Modified-Since</span><span class=\"punctuation\">: </span>Mon, 01 Jan 2023 12:00:00 GMT</span><br><span class=\"line\"><span class=\"attribute\">If-None-Match</span><span class=\"punctuation\">: </span>&quot;abc123&quot;</span><br><span class=\"line\"><span class=\"attribute\">User-Agent</span><span class=\"punctuation\">: </span>Mozilla/5.0 ...</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>If-Modified-Since</code>：告诉服务器，如果在指定日期之后资源被修改，则返回新的资源</li>\n<li><code>If-None-Match</code>：告诉服务器，如果资源的<code>ETag</code>与提供的值不匹配，则返回新的资源</li>\n</ul>\n<h4 id=\"2、服务器处理请求\"><a href=\"#2、服务器处理请求\" class=\"headerlink\" title=\"2、服务器处理请求\"></a>2、服务器处理请求</h4><p>服务器接收到条件请求后，检查该资源的状态：<br>如果资源自<code>Last-Modified</code>时间以来未被修改，且<code>ETag</code>匹配，那么服务器不会返回新的内容，而是返回 304 Not Modified。</p>\n<p>服务器返回如下响应：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">HTTP/1.1</span> <span class=\"number\">304</span> Not Modified</span><br><span class=\"line\"><span class=\"attribute\">Date</span><span class=\"punctuation\">: </span>Mon, 02 Jan 2023 12:00:00 GMT</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：304 响应没有消息体，通常只包含必要的状态码和一些响应头。</strong></p>\n<h4 id=\"3、浏览器处理304响应\"><a href=\"#3、浏览器处理304响应\" class=\"headerlink\" title=\"3、浏览器处理304响应\"></a>3、浏览器处理304响应</h4><p>当浏览器接收到 304 Not Modified 响应时，了解到之前缓存的 image.png 仍然有效，因此直接使用缓存中的版本，而无需重新下载。</p>\n<h2 id=\"二、详细讨论\"><a href=\"#二、详细讨论\" class=\"headerlink\" title=\"二、详细讨论\"></a>二、详细讨论</h2><h3 id=\"1、是否禁止缓存\"><a href=\"#1、是否禁止缓存\" class=\"headerlink\" title=\"1、是否禁止缓存\"></a>1、是否禁止缓存</h3><p><strong>禁止缓存</strong>：缓存中不得存储任何关于客户端请求和服务端响应的内容，客户端每次发起的请求都会下载完整的响应内容</p>\n<p>在请求头中，<code>Cache-Control: no-store</code> 与 <code>Pragma: no-cache</code> 都可以禁止缓存</p>\n<ul>\n<li><code>Pragma: no-cache</code> 可用于 <code>http 1.0</code> 和 <code>http 1.1</code></li>\n<li><code>Cache-Control: no-store</code> 只能用于 <code>http 1.1</code></li>\n</ul>\n<h3 id=\"2、是否检查本地副本是否过期\"><a href=\"#2、是否检查本地副本是否过期\" class=\"headerlink\" title=\"2、是否检查本地副本是否过期\"></a>2、是否检查本地副本是否过期</h3><p>由 <code>Cache-Control</code> 的 <code>no-cache</code> 和 <code>must-revalidate</code> 两个可选值控制</p>\n<ul>\n<li><code>no-cache</code>：告诉浏览器、缓存服务器，不管本地副本是否过期，<strong>使用资源副本前，必须到源服务器进行副本有效性校验</strong></li>\n<li><code>must-revalidate</code>：告诉浏览器、缓存服务器，<strong>本地副本过期前，可使用本地副本</strong>；本地副本一旦过期，必须去源服务器进行有效性校验（如果没有该属性，若发生网络问题等情况，客户端可能直接使用本地缓存，而不会向服务器发起校验）</li>\n</ul>\n<h3 id=\"3、检查本地副本是否过期\"><a href=\"#3、检查本地副本是否过期\" class=\"headerlink\" title=\"3、检查本地副本是否过期\"></a>3、检查本地副本是否过期</h3><p>与「缓存的过期机制」相关的响应头字段（优先级依次降低）：</p>\n<h4 id=\"（1）max-age\"><a href=\"#（1）max-age\" class=\"headerlink\" title=\"（1）max-age=&lt;seconds&gt;\"></a>（1）<code>max-age=&lt;seconds&gt;</code></h4><p>表示资源能被缓存的最大时间，通常和 <code>must-revalidate</code> 一起使用。</p>\n<p>本地副本过期前，可使用本地副本，缓存时间为60秒；<br>如果本地副本已过期，则重新向服务器请求（要求必须进行有效性校验）：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Cache-Control</span><span class=\"punctuation\">: </span>max-age=60, must-revalidate</span><br></pre></td></tr></table></figure>\n\n<p>共享缓存（如代理服务器）将在60秒后失效，而个人用户的缓存则在120秒后失效：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Cache-Control</span><span class=\"punctuation\">: </span>max-age=120, smax-age=60</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（2）Expires\"><a href=\"#（2）Expires\" class=\"headerlink\" title=\"（2）Expires\"></a>（2）<code>Expires</code></h4><p>表示资源的过期时间。<br>如果无<code>max-age</code>但有<code>Expires</code>，通过比较<code>Expires</code>和<code>Date</code>的值来判断是否缓存有效：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/24/16569eec71a24236~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\"\n                      alt=\"图2\"\n                ></p>\n<h4 id=\"（3）Last-Modified\"><a href=\"#（3）Last-Modified\" class=\"headerlink\" title=\"（3）Last-Modified\"></a>（3）<code>Last-Modified</code></h4><p>表示资源的最后修改时间。<br>如果无<code>max-age</code>和<code>expires</code>但有<code>Last-Modified</code>，缓存的时长等于</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(Date - Last-Modified) / <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/24/16569eec6d61c11a~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\"\n                      alt=\"图3\"\n                ></p>\n<p><strong>如果都没有，浏览器将不会对该需求进行缓存。</strong></p>\n<h3 id=\"4、本地副本没过期\"><a href=\"#4、本地副本没过期\" class=\"headerlink\" title=\"4、本地副本没过期\"></a>4、本地副本没过期</h3><p>直接从缓存中读取资源，并返回200状态码。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/24/16569eec7215656e~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\"\n                      alt=\"图4\"\n                ></p>\n<h3 id=\"5、本地副本已过期\"><a href=\"#5、本地副本已过期\" class=\"headerlink\" title=\"5、本地副本已过期\"></a>5、本地副本已过期</h3><p>进行「源服务器进行有效性校验」的前期准备：</p>\n<h4 id=\"（1）If-None-Match\"><a href=\"#（1）If-None-Match\" class=\"headerlink\" title=\"（1）If-None-Match\"></a>（1）If-None-Match</h4><p>首先，在请求头里寻找<code>If-None-Match</code>字段（其值为服务器上次返回的<code>ETag</code>响应头的值）</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/24/16569eec71ddeec1~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\"\n                      alt=\"图5\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/24/16569eec89fb1991~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\"\n                      alt=\"图6\"\n                ></p>\n<h4 id=\"（2）If-Modified-Since\"><a href=\"#（2）If-Modified-Since\" class=\"headerlink\" title=\"（2）If-Modified-Since\"></a>（2）If-Modified-Since</h4><p>如果没有<code>If-None-Match</code>，则在请求头中寻找<code>If-Modified-Since</code>字段（其值为服务器上次返回的<code>Last-Modified</code>响应头中的日期值）</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/24/16569eec8a29d072~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\"\n                      alt=\"图7\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/24/16569eed35bf1c0e~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\"\n                      alt=\"图8\"\n                ></p>\n<p>如果<code>If-None-Match</code>与<code>If-Modified-Since</code>都没有，则直接向服务器请求数据</p>\n<h3 id=\"6、去源服务器进行有效性校验\"><a href=\"#6、去源服务器进行有效性校验\" class=\"headerlink\" title=\"6、去源服务器进行有效性校验\"></a>6、去源服务器进行有效性校验</h3><p>如果请求头中有<code>If-None-Match</code>或<code>If-Modified-Since</code>，则到源服务器进行有效性校验。<br>如果源服务器资源没有变化，则返回304；如果有变化，则返回200。</p>\n<h3 id=\"7、上述流程的总结图\"><a href=\"#7、上述流程的总结图\" class=\"headerlink\" title=\"7、上述流程的总结图\"></a>7、上述流程的总结图</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/24/16569eed5984fb4b~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png\"\n                      alt=\"图9\"\n                ></p>\n<h2 id=\"三、意义\"><a href=\"#三、意义\" class=\"headerlink\" title=\"三、意义\"></a>三、意义</h2><ul>\n<li><strong>避免了不必要的数据传输，提高了网络效率和用户体验</strong>；</li>\n<li><strong>在频繁访问相同资源的情况下，可以显著降低带宽消耗和服务器负载</strong>。</li>\n</ul>\n<h2 id=\"四、补充\"><a href=\"#四、补充\" class=\"headerlink\" title=\"四、补充\"></a>四、补充</h2><h3 id=\"私有缓存和公共缓存\"><a href=\"#私有缓存和公共缓存\" class=\"headerlink\" title=\"私有缓存和公共缓存\"></a>私有缓存和公共缓存</h3><p>在<code>Cache-Control</code>还有两个值：<code>private</code>与<code>public</code>：</p>\n<ul>\n<li>public 表示该响应可被任何中间人（比如中间代理、CDN等）缓存。</li>\n<li>private 表示该响应是专用于某单个用户的，不能被中间人缓存，应该用于浏览器的私有缓存中，比如：带有HTTP验证信息（帐号密码）的页面 或 某些特定影响状态码的页面*。</li>\n</ul>\n<p>“某些特定影响状态码的页面”指具有特殊语义的状态码，比如：</p>\n<h5 id=\"（1）401-Unauthorized\"><a href=\"#（1）401-Unauthorized\" class=\"headerlink\" title=\"（1）401 Unauthorized\"></a>（1）401 Unauthorized</h5><p>当访问受保护的资源时，如果用户未通过身份验证，服务器可能返回401状态码。<br>此时通常只应允许客户端缓存该响应，因为该内容对其他用户是不适用的。</p>\n<h4 id=\"（2）403-Forbidden\"><a href=\"#（2）403-Forbidden\" class=\"headerlink\" title=\"（2）403 Forbidden\"></a>（2）403 Forbidden</h4><p>表示服务器理解请求但拒绝执行它。<br>在某些情况下，公共内容也可能出于安全考虑而不被中间缓存，因此可标记为 private。</p>\n<h5 id=\"（2）404-Not-Found\"><a href=\"#（2）404-Not-Found\" class=\"headerlink\" title=\"（2）404 Not Found\"></a>（2）404 Not Found</h5><p>如果某资源不存在，虽然它是公开的，但可能在某些应用场景下不希望被中间缓存。</p>\n<h5 id=\"（3）500-Internal-Server-Error\"><a href=\"#（3）500-Internal-Server-Error\" class=\"headerlink\" title=\"（3）500 Internal Server Error\"></a>（3）500 Internal Server Error</h5><p>表示服务器出现了问题，返回的内容可能不稳定，因此不应被中间缓存。</p>\n<h4 id=\"private-使用场景\"><a href=\"#private-使用场景\" class=\"headerlink\" title=\"private 使用场景\"></a>private 使用场景</h4><h5 id=\"（1）用户特定数据\"><a href=\"#（1）用户特定数据\" class=\"headerlink\" title=\"（1）用户特定数据\"></a>（1）用户特定数据</h5><p>如个性化推荐、用户历史记录等，仅对特定用户合适，其他用户无法访问，即便返回成功状态，为了保护用户隐私，建议使用 private。</p>\n<h5 id=\"（2）临时性数据\"><a href=\"#（2）临时性数据\" class=\"headerlink\" title=\"（2）临时性数据\"></a>（2）临时性数据</h5><p>如操作结果、表单提交后给予反馈的信息等，这类信息通常只需当前用户知道，对其他用户无意义，适合标记为 private。</p>\n"},{"title":"DNS","date":"2024-10-18T13:30:22.000Z","_content":"\n## 一、定义\n\nDNS 是：\n\n- 一个使得主机能够查询分布式数据库的**应用层协议**\n- 一个由分层的 DNS 服务器实现的**分布式数据库**\n\n（1）DNS 是一个分布式数据库，整个 DNS 系统由分散在世界各地的很多 DNS 服务器组成，每台服务器上都保存了一些数据，可以让我们最终查到主机名对应的 IP。\n\n（2）DNS 是一个应用层协议，发送一个包含所查询主机名的请求，它会返回该主机名对应的 IP。\n\n**分布式：** 世界上没有一台 DNS 服务器拥有因特网上所有主机的映射，每台 DNS 只负责部分映射。\n\n## 二、层次\n\nDNS 服务器有 3 种类型：\n\n- 根 DNS 服务器\n- 顶级域（Top-Level Domain, TLD）\n- DNS 服务器\n- 权威 DNS 服务器\n\n![图1](https://img1.baidu.com/it/u=2736501838,3539264290&fm=253&fmt=auto&app=138&f=PNG?w=722&h=408)\n\n### 1、根 DNS 服务器\n\n比如 `www.baidu.com`，其完整写法是 `www.baidu.com.`，最后的这个 `.` 就是根域名。\n\n通过询问根 DNS 服务器，可以知道它的下一级，也就是顶级域 DNS 服务器的 IP 是多少，从而继续向顶级域 DNS 服务器发起查询请求。\n\n### 2、顶级域 DNS 服务器\n\n除了前面提到的 `com` 是顶级域名，常见的顶级域名还有 `cn`、`org`、`edu` 等。顶级域 DNS 服务器，也就是 TLD，提供了它的下一级，也就是权威 DNS 服务器的 IP 地址。\n\n### 3、权威 DNS 服务器\n\n权威 DNS 服务器可以返回主机和IP之间的最终映射。\n\n## 三、本地 DNS 服务器\n\n每个 ISP（Internet Server Provider, 网络服务提供商）都有一台本地 DNS 服务器，比如一个居民区的 ISP、一个大学的 ISP、一个机构的 ISP，都有一台或多台本地 DNS 服务器。\n\n当主机发出 DNS 请求时，该请求被发往本地 DNS 服务器，**本地 DNS 服务器起着代理的作用，并负责将该请求转发到 DNS 服务器层次结构中。**\n\n严格来说，本地 DNS 服务器不属于 DNS 的层次结构。\n\n## 四、递归查询、迭代查询\n\n如下图，假设主机 m.n.com 想要获取主机 a.b.com 的 IP 地址，会经过以下几个步骤：\n\n![图2](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6bb796a3045e409aabb0f89ad40d3fad~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.webp)\n\n（1）首先，主机 m.n.com 向它的本地 DNS 服务器发送一个 DNS 查询报文，包含期待被转换的主机名 a.b.com；\n\n（2）本地 DNS 服务器将该报文转发到根 DNS 服务器；\n\n（3）该根 DNS 服务器注意到 com 前缀，向本地 DNS 服务器返回 com 对应的顶级域 DNS 服务器（TLD）的 IP 地址列表。\n\n（4）本地 DNS 服务器则向其中一台 TLD 服务器发送查询报文；\n\n（5）该 TLD 服务器注意到 b.com 前缀，向本地 DNS 服务器返回权威 DNS 服务器的 IP 地址。\n\n（6）本地 DNS 服务器又向其中一台权威服务器发送查询报文；\n\n（7）该权威服务器返回了 a.b.com 的 IP 地址；\n\n（8）本地 DNS 服务器将 a.b.com 跟 IP 地址的映射返回给主机 m.n.com，m.n.com 就可以用该 IP 向 a.b.com 发送请求了。\n\n### 1、递归\n\n主机 m.n.com 向本地 DNS 服务器 dns.n.com 发出的查询就是递归查询，这个查询是主机 m.n.com 以自己的名义向本地 DNS 服务器请求想要的 IP 映射，并且本地 DNS 服务器直接返回映射结果给到主机。\n\n### 2、迭代\n\n而后继的三个查询是迭代查询，包括本地 DNS 服务器向根 DNS 服务器发送查询请求、本地 DNS 服务器向 TLD 服务器发送查询请求、本地 DNS 服务器向权威 DNS 服务器发送查询请求，所有的请求都是由本地 DNS 服务器发出，所有的响应都是直接返回给本地 DNS 服务器。\n\n### 3、另一种 DNS 查询\n\n从理论上讲，任何 DNS 查询既可以是递归的，也可以是迭代的。下图的所有查询就都是递归的，不包含迭代。\n\n![图3](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bd1422f81c2647a19cde72cb9694bc89~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.webp)\n\n#### TLD 一定知道权威 DNS 服务器的 IP 地址吗？\n\n不一定，有时 TLD 只是知道中间的某个 DNS 服务器，再由这个中间 DNS 服务器去找到权威 DNS 服务器。\n\n这种情况不仅增加了延迟，还使得网络上需要传输更多的数据包，也会产生更多的 DNS 报文。\n\n## 五、DNS 优化\n\n### 1、DNS 缓存\n\nDNS 存在多级缓存，从离浏览器的距离排序，有以下几种：\n浏览器缓存，系统缓存，路由器缓存，IPS 服务器缓存，根域名服务器缓存，顶级域名服务器缓存，主域名服务器缓存。\n\n- 在chrome浏览器中输入 `chrome://net-internals/#dns`，可以看到chrome浏览器的DNS缓存\n- 系统缓存主要存在 `/etc/hosts` （Linux系统）中\n\n缓存并不是永久的，每一条映射记录都有对应的生存时间，一旦过了生存时间，该条记录就会从缓存移出。\n\n### 2、DNS 负载均衡\n\n访问某网站的时候，每次响应的很可能不是同一个服务器（IP 地址不同），因为一般公司都有多台服务器来支撑访问，而 DNS 会返回一个合适的机器的 IP 给用户（**根据每台机器的负载量、该机器和用户地理位置的距离等**），这就是 DNS 负载均衡。\n","source":"_posts/25-DNS.md","raw":"---\ntitle: DNS\ndate: 2024-10-18 21:30:22\ntags:\n    - 面经\n    - 计算机网络\n    - DNS\ncategories:\n    - 计算机网络\n      - DNS\n---\n\n## 一、定义\n\nDNS 是：\n\n- 一个使得主机能够查询分布式数据库的**应用层协议**\n- 一个由分层的 DNS 服务器实现的**分布式数据库**\n\n（1）DNS 是一个分布式数据库，整个 DNS 系统由分散在世界各地的很多 DNS 服务器组成，每台服务器上都保存了一些数据，可以让我们最终查到主机名对应的 IP。\n\n（2）DNS 是一个应用层协议，发送一个包含所查询主机名的请求，它会返回该主机名对应的 IP。\n\n**分布式：** 世界上没有一台 DNS 服务器拥有因特网上所有主机的映射，每台 DNS 只负责部分映射。\n\n## 二、层次\n\nDNS 服务器有 3 种类型：\n\n- 根 DNS 服务器\n- 顶级域（Top-Level Domain, TLD）\n- DNS 服务器\n- 权威 DNS 服务器\n\n![图1](https://img1.baidu.com/it/u=2736501838,3539264290&fm=253&fmt=auto&app=138&f=PNG?w=722&h=408)\n\n### 1、根 DNS 服务器\n\n比如 `www.baidu.com`，其完整写法是 `www.baidu.com.`，最后的这个 `.` 就是根域名。\n\n通过询问根 DNS 服务器，可以知道它的下一级，也就是顶级域 DNS 服务器的 IP 是多少，从而继续向顶级域 DNS 服务器发起查询请求。\n\n### 2、顶级域 DNS 服务器\n\n除了前面提到的 `com` 是顶级域名，常见的顶级域名还有 `cn`、`org`、`edu` 等。顶级域 DNS 服务器，也就是 TLD，提供了它的下一级，也就是权威 DNS 服务器的 IP 地址。\n\n### 3、权威 DNS 服务器\n\n权威 DNS 服务器可以返回主机和IP之间的最终映射。\n\n## 三、本地 DNS 服务器\n\n每个 ISP（Internet Server Provider, 网络服务提供商）都有一台本地 DNS 服务器，比如一个居民区的 ISP、一个大学的 ISP、一个机构的 ISP，都有一台或多台本地 DNS 服务器。\n\n当主机发出 DNS 请求时，该请求被发往本地 DNS 服务器，**本地 DNS 服务器起着代理的作用，并负责将该请求转发到 DNS 服务器层次结构中。**\n\n严格来说，本地 DNS 服务器不属于 DNS 的层次结构。\n\n## 四、递归查询、迭代查询\n\n如下图，假设主机 m.n.com 想要获取主机 a.b.com 的 IP 地址，会经过以下几个步骤：\n\n![图2](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6bb796a3045e409aabb0f89ad40d3fad~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.webp)\n\n（1）首先，主机 m.n.com 向它的本地 DNS 服务器发送一个 DNS 查询报文，包含期待被转换的主机名 a.b.com；\n\n（2）本地 DNS 服务器将该报文转发到根 DNS 服务器；\n\n（3）该根 DNS 服务器注意到 com 前缀，向本地 DNS 服务器返回 com 对应的顶级域 DNS 服务器（TLD）的 IP 地址列表。\n\n（4）本地 DNS 服务器则向其中一台 TLD 服务器发送查询报文；\n\n（5）该 TLD 服务器注意到 b.com 前缀，向本地 DNS 服务器返回权威 DNS 服务器的 IP 地址。\n\n（6）本地 DNS 服务器又向其中一台权威服务器发送查询报文；\n\n（7）该权威服务器返回了 a.b.com 的 IP 地址；\n\n（8）本地 DNS 服务器将 a.b.com 跟 IP 地址的映射返回给主机 m.n.com，m.n.com 就可以用该 IP 向 a.b.com 发送请求了。\n\n### 1、递归\n\n主机 m.n.com 向本地 DNS 服务器 dns.n.com 发出的查询就是递归查询，这个查询是主机 m.n.com 以自己的名义向本地 DNS 服务器请求想要的 IP 映射，并且本地 DNS 服务器直接返回映射结果给到主机。\n\n### 2、迭代\n\n而后继的三个查询是迭代查询，包括本地 DNS 服务器向根 DNS 服务器发送查询请求、本地 DNS 服务器向 TLD 服务器发送查询请求、本地 DNS 服务器向权威 DNS 服务器发送查询请求，所有的请求都是由本地 DNS 服务器发出，所有的响应都是直接返回给本地 DNS 服务器。\n\n### 3、另一种 DNS 查询\n\n从理论上讲，任何 DNS 查询既可以是递归的，也可以是迭代的。下图的所有查询就都是递归的，不包含迭代。\n\n![图3](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bd1422f81c2647a19cde72cb9694bc89~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.webp)\n\n#### TLD 一定知道权威 DNS 服务器的 IP 地址吗？\n\n不一定，有时 TLD 只是知道中间的某个 DNS 服务器，再由这个中间 DNS 服务器去找到权威 DNS 服务器。\n\n这种情况不仅增加了延迟，还使得网络上需要传输更多的数据包，也会产生更多的 DNS 报文。\n\n## 五、DNS 优化\n\n### 1、DNS 缓存\n\nDNS 存在多级缓存，从离浏览器的距离排序，有以下几种：\n浏览器缓存，系统缓存，路由器缓存，IPS 服务器缓存，根域名服务器缓存，顶级域名服务器缓存，主域名服务器缓存。\n\n- 在chrome浏览器中输入 `chrome://net-internals/#dns`，可以看到chrome浏览器的DNS缓存\n- 系统缓存主要存在 `/etc/hosts` （Linux系统）中\n\n缓存并不是永久的，每一条映射记录都有对应的生存时间，一旦过了生存时间，该条记录就会从缓存移出。\n\n### 2、DNS 负载均衡\n\n访问某网站的时候，每次响应的很可能不是同一个服务器（IP 地址不同），因为一般公司都有多台服务器来支撑访问，而 DNS 会返回一个合适的机器的 IP 给用户（**根据每台机器的负载量、该机器和用户地理位置的距离等**），这就是 DNS 负载均衡。\n","slug":"25-DNS","published":1,"updated":"2025-01-02T16:09:34.018Z","_id":"cm2iekyw20000g1w6b20dd9f0","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、定义\"><a href=\"#一、定义\" class=\"headerlink\" title=\"一、定义\"></a>一、定义</h2><p>DNS 是：</p>\n<ul>\n<li>一个使得主机能够查询分布式数据库的<strong>应用层协议</strong></li>\n<li>一个由分层的 DNS 服务器实现的<strong>分布式数据库</strong></li>\n</ul>\n<p>（1）DNS 是一个分布式数据库，整个 DNS 系统由分散在世界各地的很多 DNS 服务器组成，每台服务器上都保存了一些数据，可以让我们最终查到主机名对应的 IP。</p>\n<p>（2）DNS 是一个应用层协议，发送一个包含所查询主机名的请求，它会返回该主机名对应的 IP。</p>\n<p><strong>分布式：</strong> 世界上没有一台 DNS 服务器拥有因特网上所有主机的映射，每台 DNS 只负责部分映射。</p>\n<h2 id=\"二、层次\"><a href=\"#二、层次\" class=\"headerlink\" title=\"二、层次\"></a>二、层次</h2><p>DNS 服务器有 3 种类型：</p>\n<ul>\n<li>根 DNS 服务器</li>\n<li>顶级域（Top-Level Domain, TLD）</li>\n<li>DNS 服务器</li>\n<li>权威 DNS 服务器</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://img1.baidu.com/it/u=2736501838,3539264290&fm=253&fmt=auto&app=138&f=PNG?w=722&h=408\"\n                      alt=\"图1\"\n                ></p>\n<h3 id=\"1、根-DNS-服务器\"><a href=\"#1、根-DNS-服务器\" class=\"headerlink\" title=\"1、根 DNS 服务器\"></a>1、根 DNS 服务器</h3><p>比如 <code>www.baidu.com</code>，其完整写法是 <code>www.baidu.com.</code>，最后的这个 <code>.</code> 就是根域名。</p>\n<p>通过询问根 DNS 服务器，可以知道它的下一级，也就是顶级域 DNS 服务器的 IP 是多少，从而继续向顶级域 DNS 服务器发起查询请求。</p>\n<h3 id=\"2、顶级域-DNS-服务器\"><a href=\"#2、顶级域-DNS-服务器\" class=\"headerlink\" title=\"2、顶级域 DNS 服务器\"></a>2、顶级域 DNS 服务器</h3><p>除了前面提到的 <code>com</code> 是顶级域名，常见的顶级域名还有 <code>cn</code>、<code>org</code>、<code>edu</code> 等。顶级域 DNS 服务器，也就是 TLD，提供了它的下一级，也就是权威 DNS 服务器的 IP 地址。</p>\n<h3 id=\"3、权威-DNS-服务器\"><a href=\"#3、权威-DNS-服务器\" class=\"headerlink\" title=\"3、权威 DNS 服务器\"></a>3、权威 DNS 服务器</h3><p>权威 DNS 服务器可以返回主机和IP之间的最终映射。</p>\n<h2 id=\"三、本地-DNS-服务器\"><a href=\"#三、本地-DNS-服务器\" class=\"headerlink\" title=\"三、本地 DNS 服务器\"></a>三、本地 DNS 服务器</h2><p>每个 ISP（Internet Server Provider, 网络服务提供商）都有一台本地 DNS 服务器，比如一个居民区的 ISP、一个大学的 ISP、一个机构的 ISP，都有一台或多台本地 DNS 服务器。</p>\n<p>当主机发出 DNS 请求时，该请求被发往本地 DNS 服务器，<strong>本地 DNS 服务器起着代理的作用，并负责将该请求转发到 DNS 服务器层次结构中。</strong></p>\n<p>严格来说，本地 DNS 服务器不属于 DNS 的层次结构。</p>\n<h2 id=\"四、递归查询、迭代查询\"><a href=\"#四、递归查询、迭代查询\" class=\"headerlink\" title=\"四、递归查询、迭代查询\"></a>四、递归查询、迭代查询</h2><p>如下图，假设主机 m.n.com 想要获取主机 a.b.com 的 IP 地址，会经过以下几个步骤：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6bb796a3045e409aabb0f89ad40d3fad~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.webp\"\n                      alt=\"图2\"\n                ></p>\n<p>（1）首先，主机 m.n.com 向它的本地 DNS 服务器发送一个 DNS 查询报文，包含期待被转换的主机名 a.b.com；</p>\n<p>（2）本地 DNS 服务器将该报文转发到根 DNS 服务器；</p>\n<p>（3）该根 DNS 服务器注意到 com 前缀，向本地 DNS 服务器返回 com 对应的顶级域 DNS 服务器（TLD）的 IP 地址列表。</p>\n<p>（4）本地 DNS 服务器则向其中一台 TLD 服务器发送查询报文；</p>\n<p>（5）该 TLD 服务器注意到 b.com 前缀，向本地 DNS 服务器返回权威 DNS 服务器的 IP 地址。</p>\n<p>（6）本地 DNS 服务器又向其中一台权威服务器发送查询报文；</p>\n<p>（7）该权威服务器返回了 a.b.com 的 IP 地址；</p>\n<p>（8）本地 DNS 服务器将 a.b.com 跟 IP 地址的映射返回给主机 m.n.com，m.n.com 就可以用该 IP 向 a.b.com 发送请求了。</p>\n<h3 id=\"1、递归\"><a href=\"#1、递归\" class=\"headerlink\" title=\"1、递归\"></a>1、递归</h3><p>主机 m.n.com 向本地 DNS 服务器 dns.n.com 发出的查询就是递归查询，这个查询是主机 m.n.com 以自己的名义向本地 DNS 服务器请求想要的 IP 映射，并且本地 DNS 服务器直接返回映射结果给到主机。</p>\n<h3 id=\"2、迭代\"><a href=\"#2、迭代\" class=\"headerlink\" title=\"2、迭代\"></a>2、迭代</h3><p>而后继的三个查询是迭代查询，包括本地 DNS 服务器向根 DNS 服务器发送查询请求、本地 DNS 服务器向 TLD 服务器发送查询请求、本地 DNS 服务器向权威 DNS 服务器发送查询请求，所有的请求都是由本地 DNS 服务器发出，所有的响应都是直接返回给本地 DNS 服务器。</p>\n<h3 id=\"3、另一种-DNS-查询\"><a href=\"#3、另一种-DNS-查询\" class=\"headerlink\" title=\"3、另一种 DNS 查询\"></a>3、另一种 DNS 查询</h3><p>从理论上讲，任何 DNS 查询既可以是递归的，也可以是迭代的。下图的所有查询就都是递归的，不包含迭代。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bd1422f81c2647a19cde72cb9694bc89~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.webp\"\n                      alt=\"图3\"\n                ></p>\n<h4 id=\"TLD-一定知道权威-DNS-服务器的-IP-地址吗？\"><a href=\"#TLD-一定知道权威-DNS-服务器的-IP-地址吗？\" class=\"headerlink\" title=\"TLD 一定知道权威 DNS 服务器的 IP 地址吗？\"></a>TLD 一定知道权威 DNS 服务器的 IP 地址吗？</h4><p>不一定，有时 TLD 只是知道中间的某个 DNS 服务器，再由这个中间 DNS 服务器去找到权威 DNS 服务器。</p>\n<p>这种情况不仅增加了延迟，还使得网络上需要传输更多的数据包，也会产生更多的 DNS 报文。</p>\n<h2 id=\"五、DNS-优化\"><a href=\"#五、DNS-优化\" class=\"headerlink\" title=\"五、DNS 优化\"></a>五、DNS 优化</h2><h3 id=\"1、DNS-缓存\"><a href=\"#1、DNS-缓存\" class=\"headerlink\" title=\"1、DNS 缓存\"></a>1、DNS 缓存</h3><p>DNS 存在多级缓存，从离浏览器的距离排序，有以下几种：<br>浏览器缓存，系统缓存，路由器缓存，IPS 服务器缓存，根域名服务器缓存，顶级域名服务器缓存，主域名服务器缓存。</p>\n<ul>\n<li>在chrome浏览器中输入 <code>chrome://net-internals/#dns</code>，可以看到chrome浏览器的DNS缓存</li>\n<li>系统缓存主要存在 <code>/etc/hosts</code> （Linux系统）中</li>\n</ul>\n<p>缓存并不是永久的，每一条映射记录都有对应的生存时间，一旦过了生存时间，该条记录就会从缓存移出。</p>\n<h3 id=\"2、DNS-负载均衡\"><a href=\"#2、DNS-负载均衡\" class=\"headerlink\" title=\"2、DNS 负载均衡\"></a>2、DNS 负载均衡</h3><p>访问某网站的时候，每次响应的很可能不是同一个服务器（IP 地址不同），因为一般公司都有多台服务器来支撑访问，而 DNS 会返回一个合适的机器的 IP 给用户（<strong>根据每台机器的负载量、该机器和用户地理位置的距离等</strong>），这就是 DNS 负载均衡。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、定义\"><a href=\"#一、定义\" class=\"headerlink\" title=\"一、定义\"></a>一、定义</h2><p>DNS 是：</p>\n<ul>\n<li>一个使得主机能够查询分布式数据库的<strong>应用层协议</strong></li>\n<li>一个由分层的 DNS 服务器实现的<strong>分布式数据库</strong></li>\n</ul>\n<p>（1）DNS 是一个分布式数据库，整个 DNS 系统由分散在世界各地的很多 DNS 服务器组成，每台服务器上都保存了一些数据，可以让我们最终查到主机名对应的 IP。</p>\n<p>（2）DNS 是一个应用层协议，发送一个包含所查询主机名的请求，它会返回该主机名对应的 IP。</p>\n<p><strong>分布式：</strong> 世界上没有一台 DNS 服务器拥有因特网上所有主机的映射，每台 DNS 只负责部分映射。</p>\n<h2 id=\"二、层次\"><a href=\"#二、层次\" class=\"headerlink\" title=\"二、层次\"></a>二、层次</h2><p>DNS 服务器有 3 种类型：</p>\n<ul>\n<li>根 DNS 服务器</li>\n<li>顶级域（Top-Level Domain, TLD）</li>\n<li>DNS 服务器</li>\n<li>权威 DNS 服务器</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://img1.baidu.com/it/u=2736501838,3539264290&fm=253&fmt=auto&app=138&f=PNG?w=722&h=408\"\n                      alt=\"图1\"\n                ></p>\n<h3 id=\"1、根-DNS-服务器\"><a href=\"#1、根-DNS-服务器\" class=\"headerlink\" title=\"1、根 DNS 服务器\"></a>1、根 DNS 服务器</h3><p>比如 <code>www.baidu.com</code>，其完整写法是 <code>www.baidu.com.</code>，最后的这个 <code>.</code> 就是根域名。</p>\n<p>通过询问根 DNS 服务器，可以知道它的下一级，也就是顶级域 DNS 服务器的 IP 是多少，从而继续向顶级域 DNS 服务器发起查询请求。</p>\n<h3 id=\"2、顶级域-DNS-服务器\"><a href=\"#2、顶级域-DNS-服务器\" class=\"headerlink\" title=\"2、顶级域 DNS 服务器\"></a>2、顶级域 DNS 服务器</h3><p>除了前面提到的 <code>com</code> 是顶级域名，常见的顶级域名还有 <code>cn</code>、<code>org</code>、<code>edu</code> 等。顶级域 DNS 服务器，也就是 TLD，提供了它的下一级，也就是权威 DNS 服务器的 IP 地址。</p>\n<h3 id=\"3、权威-DNS-服务器\"><a href=\"#3、权威-DNS-服务器\" class=\"headerlink\" title=\"3、权威 DNS 服务器\"></a>3、权威 DNS 服务器</h3><p>权威 DNS 服务器可以返回主机和IP之间的最终映射。</p>\n<h2 id=\"三、本地-DNS-服务器\"><a href=\"#三、本地-DNS-服务器\" class=\"headerlink\" title=\"三、本地 DNS 服务器\"></a>三、本地 DNS 服务器</h2><p>每个 ISP（Internet Server Provider, 网络服务提供商）都有一台本地 DNS 服务器，比如一个居民区的 ISP、一个大学的 ISP、一个机构的 ISP，都有一台或多台本地 DNS 服务器。</p>\n<p>当主机发出 DNS 请求时，该请求被发往本地 DNS 服务器，<strong>本地 DNS 服务器起着代理的作用，并负责将该请求转发到 DNS 服务器层次结构中。</strong></p>\n<p>严格来说，本地 DNS 服务器不属于 DNS 的层次结构。</p>\n<h2 id=\"四、递归查询、迭代查询\"><a href=\"#四、递归查询、迭代查询\" class=\"headerlink\" title=\"四、递归查询、迭代查询\"></a>四、递归查询、迭代查询</h2><p>如下图，假设主机 m.n.com 想要获取主机 a.b.com 的 IP 地址，会经过以下几个步骤：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6bb796a3045e409aabb0f89ad40d3fad~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.webp\"\n                      alt=\"图2\"\n                ></p>\n<p>（1）首先，主机 m.n.com 向它的本地 DNS 服务器发送一个 DNS 查询报文，包含期待被转换的主机名 a.b.com；</p>\n<p>（2）本地 DNS 服务器将该报文转发到根 DNS 服务器；</p>\n<p>（3）该根 DNS 服务器注意到 com 前缀，向本地 DNS 服务器返回 com 对应的顶级域 DNS 服务器（TLD）的 IP 地址列表。</p>\n<p>（4）本地 DNS 服务器则向其中一台 TLD 服务器发送查询报文；</p>\n<p>（5）该 TLD 服务器注意到 b.com 前缀，向本地 DNS 服务器返回权威 DNS 服务器的 IP 地址。</p>\n<p>（6）本地 DNS 服务器又向其中一台权威服务器发送查询报文；</p>\n<p>（7）该权威服务器返回了 a.b.com 的 IP 地址；</p>\n<p>（8）本地 DNS 服务器将 a.b.com 跟 IP 地址的映射返回给主机 m.n.com，m.n.com 就可以用该 IP 向 a.b.com 发送请求了。</p>\n<h3 id=\"1、递归\"><a href=\"#1、递归\" class=\"headerlink\" title=\"1、递归\"></a>1、递归</h3><p>主机 m.n.com 向本地 DNS 服务器 dns.n.com 发出的查询就是递归查询，这个查询是主机 m.n.com 以自己的名义向本地 DNS 服务器请求想要的 IP 映射，并且本地 DNS 服务器直接返回映射结果给到主机。</p>\n<h3 id=\"2、迭代\"><a href=\"#2、迭代\" class=\"headerlink\" title=\"2、迭代\"></a>2、迭代</h3><p>而后继的三个查询是迭代查询，包括本地 DNS 服务器向根 DNS 服务器发送查询请求、本地 DNS 服务器向 TLD 服务器发送查询请求、本地 DNS 服务器向权威 DNS 服务器发送查询请求，所有的请求都是由本地 DNS 服务器发出，所有的响应都是直接返回给本地 DNS 服务器。</p>\n<h3 id=\"3、另一种-DNS-查询\"><a href=\"#3、另一种-DNS-查询\" class=\"headerlink\" title=\"3、另一种 DNS 查询\"></a>3、另一种 DNS 查询</h3><p>从理论上讲，任何 DNS 查询既可以是递归的，也可以是迭代的。下图的所有查询就都是递归的，不包含迭代。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bd1422f81c2647a19cde72cb9694bc89~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.webp\"\n                      alt=\"图3\"\n                ></p>\n<h4 id=\"TLD-一定知道权威-DNS-服务器的-IP-地址吗？\"><a href=\"#TLD-一定知道权威-DNS-服务器的-IP-地址吗？\" class=\"headerlink\" title=\"TLD 一定知道权威 DNS 服务器的 IP 地址吗？\"></a>TLD 一定知道权威 DNS 服务器的 IP 地址吗？</h4><p>不一定，有时 TLD 只是知道中间的某个 DNS 服务器，再由这个中间 DNS 服务器去找到权威 DNS 服务器。</p>\n<p>这种情况不仅增加了延迟，还使得网络上需要传输更多的数据包，也会产生更多的 DNS 报文。</p>\n<h2 id=\"五、DNS-优化\"><a href=\"#五、DNS-优化\" class=\"headerlink\" title=\"五、DNS 优化\"></a>五、DNS 优化</h2><h3 id=\"1、DNS-缓存\"><a href=\"#1、DNS-缓存\" class=\"headerlink\" title=\"1、DNS 缓存\"></a>1、DNS 缓存</h3><p>DNS 存在多级缓存，从离浏览器的距离排序，有以下几种：<br>浏览器缓存，系统缓存，路由器缓存，IPS 服务器缓存，根域名服务器缓存，顶级域名服务器缓存，主域名服务器缓存。</p>\n<ul>\n<li>在chrome浏览器中输入 <code>chrome://net-internals/#dns</code>，可以看到chrome浏览器的DNS缓存</li>\n<li>系统缓存主要存在 <code>/etc/hosts</code> （Linux系统）中</li>\n</ul>\n<p>缓存并不是永久的，每一条映射记录都有对应的生存时间，一旦过了生存时间，该条记录就会从缓存移出。</p>\n<h3 id=\"2、DNS-负载均衡\"><a href=\"#2、DNS-负载均衡\" class=\"headerlink\" title=\"2、DNS 负载均衡\"></a>2、DNS 负载均衡</h3><p>访问某网站的时候，每次响应的很可能不是同一个服务器（IP 地址不同），因为一般公司都有多台服务器来支撑访问，而 DNS 会返回一个合适的机器的 IP 给用户（<strong>根据每台机器的负载量、该机器和用户地理位置的距离等</strong>），这就是 DNS 负载均衡。</p>\n"},{"title":"CDN","date":"2024-10-29T01:15:20.000Z","_content":"\n## 一、概念\n\nCDN 全称为 “Content Delivery Network”，即内容分发网络。\nCDN 是一种特殊的 DNS服务器。\n\n## 二、原理\n\n当使用域名访问某一个网站时（比如访问 `www.baidu.com`），分为两步：\n\n- 首先解析出该域名所对应的 IP地址（DNS 域名解析）\n- 然后将 Http请求包 路由到 IP地址 所对应的服务器\n\n（注：IP地址和网卡相绑定，一个服务器可以有多个网卡，即可能有多个IP地址）\n\n### 1、域名解析\n\n域名解析分为两种：\n\n- 将域名解析为IP地址\n- 将域名解析为另一个域名（CNAME）\n\n购买一个域名之后，需要去映射一个 IP地址，用 Map 表示：{域名：IP}。\n也可以给某域名取一个别名，比如给 `www.baidu.com` 取一个别名 `test.baidu.com`，用 Map 表示：{域名：CNAME}，这里的CNAME就是别名。\n\n**域名解析，实际上就是解析出指定域名所对应的 IP地址，或该域名的一个 CNAME。**\n\n没有CNAME的情况：\n![图1](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/7/16/16bf9e293d4bc895~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.webp#?w=1004&h=474&s=41808&e=png&b=fefbfb)\n\n有CNAME的情况：\n![图1](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/7/16/16bf9e293e8c88d4~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.webp#?w=1012&h=468&s=46488&e=png&b=fefafa)\n\n特别注意：在有 CNAME 的情况下，CNAME 在域名解析的过程中承担了代理的角色，这是 CDN 实现的关键。\n\n### 2、资源分类\n\n服务器上的资源分为两种：\n\n- 静态资源：这种资源通常很少变动，比如图片，视频，css，js 等等\n- 动态资源：这种资源不同用户不同时刻访问通常是不一样的，比如 ftl，jsp 等等。\n\n#### （1）集群（动态资源）\n\n在全国各地部署服务器，每个服务器上都有相同的动态资源，并且还需配置相应的数据库，这就涉及到数据同步等问题。这种做法专业一点就是集群，目前集群架构最多是三地五中心，因为全国多地集群成本太高。\n\n#### （2）CDN服务器（静态资源）\n\n在每个服务器上只部署静态资源是成本较低的方式，因为静态资源通常不涉及数据库，也能提高用户访问速度。\n\n现在有很多 CDN供应商，只要把系统接入并将静态资源传给 CDN服务，这些静态资源将会自动分布到世界各地。\n\n在访问静态资源时，DNS系统 进行域名解析的过程中，如何解析出离用户最近的 IP地址？\n这就需要使用 CDN服务器，该服务器知道用户当前所在位置，和用户访问的域名对应哪些 IP地址，及这些 IP地址 分别在哪。\n\n这样，只要用户在通过某域名访问静态资源时，**配置自己电脑的 DNS地址 为 CDN专用DNS服务器**，就可以解决问题了，但不能要求所有用户都去修改自己电脑的 DNS地址，这时就要利用 DNS 中的 CNAME 了。\n\n### 3、负载均衡和缓存\n\n#### （1）负载均衡系统\n\n如果没有返回 IP地址，本地DNS服务器 会向对应的 CDN服务器 再次发送请求，通过 CDN负载均衡系统 进行智能调度：\n\n- 看用户的 IP 地址，查表得知**地理位置**，找相对最近的边缘节点\n- 看用户所在的**运营商网络**，找相同网络的边缘节点\n- 检查边缘节点的**负载情况**，找负载较轻的节点\n- 其他，比如节点的“健康状况”、服务能力、带宽、响应时间等\n\n结合以上因素，得到最合适的边缘节点，并把该节点返回给用户，用户就能就近访问 CDN 的缓存代理。\n\n整体流程如下：\n\n![图3](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/7/16/16bf9e293edf212d~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.webp#?w=1090&h=720&s=68194&e=png&b=fefcfc)\n\n#### （2）缓存代理\n\n缓存系统是 CDN 的另一个关键组成部分，缓存系统会缓存最常用的资源，有两个衡量 CDN服务质量 的指标：\n\n- **命中率**：用户访问的资源恰好在缓存系统里，可直接返回给用户，命中次数与所有访问次数之比\n- **回源率**：缓存里没有，必须用代理的方式回源站取，回源次数与所有访问次数之比\n\n缓存系统可以划分层次为：一级缓存节点和二级缓存节点，一级缓存直连源站，二级缓存直连用户。\n在回源时，二级缓存首先找一级缓存，一级缓存没有才回源站，可有效减少真正的回源。\n\n![图4](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6db24ee3dcb84eed84b7736b09bdaec9~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.webp)\n\n现在的商业 CDN命中率都在 90% 以上，相当于把源站的服务能力放大了 10 倍以上\n\n#### 补充\n\n域名解析有多种记录类型，最常用的有：\n\n- **A记录：一个域名对应一个IP地址**\n- **CNAME：一个域名对应另外一个域名**\n- NS：将子域名指定其他DNS服务器解析\n","source":"_posts/26-CDN.md","raw":"---\ntitle: CDN\ndate: 2024-10-29 09:15:20\ntags:\n    - 面经\n    - 计算机网络\n    - CDN\ncategories:\n    - 计算机网络\n      - CDN\n---\n\n## 一、概念\n\nCDN 全称为 “Content Delivery Network”，即内容分发网络。\nCDN 是一种特殊的 DNS服务器。\n\n## 二、原理\n\n当使用域名访问某一个网站时（比如访问 `www.baidu.com`），分为两步：\n\n- 首先解析出该域名所对应的 IP地址（DNS 域名解析）\n- 然后将 Http请求包 路由到 IP地址 所对应的服务器\n\n（注：IP地址和网卡相绑定，一个服务器可以有多个网卡，即可能有多个IP地址）\n\n### 1、域名解析\n\n域名解析分为两种：\n\n- 将域名解析为IP地址\n- 将域名解析为另一个域名（CNAME）\n\n购买一个域名之后，需要去映射一个 IP地址，用 Map 表示：{域名：IP}。\n也可以给某域名取一个别名，比如给 `www.baidu.com` 取一个别名 `test.baidu.com`，用 Map 表示：{域名：CNAME}，这里的CNAME就是别名。\n\n**域名解析，实际上就是解析出指定域名所对应的 IP地址，或该域名的一个 CNAME。**\n\n没有CNAME的情况：\n![图1](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/7/16/16bf9e293d4bc895~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.webp#?w=1004&h=474&s=41808&e=png&b=fefbfb)\n\n有CNAME的情况：\n![图1](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/7/16/16bf9e293e8c88d4~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.webp#?w=1012&h=468&s=46488&e=png&b=fefafa)\n\n特别注意：在有 CNAME 的情况下，CNAME 在域名解析的过程中承担了代理的角色，这是 CDN 实现的关键。\n\n### 2、资源分类\n\n服务器上的资源分为两种：\n\n- 静态资源：这种资源通常很少变动，比如图片，视频，css，js 等等\n- 动态资源：这种资源不同用户不同时刻访问通常是不一样的，比如 ftl，jsp 等等。\n\n#### （1）集群（动态资源）\n\n在全国各地部署服务器，每个服务器上都有相同的动态资源，并且还需配置相应的数据库，这就涉及到数据同步等问题。这种做法专业一点就是集群，目前集群架构最多是三地五中心，因为全国多地集群成本太高。\n\n#### （2）CDN服务器（静态资源）\n\n在每个服务器上只部署静态资源是成本较低的方式，因为静态资源通常不涉及数据库，也能提高用户访问速度。\n\n现在有很多 CDN供应商，只要把系统接入并将静态资源传给 CDN服务，这些静态资源将会自动分布到世界各地。\n\n在访问静态资源时，DNS系统 进行域名解析的过程中，如何解析出离用户最近的 IP地址？\n这就需要使用 CDN服务器，该服务器知道用户当前所在位置，和用户访问的域名对应哪些 IP地址，及这些 IP地址 分别在哪。\n\n这样，只要用户在通过某域名访问静态资源时，**配置自己电脑的 DNS地址 为 CDN专用DNS服务器**，就可以解决问题了，但不能要求所有用户都去修改自己电脑的 DNS地址，这时就要利用 DNS 中的 CNAME 了。\n\n### 3、负载均衡和缓存\n\n#### （1）负载均衡系统\n\n如果没有返回 IP地址，本地DNS服务器 会向对应的 CDN服务器 再次发送请求，通过 CDN负载均衡系统 进行智能调度：\n\n- 看用户的 IP 地址，查表得知**地理位置**，找相对最近的边缘节点\n- 看用户所在的**运营商网络**，找相同网络的边缘节点\n- 检查边缘节点的**负载情况**，找负载较轻的节点\n- 其他，比如节点的“健康状况”、服务能力、带宽、响应时间等\n\n结合以上因素，得到最合适的边缘节点，并把该节点返回给用户，用户就能就近访问 CDN 的缓存代理。\n\n整体流程如下：\n\n![图3](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/7/16/16bf9e293edf212d~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.webp#?w=1090&h=720&s=68194&e=png&b=fefcfc)\n\n#### （2）缓存代理\n\n缓存系统是 CDN 的另一个关键组成部分，缓存系统会缓存最常用的资源，有两个衡量 CDN服务质量 的指标：\n\n- **命中率**：用户访问的资源恰好在缓存系统里，可直接返回给用户，命中次数与所有访问次数之比\n- **回源率**：缓存里没有，必须用代理的方式回源站取，回源次数与所有访问次数之比\n\n缓存系统可以划分层次为：一级缓存节点和二级缓存节点，一级缓存直连源站，二级缓存直连用户。\n在回源时，二级缓存首先找一级缓存，一级缓存没有才回源站，可有效减少真正的回源。\n\n![图4](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6db24ee3dcb84eed84b7736b09bdaec9~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.webp)\n\n现在的商业 CDN命中率都在 90% 以上，相当于把源站的服务能力放大了 10 倍以上\n\n#### 补充\n\n域名解析有多种记录类型，最常用的有：\n\n- **A记录：一个域名对应一个IP地址**\n- **CNAME：一个域名对应另外一个域名**\n- NS：将子域名指定其他DNS服务器解析\n","slug":"26-CDN","published":1,"updated":"2025-01-02T16:09:26.278Z","_id":"cm32f4ppl0000s4w602ky1eqy","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、概念\"><a href=\"#一、概念\" class=\"headerlink\" title=\"一、概念\"></a>一、概念</h2><p>CDN 全称为 “Content Delivery Network”，即内容分发网络。<br>CDN 是一种特殊的 DNS服务器。</p>\n<h2 id=\"二、原理\"><a href=\"#二、原理\" class=\"headerlink\" title=\"二、原理\"></a>二、原理</h2><p>当使用域名访问某一个网站时（比如访问 <code>www.baidu.com</code>），分为两步：</p>\n<ul>\n<li>首先解析出该域名所对应的 IP地址（DNS 域名解析）</li>\n<li>然后将 Http请求包 路由到 IP地址 所对应的服务器</li>\n</ul>\n<p>（注：IP地址和网卡相绑定，一个服务器可以有多个网卡，即可能有多个IP地址）</p>\n<h3 id=\"1、域名解析\"><a href=\"#1、域名解析\" class=\"headerlink\" title=\"1、域名解析\"></a>1、域名解析</h3><p>域名解析分为两种：</p>\n<ul>\n<li>将域名解析为IP地址</li>\n<li>将域名解析为另一个域名（CNAME）</li>\n</ul>\n<p>购买一个域名之后，需要去映射一个 IP地址，用 Map 表示：{域名：IP}。<br>也可以给某域名取一个别名，比如给 <code>www.baidu.com</code> 取一个别名 <code>test.baidu.com</code>，用 Map 表示：{域名：CNAME}，这里的CNAME就是别名。</p>\n<p><strong>域名解析，实际上就是解析出指定域名所对应的 IP地址，或该域名的一个 CNAME。</strong></p>\n<p>没有CNAME的情况：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/7/16/16bf9e293d4bc895~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.webp#?w=1004&h=474&s=41808&e=png&b=fefbfb\"\n                      alt=\"图1\"\n                ></p>\n<p>有CNAME的情况：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/7/16/16bf9e293e8c88d4~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.webp#?w=1012&h=468&s=46488&e=png&b=fefafa\"\n                      alt=\"图1\"\n                ></p>\n<p>特别注意：在有 CNAME 的情况下，CNAME 在域名解析的过程中承担了代理的角色，这是 CDN 实现的关键。</p>\n<h3 id=\"2、资源分类\"><a href=\"#2、资源分类\" class=\"headerlink\" title=\"2、资源分类\"></a>2、资源分类</h3><p>服务器上的资源分为两种：</p>\n<ul>\n<li>静态资源：这种资源通常很少变动，比如图片，视频，css，js 等等</li>\n<li>动态资源：这种资源不同用户不同时刻访问通常是不一样的，比如 ftl，jsp 等等。</li>\n</ul>\n<h4 id=\"（1）集群（动态资源）\"><a href=\"#（1）集群（动态资源）\" class=\"headerlink\" title=\"（1）集群（动态资源）\"></a>（1）集群（动态资源）</h4><p>在全国各地部署服务器，每个服务器上都有相同的动态资源，并且还需配置相应的数据库，这就涉及到数据同步等问题。这种做法专业一点就是集群，目前集群架构最多是三地五中心，因为全国多地集群成本太高。</p>\n<h4 id=\"（2）CDN服务器（静态资源）\"><a href=\"#（2）CDN服务器（静态资源）\" class=\"headerlink\" title=\"（2）CDN服务器（静态资源）\"></a>（2）CDN服务器（静态资源）</h4><p>在每个服务器上只部署静态资源是成本较低的方式，因为静态资源通常不涉及数据库，也能提高用户访问速度。</p>\n<p>现在有很多 CDN供应商，只要把系统接入并将静态资源传给 CDN服务，这些静态资源将会自动分布到世界各地。</p>\n<p>在访问静态资源时，DNS系统 进行域名解析的过程中，如何解析出离用户最近的 IP地址？<br>这就需要使用 CDN服务器，该服务器知道用户当前所在位置，和用户访问的域名对应哪些 IP地址，及这些 IP地址 分别在哪。</p>\n<p>这样，只要用户在通过某域名访问静态资源时，<strong>配置自己电脑的 DNS地址 为 CDN专用DNS服务器</strong>，就可以解决问题了，但不能要求所有用户都去修改自己电脑的 DNS地址，这时就要利用 DNS 中的 CNAME 了。</p>\n<h3 id=\"3、负载均衡和缓存\"><a href=\"#3、负载均衡和缓存\" class=\"headerlink\" title=\"3、负载均衡和缓存\"></a>3、负载均衡和缓存</h3><h4 id=\"（1）负载均衡系统\"><a href=\"#（1）负载均衡系统\" class=\"headerlink\" title=\"（1）负载均衡系统\"></a>（1）负载均衡系统</h4><p>如果没有返回 IP地址，本地DNS服务器 会向对应的 CDN服务器 再次发送请求，通过 CDN负载均衡系统 进行智能调度：</p>\n<ul>\n<li>看用户的 IP 地址，查表得知<strong>地理位置</strong>，找相对最近的边缘节点</li>\n<li>看用户所在的<strong>运营商网络</strong>，找相同网络的边缘节点</li>\n<li>检查边缘节点的<strong>负载情况</strong>，找负载较轻的节点</li>\n<li>其他，比如节点的“健康状况”、服务能力、带宽、响应时间等</li>\n</ul>\n<p>结合以上因素，得到最合适的边缘节点，并把该节点返回给用户，用户就能就近访问 CDN 的缓存代理。</p>\n<p>整体流程如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/7/16/16bf9e293edf212d~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.webp#?w=1090&h=720&s=68194&e=png&b=fefcfc\"\n                      alt=\"图3\"\n                ></p>\n<h4 id=\"（2）缓存代理\"><a href=\"#（2）缓存代理\" class=\"headerlink\" title=\"（2）缓存代理\"></a>（2）缓存代理</h4><p>缓存系统是 CDN 的另一个关键组成部分，缓存系统会缓存最常用的资源，有两个衡量 CDN服务质量 的指标：</p>\n<ul>\n<li><strong>命中率</strong>：用户访问的资源恰好在缓存系统里，可直接返回给用户，命中次数与所有访问次数之比</li>\n<li><strong>回源率</strong>：缓存里没有，必须用代理的方式回源站取，回源次数与所有访问次数之比</li>\n</ul>\n<p>缓存系统可以划分层次为：一级缓存节点和二级缓存节点，一级缓存直连源站，二级缓存直连用户。<br>在回源时，二级缓存首先找一级缓存，一级缓存没有才回源站，可有效减少真正的回源。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6db24ee3dcb84eed84b7736b09bdaec9~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.webp\"\n                      alt=\"图4\"\n                ></p>\n<p>现在的商业 CDN命中率都在 90% 以上，相当于把源站的服务能力放大了 10 倍以上</p>\n<h4 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h4><p>域名解析有多种记录类型，最常用的有：</p>\n<ul>\n<li><strong>A记录：一个域名对应一个IP地址</strong></li>\n<li><strong>CNAME：一个域名对应另外一个域名</strong></li>\n<li>NS：将子域名指定其他DNS服务器解析</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、概念\"><a href=\"#一、概念\" class=\"headerlink\" title=\"一、概念\"></a>一、概念</h2><p>CDN 全称为 “Content Delivery Network”，即内容分发网络。<br>CDN 是一种特殊的 DNS服务器。</p>\n<h2 id=\"二、原理\"><a href=\"#二、原理\" class=\"headerlink\" title=\"二、原理\"></a>二、原理</h2><p>当使用域名访问某一个网站时（比如访问 <code>www.baidu.com</code>），分为两步：</p>\n<ul>\n<li>首先解析出该域名所对应的 IP地址（DNS 域名解析）</li>\n<li>然后将 Http请求包 路由到 IP地址 所对应的服务器</li>\n</ul>\n<p>（注：IP地址和网卡相绑定，一个服务器可以有多个网卡，即可能有多个IP地址）</p>\n<h3 id=\"1、域名解析\"><a href=\"#1、域名解析\" class=\"headerlink\" title=\"1、域名解析\"></a>1、域名解析</h3><p>域名解析分为两种：</p>\n<ul>\n<li>将域名解析为IP地址</li>\n<li>将域名解析为另一个域名（CNAME）</li>\n</ul>\n<p>购买一个域名之后，需要去映射一个 IP地址，用 Map 表示：{域名：IP}。<br>也可以给某域名取一个别名，比如给 <code>www.baidu.com</code> 取一个别名 <code>test.baidu.com</code>，用 Map 表示：{域名：CNAME}，这里的CNAME就是别名。</p>\n<p><strong>域名解析，实际上就是解析出指定域名所对应的 IP地址，或该域名的一个 CNAME。</strong></p>\n<p>没有CNAME的情况：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/7/16/16bf9e293d4bc895~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.webp#?w=1004&h=474&s=41808&e=png&b=fefbfb\"\n                      alt=\"图1\"\n                ></p>\n<p>有CNAME的情况：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/7/16/16bf9e293e8c88d4~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.webp#?w=1012&h=468&s=46488&e=png&b=fefafa\"\n                      alt=\"图1\"\n                ></p>\n<p>特别注意：在有 CNAME 的情况下，CNAME 在域名解析的过程中承担了代理的角色，这是 CDN 实现的关键。</p>\n<h3 id=\"2、资源分类\"><a href=\"#2、资源分类\" class=\"headerlink\" title=\"2、资源分类\"></a>2、资源分类</h3><p>服务器上的资源分为两种：</p>\n<ul>\n<li>静态资源：这种资源通常很少变动，比如图片，视频，css，js 等等</li>\n<li>动态资源：这种资源不同用户不同时刻访问通常是不一样的，比如 ftl，jsp 等等。</li>\n</ul>\n<h4 id=\"（1）集群（动态资源）\"><a href=\"#（1）集群（动态资源）\" class=\"headerlink\" title=\"（1）集群（动态资源）\"></a>（1）集群（动态资源）</h4><p>在全国各地部署服务器，每个服务器上都有相同的动态资源，并且还需配置相应的数据库，这就涉及到数据同步等问题。这种做法专业一点就是集群，目前集群架构最多是三地五中心，因为全国多地集群成本太高。</p>\n<h4 id=\"（2）CDN服务器（静态资源）\"><a href=\"#（2）CDN服务器（静态资源）\" class=\"headerlink\" title=\"（2）CDN服务器（静态资源）\"></a>（2）CDN服务器（静态资源）</h4><p>在每个服务器上只部署静态资源是成本较低的方式，因为静态资源通常不涉及数据库，也能提高用户访问速度。</p>\n<p>现在有很多 CDN供应商，只要把系统接入并将静态资源传给 CDN服务，这些静态资源将会自动分布到世界各地。</p>\n<p>在访问静态资源时，DNS系统 进行域名解析的过程中，如何解析出离用户最近的 IP地址？<br>这就需要使用 CDN服务器，该服务器知道用户当前所在位置，和用户访问的域名对应哪些 IP地址，及这些 IP地址 分别在哪。</p>\n<p>这样，只要用户在通过某域名访问静态资源时，<strong>配置自己电脑的 DNS地址 为 CDN专用DNS服务器</strong>，就可以解决问题了，但不能要求所有用户都去修改自己电脑的 DNS地址，这时就要利用 DNS 中的 CNAME 了。</p>\n<h3 id=\"3、负载均衡和缓存\"><a href=\"#3、负载均衡和缓存\" class=\"headerlink\" title=\"3、负载均衡和缓存\"></a>3、负载均衡和缓存</h3><h4 id=\"（1）负载均衡系统\"><a href=\"#（1）负载均衡系统\" class=\"headerlink\" title=\"（1）负载均衡系统\"></a>（1）负载均衡系统</h4><p>如果没有返回 IP地址，本地DNS服务器 会向对应的 CDN服务器 再次发送请求，通过 CDN负载均衡系统 进行智能调度：</p>\n<ul>\n<li>看用户的 IP 地址，查表得知<strong>地理位置</strong>，找相对最近的边缘节点</li>\n<li>看用户所在的<strong>运营商网络</strong>，找相同网络的边缘节点</li>\n<li>检查边缘节点的<strong>负载情况</strong>，找负载较轻的节点</li>\n<li>其他，比如节点的“健康状况”、服务能力、带宽、响应时间等</li>\n</ul>\n<p>结合以上因素，得到最合适的边缘节点，并把该节点返回给用户，用户就能就近访问 CDN 的缓存代理。</p>\n<p>整体流程如下：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/7/16/16bf9e293edf212d~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.webp#?w=1090&h=720&s=68194&e=png&b=fefcfc\"\n                      alt=\"图3\"\n                ></p>\n<h4 id=\"（2）缓存代理\"><a href=\"#（2）缓存代理\" class=\"headerlink\" title=\"（2）缓存代理\"></a>（2）缓存代理</h4><p>缓存系统是 CDN 的另一个关键组成部分，缓存系统会缓存最常用的资源，有两个衡量 CDN服务质量 的指标：</p>\n<ul>\n<li><strong>命中率</strong>：用户访问的资源恰好在缓存系统里，可直接返回给用户，命中次数与所有访问次数之比</li>\n<li><strong>回源率</strong>：缓存里没有，必须用代理的方式回源站取，回源次数与所有访问次数之比</li>\n</ul>\n<p>缓存系统可以划分层次为：一级缓存节点和二级缓存节点，一级缓存直连源站，二级缓存直连用户。<br>在回源时，二级缓存首先找一级缓存，一级缓存没有才回源站，可有效减少真正的回源。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6db24ee3dcb84eed84b7736b09bdaec9~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.webp\"\n                      alt=\"图4\"\n                ></p>\n<p>现在的商业 CDN命中率都在 90% 以上，相当于把源站的服务能力放大了 10 倍以上</p>\n<h4 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h4><p>域名解析有多种记录类型，最常用的有：</p>\n<ul>\n<li><strong>A记录：一个域名对应一个IP地址</strong></li>\n<li><strong>CNAME：一个域名对应另外一个域名</strong></li>\n<li>NS：将子域名指定其他DNS服务器解析</li>\n</ul>\n"},{"title":"interface & type","date":"2024-11-05T01:27:00.000Z","_content":"\n## 一、相同点\n\n### 1、都可以描述对象和函数的类型\n\n但语法不一样，type 使用 = 赋值\n\n``` ts\ninterface User {\n    name: string\n    age: number\n}\n\ninterface SetUser {\n    (name: string, age: number): void\n}\n```\n\n``` ts\ntype User = {\n    name: string\n    age: number\n}\n\ntype SetUser = (name: string, age: number) => void\n```\n\n### 2、都允许扩展（extends）\n\n并且 interface 和 type 可以互相扩展\n\n#### （1）interface 扩展 interface\n\n``` ts\ninterface Name {\n    name: string\n}\n\ninterface User extends Name {\n    age: number\n}\n```\n\n#### （2）type 扩展 type\n\n``` ts\ntype Name = {\n    name: string\n}\n\ntype User = Name & {\n    age: number\n}\n```\n\n#### （3）interface 扩展 type\n\n``` ts\ntype Name = {\n    name: string\n}\n\ninterface User extends Name {\n    age: number\n}\n```\n\n#### （4）type 扩展 interface\n\n``` ts\ninterface Name {\n    name: string\n}\n\ntype User = Name & {\n    age: number\n}\n```\n\n## 二、不同点\n\n### 1、type 可以，但 interface 不行\n\n#### （1）基本类型别名\n\n``` ts\ntype Name = string\n```\n\n#### （2）联合类型\n\n``` ts\ninterface Dog {\n    dogName: string\n}\ninterface Cat {\n    catName: string\n}\ntype Pet = Dog | Cat\n\ntype StringOrNumber = string | number\n\ntype Text = string | { text: string }\n```\n\n#### （3）元组\n\n具体定义数组每个位置的类型\n\n``` ts\ntype PetList = [Dog, List]\n```\n\n#### （4）使用 typeof 获取实例的类型 对 type 进行赋值\n\n``` ts\nlet divEle = document.createElement('div')\ntype Div = typeof divEle\n```\n\n### 2、interface 可以，但 type 不行\n\n#### interface 能够声明合并\n\n``` ts\ninterface User {\n    name: string\n}\n\ninterface User {\n    age: number\n}\n\n/**\n * User 接口为 {\n *     name: string\n *     age: number\n * }\n */\n```\n\n## 三、总结\n\n优先用 interface，无法实现再用 type，因为 interface 具有更直观和易于理解的特点，并且能够进行声明合并。\n","source":"_posts/28-interface&type.md","raw":"---\ntitle: interface & type\ndate: 2024-11-05 09:27:00\ntags:\n---\n\n## 一、相同点\n\n### 1、都可以描述对象和函数的类型\n\n但语法不一样，type 使用 = 赋值\n\n``` ts\ninterface User {\n    name: string\n    age: number\n}\n\ninterface SetUser {\n    (name: string, age: number): void\n}\n```\n\n``` ts\ntype User = {\n    name: string\n    age: number\n}\n\ntype SetUser = (name: string, age: number) => void\n```\n\n### 2、都允许扩展（extends）\n\n并且 interface 和 type 可以互相扩展\n\n#### （1）interface 扩展 interface\n\n``` ts\ninterface Name {\n    name: string\n}\n\ninterface User extends Name {\n    age: number\n}\n```\n\n#### （2）type 扩展 type\n\n``` ts\ntype Name = {\n    name: string\n}\n\ntype User = Name & {\n    age: number\n}\n```\n\n#### （3）interface 扩展 type\n\n``` ts\ntype Name = {\n    name: string\n}\n\ninterface User extends Name {\n    age: number\n}\n```\n\n#### （4）type 扩展 interface\n\n``` ts\ninterface Name {\n    name: string\n}\n\ntype User = Name & {\n    age: number\n}\n```\n\n## 二、不同点\n\n### 1、type 可以，但 interface 不行\n\n#### （1）基本类型别名\n\n``` ts\ntype Name = string\n```\n\n#### （2）联合类型\n\n``` ts\ninterface Dog {\n    dogName: string\n}\ninterface Cat {\n    catName: string\n}\ntype Pet = Dog | Cat\n\ntype StringOrNumber = string | number\n\ntype Text = string | { text: string }\n```\n\n#### （3）元组\n\n具体定义数组每个位置的类型\n\n``` ts\ntype PetList = [Dog, List]\n```\n\n#### （4）使用 typeof 获取实例的类型 对 type 进行赋值\n\n``` ts\nlet divEle = document.createElement('div')\ntype Div = typeof divEle\n```\n\n### 2、interface 可以，但 type 不行\n\n#### interface 能够声明合并\n\n``` ts\ninterface User {\n    name: string\n}\n\ninterface User {\n    age: number\n}\n\n/**\n * User 接口为 {\n *     name: string\n *     age: number\n * }\n */\n```\n\n## 三、总结\n\n优先用 interface，无法实现再用 type，因为 interface 具有更直观和易于理解的特点，并且能够进行声明合并。\n","slug":"28-interface&type","published":1,"updated":"2025-01-02T16:09:20.397Z","_id":"cm38m0cxg00004ew669xnghdc","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、相同点\"><a href=\"#一、相同点\" class=\"headerlink\" title=\"一、相同点\"></a>一、相同点</h2><h3 id=\"1、都可以描述对象和函数的类型\"><a href=\"#1、都可以描述对象和函数的类型\" class=\"headerlink\" title=\"1、都可以描述对象和函数的类型\"></a>1、都可以描述对象和函数的类型</h3><p>但语法不一样，type 使用 &#x3D; 赋值</p>\n<div class=\"highlight-container\" data-rel=\"Ts\"><figure class=\"iseeu highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">SetUser</span> &#123;</span><br><span class=\"line\">    (<span class=\"attr\">name</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>): <span class=\"built_in\">void</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<div class=\"highlight-container\" data-rel=\"Ts\"><figure class=\"iseeu highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">User</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">SetUser</span> = <span class=\"function\">(<span class=\"params\">name: <span class=\"built_in\">string</span>, age: <span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"built_in\">void</span></span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"2、都允许扩展（extends）\"><a href=\"#2、都允许扩展（extends）\" class=\"headerlink\" title=\"2、都允许扩展（extends）\"></a>2、都允许扩展（extends）</h3><p>并且 interface 和 type 可以互相扩展</p>\n<h4 id=\"（1）interface-扩展-interface\"><a href=\"#（1）interface-扩展-interface\" class=\"headerlink\" title=\"（1）interface 扩展 interface\"></a>（1）interface 扩展 interface</h4><div class=\"highlight-container\" data-rel=\"Ts\"><figure class=\"iseeu highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Name</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">User</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Name</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"（2）type-扩展-type\"><a href=\"#（2）type-扩展-type\" class=\"headerlink\" title=\"（2）type 扩展 type\"></a>（2）type 扩展 type</h4><div class=\"highlight-container\" data-rel=\"Ts\"><figure class=\"iseeu highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Name</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">User</span> = <span class=\"title class_\">Name</span> &amp; &#123;</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"（3）interface-扩展-type\"><a href=\"#（3）interface-扩展-type\" class=\"headerlink\" title=\"（3）interface 扩展 type\"></a>（3）interface 扩展 type</h4><div class=\"highlight-container\" data-rel=\"Ts\"><figure class=\"iseeu highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Name</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">User</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Name</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"（4）type-扩展-interface\"><a href=\"#（4）type-扩展-interface\" class=\"headerlink\" title=\"（4）type 扩展 interface\"></a>（4）type 扩展 interface</h4><div class=\"highlight-container\" data-rel=\"Ts\"><figure class=\"iseeu highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Name</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">User</span> = <span class=\"title class_\">Name</span> &amp; &#123;</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"二、不同点\"><a href=\"#二、不同点\" class=\"headerlink\" title=\"二、不同点\"></a>二、不同点</h2><h3 id=\"1、type-可以，但-interface-不行\"><a href=\"#1、type-可以，但-interface-不行\" class=\"headerlink\" title=\"1、type 可以，但 interface 不行\"></a>1、type 可以，但 interface 不行</h3><h4 id=\"（1）基本类型别名\"><a href=\"#（1）基本类型别名\" class=\"headerlink\" title=\"（1）基本类型别名\"></a>（1）基本类型别名</h4><div class=\"highlight-container\" data-rel=\"Ts\"><figure class=\"iseeu highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Name</span> = <span class=\"built_in\">string</span></span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"（2）联合类型\"><a href=\"#（2）联合类型\" class=\"headerlink\" title=\"（2）联合类型\"></a>（2）联合类型</h4><div class=\"highlight-container\" data-rel=\"Ts\"><figure class=\"iseeu highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Dog</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">dogName</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Cat</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">catName</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Pet</span> = <span class=\"title class_\">Dog</span> | <span class=\"title class_\">Cat</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">StringOrNumber</span> = <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Text</span> = <span class=\"built_in\">string</span> | &#123; <span class=\"attr\">text</span>: <span class=\"built_in\">string</span> &#125;</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"（3）元组\"><a href=\"#（3）元组\" class=\"headerlink\" title=\"（3）元组\"></a>（3）元组</h4><p>具体定义数组每个位置的类型</p>\n<div class=\"highlight-container\" data-rel=\"Ts\"><figure class=\"iseeu highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">PetList</span> = [<span class=\"title class_\">Dog</span>, <span class=\"title class_\">List</span>]</span><br></pre></td></tr></table></figure></div>\n\n<h4 id=\"（4）使用-typeof-获取实例的类型-对-type-进行赋值\"><a href=\"#（4）使用-typeof-获取实例的类型-对-type-进行赋值\" class=\"headerlink\" title=\"（4）使用 typeof 获取实例的类型 对 type 进行赋值\"></a>（4）使用 typeof 获取实例的类型 对 type 进行赋值</h4><div class=\"highlight-container\" data-rel=\"Ts\"><figure class=\"iseeu highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> divEle = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;div&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Div</span> = <span class=\"keyword\">typeof</span> divEle</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"2、interface-可以，但-type-不行\"><a href=\"#2、interface-可以，但-type-不行\" class=\"headerlink\" title=\"2、interface 可以，但 type 不行\"></a>2、interface 可以，但 type 不行</h3><h4 id=\"interface-能够声明合并\"><a href=\"#interface-能够声明合并\" class=\"headerlink\" title=\"interface 能够声明合并\"></a>interface 能够声明合并</h4><div class=\"highlight-container\" data-rel=\"Ts\"><figure class=\"iseeu highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * User 接口为 &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     name: string</span></span><br><span class=\"line\"><span class=\"comment\"> *     age: number</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"三、总结\"><a href=\"#三、总结\" class=\"headerlink\" title=\"三、总结\"></a>三、总结</h2><p>优先用 interface，无法实现再用 type，因为 interface 具有更直观和易于理解的特点，并且能够进行声明合并。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、相同点\"><a href=\"#一、相同点\" class=\"headerlink\" title=\"一、相同点\"></a>一、相同点</h2><h3 id=\"1、都可以描述对象和函数的类型\"><a href=\"#1、都可以描述对象和函数的类型\" class=\"headerlink\" title=\"1、都可以描述对象和函数的类型\"></a>1、都可以描述对象和函数的类型</h3><p>但语法不一样，type 使用 &#x3D; 赋值</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">SetUser</span> &#123;</span><br><span class=\"line\">    (<span class=\"attr\">name</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>): <span class=\"built_in\">void</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">User</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">SetUser</span> = <span class=\"function\">(<span class=\"params\">name: <span class=\"built_in\">string</span>, age: <span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"built_in\">void</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、都允许扩展（extends）\"><a href=\"#2、都允许扩展（extends）\" class=\"headerlink\" title=\"2、都允许扩展（extends）\"></a>2、都允许扩展（extends）</h3><p>并且 interface 和 type 可以互相扩展</p>\n<h4 id=\"（1）interface-扩展-interface\"><a href=\"#（1）interface-扩展-interface\" class=\"headerlink\" title=\"（1）interface 扩展 interface\"></a>（1）interface 扩展 interface</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Name</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">User</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Name</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（2）type-扩展-type\"><a href=\"#（2）type-扩展-type\" class=\"headerlink\" title=\"（2）type 扩展 type\"></a>（2）type 扩展 type</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Name</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">User</span> = <span class=\"title class_\">Name</span> &amp; &#123;</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（3）interface-扩展-type\"><a href=\"#（3）interface-扩展-type\" class=\"headerlink\" title=\"（3）interface 扩展 type\"></a>（3）interface 扩展 type</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Name</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">User</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Name</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（4）type-扩展-interface\"><a href=\"#（4）type-扩展-interface\" class=\"headerlink\" title=\"（4）type 扩展 interface\"></a>（4）type 扩展 interface</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Name</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">User</span> = <span class=\"title class_\">Name</span> &amp; &#123;</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、不同点\"><a href=\"#二、不同点\" class=\"headerlink\" title=\"二、不同点\"></a>二、不同点</h2><h3 id=\"1、type-可以，但-interface-不行\"><a href=\"#1、type-可以，但-interface-不行\" class=\"headerlink\" title=\"1、type 可以，但 interface 不行\"></a>1、type 可以，但 interface 不行</h3><h4 id=\"（1）基本类型别名\"><a href=\"#（1）基本类型别名\" class=\"headerlink\" title=\"（1）基本类型别名\"></a>（1）基本类型别名</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Name</span> = <span class=\"built_in\">string</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（2）联合类型\"><a href=\"#（2）联合类型\" class=\"headerlink\" title=\"（2）联合类型\"></a>（2）联合类型</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Dog</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">dogName</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Cat</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">catName</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Pet</span> = <span class=\"title class_\">Dog</span> | <span class=\"title class_\">Cat</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">StringOrNumber</span> = <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Text</span> = <span class=\"built_in\">string</span> | &#123; <span class=\"attr\">text</span>: <span class=\"built_in\">string</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（3）元组\"><a href=\"#（3）元组\" class=\"headerlink\" title=\"（3）元组\"></a>（3）元组</h4><p>具体定义数组每个位置的类型</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">PetList</span> = [<span class=\"title class_\">Dog</span>, <span class=\"title class_\">List</span>]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"（4）使用-typeof-获取实例的类型-对-type-进行赋值\"><a href=\"#（4）使用-typeof-获取实例的类型-对-type-进行赋值\" class=\"headerlink\" title=\"（4）使用 typeof 获取实例的类型 对 type 进行赋值\"></a>（4）使用 typeof 获取实例的类型 对 type 进行赋值</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> divEle = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;div&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Div</span> = <span class=\"keyword\">typeof</span> divEle</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、interface-可以，但-type-不行\"><a href=\"#2、interface-可以，但-type-不行\" class=\"headerlink\" title=\"2、interface 可以，但 type 不行\"></a>2、interface 可以，但 type 不行</h3><h4 id=\"interface-能够声明合并\"><a href=\"#interface-能够声明合并\" class=\"headerlink\" title=\"interface 能够声明合并\"></a>interface 能够声明合并</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * User 接口为 &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     name: string</span></span><br><span class=\"line\"><span class=\"comment\"> *     age: number</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、总结\"><a href=\"#三、总结\" class=\"headerlink\" title=\"三、总结\"></a>三、总结</h2><p>优先用 interface，无法实现再用 type，因为 interface 具有更直观和易于理解的特点，并且能够进行声明合并。</p>\n"},{"title":"三次握手&四次挥手","date":"2024-11-04T06:26:53.000Z","_content":"\n## 三次握手\n\n### 一、概念\n\n#### 1、TCP 协议\n\nTCP（Transmission Control Protocol），即传输控制协议。\nTCP 协议是一个 **面向连接的、可靠的、基于字节流** 的 **传输层协议**。\n\nTCP 连接可以用于 **保证可靠性** 和 **流量控制机制**，包括 Socket、序列号及窗口大小。\n\n其中 Socket 是由 IP 加端口组成的，序列号是用来解决乱序问题的，而窗口大小则是用来做流量控制的。\n\n#### 2、TCP 的特点\n\n- 面向连接：TCP 是通过服务端和客户端进行连接的协议。\n- 面向字节流：TCP 服务端和客户端之间的数据通讯是通过 **字节流数据** 传输的。\n- 可靠的：TCP 传输的可靠性得益于 TCP 会记录 **信息的发送状态** 和 **数据的接收与否**，对于丢包等发送不成功的情况，TCP 会重新发包，进而保证 TCP 的可靠性。\n\n### 3、TCP 三次握手\n\n![图1](https://ask.qcloudimg.com/http-save/yehe-1208223/0b58ac09994e834e14ca43dcf357294b.png?imageView2/2/w/1620)\n\n- SYN：Synchronize Sequence Numbers，同步序列号，表示发起一个新连接。\n- ACK：确认收到一个新连接。\n- SEQ：序列号。\n\nTCP 三次握手执行过程：\n\n#### （1）第一次握手（在吗？）\n\nClient 将 `SYN` 发给 Server。\nClient 进入 `SYN_SENT` 状态，等待 Server 确认。\n\n#### （2）第二次握手（在的，有事？）\n\nServer 收到 `SYN`，将 `SYN`+`ACK` 发给 Client。\nServer 进入 `SYN_RCVD` 状态，等待 Client 确认。\n\n#### （3）第三次握手（需要数据传输）\n\nClient 收到 `SYN`+`ACK`，将 `SYN` 发给 Server。\n连接成功，Client 与 Server 进入 `ESTABLISHED` 状态，可以传输数据。\n\n#### TCP 为什么需要三次握手？\n\n**为了防止已失效的请求报文段传送到服务端而产生连接的误判。**\n\n假设是两次握手：\n\n当 A 发送一个连接请求给 B，但是该请求由于网络原因被阻塞了，一段时间后，A 未收到回复，会认为该消息丢失了，就会重新发送消息。\n\n当 A 和 B 通信完成后，这个被 A 认为已经丢失的请求到达了 B，B 会认为这是一个新的请求连接消息，就向 A 发送确认。\n\n但是 A 认为自己没有给 B 再次发送消息，所以不会理睬 B 的确认，但是 B 会一直等待 A 的消息，导致 B 的资源被浪费。\n\n这就是为什么不能两次握手。\n\n**设计成三次握手的情况，客户端在接收到服务端 SEQ+1 的返回消息后，就会知道该连接是历史连接，接着发送报文告诉服务端。**\n\n为了节省资源，也没必要设计成更多次的握手。\n\n## 四次挥手\n\n![图2](https://img-blog.csdnimg.cn/20190627203747107.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NodWZmbGVfVHM=,size_16,color_FFFFFF,t_70)\n\n### 四次挥手的 6 种状态\n\n#### （1）FIN_WAIT_1\n\n主动方在 `ESTABLISHED` 状态的时候，想要主动关闭连接，向对方发送 `FIN` 报文，并进入 `FIN_WAIT_1` 状态。\n\n#### （2）FIN_WAIT_2\n\n当主动方收到被动方回复的 `ACK` 报文后，就进入了 `FIN_WAIT_2` 状态。\n\n当主动方进入 `FIN_WAIT_2` 时，表示半连接状态，即被动方还有数据要发过来。\n\n#### （3）CLOSE_WAIT\n\n当被动方接收到 `FIN` 时，会回复一个 `ACK`，并进入 `CLOSE_WAIT` 状态。\n\n在该状态中，被动方如果还有数据要发送，就继续发送，如果没有，就关闭连接，并发送一个 `FIN` 给对方。\n\n#### （4）TIME_WAIT\n\n当主动方接收到了 `FIN` 报文，就回复一个 `ACK` 报文，并进入 `TIME_WAIT` 状态。\n\n如果主动方在 `FIN_WAIT_1` 状态下，收到了对方的 `FIN`+`ACK` 报文，可以跳过 `FIN_WAIT_2` 直接进入 `TIME_WAIT` 状态。\n\n#### （5）LAST_ACK\n\n被动方发送了 `FIN` 报文后，最后等待对方的 `ACK` 报文时进入的状态。收到ACK报文后就可以进入CLOSED状态了。\n\n#### （6）CLOSED\n\n主动方进入 `TIME_WAIT` 状态后，再等待 `2MSL` 就会进入 `CLOSED` 状态。\n被动方在收到 `ACK` 报文后，立即进入 `CLOSED` 状态。\n\n### `TIME_WAIT` 的意义\n\n如果没有 `TIME-WAIT`，主动方会直接进入 `CLOSED` 状态。\n此时如果因为网络原因最后一次 `ACK` 丢失了，服务端会重复发送 `FIN` 请求给客户端，所以就需要主动方发送最后一次 `ACK` 之后进入 `TIME_WAIT` 状态，等待 `2MSL`（两个报文最大生命周期），等待这段时间就是为了如果接收到了重发的 `FIN` 请求能够进行最后一次 `ACK` 回复。\n","source":"_posts/27-三次握手&四次挥手.md","raw":"---\ntitle: 三次握手&四次挥手\ndate: 2024-11-04 14:26:53\ntags:\n    - 面经\n    - 计算机网络\n    - TCP\ncategories:\n    - 计算机网络\n      - TCP\n---\n\n## 三次握手\n\n### 一、概念\n\n#### 1、TCP 协议\n\nTCP（Transmission Control Protocol），即传输控制协议。\nTCP 协议是一个 **面向连接的、可靠的、基于字节流** 的 **传输层协议**。\n\nTCP 连接可以用于 **保证可靠性** 和 **流量控制机制**，包括 Socket、序列号及窗口大小。\n\n其中 Socket 是由 IP 加端口组成的，序列号是用来解决乱序问题的，而窗口大小则是用来做流量控制的。\n\n#### 2、TCP 的特点\n\n- 面向连接：TCP 是通过服务端和客户端进行连接的协议。\n- 面向字节流：TCP 服务端和客户端之间的数据通讯是通过 **字节流数据** 传输的。\n- 可靠的：TCP 传输的可靠性得益于 TCP 会记录 **信息的发送状态** 和 **数据的接收与否**，对于丢包等发送不成功的情况，TCP 会重新发包，进而保证 TCP 的可靠性。\n\n### 3、TCP 三次握手\n\n![图1](https://ask.qcloudimg.com/http-save/yehe-1208223/0b58ac09994e834e14ca43dcf357294b.png?imageView2/2/w/1620)\n\n- SYN：Synchronize Sequence Numbers，同步序列号，表示发起一个新连接。\n- ACK：确认收到一个新连接。\n- SEQ：序列号。\n\nTCP 三次握手执行过程：\n\n#### （1）第一次握手（在吗？）\n\nClient 将 `SYN` 发给 Server。\nClient 进入 `SYN_SENT` 状态，等待 Server 确认。\n\n#### （2）第二次握手（在的，有事？）\n\nServer 收到 `SYN`，将 `SYN`+`ACK` 发给 Client。\nServer 进入 `SYN_RCVD` 状态，等待 Client 确认。\n\n#### （3）第三次握手（需要数据传输）\n\nClient 收到 `SYN`+`ACK`，将 `SYN` 发给 Server。\n连接成功，Client 与 Server 进入 `ESTABLISHED` 状态，可以传输数据。\n\n#### TCP 为什么需要三次握手？\n\n**为了防止已失效的请求报文段传送到服务端而产生连接的误判。**\n\n假设是两次握手：\n\n当 A 发送一个连接请求给 B，但是该请求由于网络原因被阻塞了，一段时间后，A 未收到回复，会认为该消息丢失了，就会重新发送消息。\n\n当 A 和 B 通信完成后，这个被 A 认为已经丢失的请求到达了 B，B 会认为这是一个新的请求连接消息，就向 A 发送确认。\n\n但是 A 认为自己没有给 B 再次发送消息，所以不会理睬 B 的确认，但是 B 会一直等待 A 的消息，导致 B 的资源被浪费。\n\n这就是为什么不能两次握手。\n\n**设计成三次握手的情况，客户端在接收到服务端 SEQ+1 的返回消息后，就会知道该连接是历史连接，接着发送报文告诉服务端。**\n\n为了节省资源，也没必要设计成更多次的握手。\n\n## 四次挥手\n\n![图2](https://img-blog.csdnimg.cn/20190627203747107.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NodWZmbGVfVHM=,size_16,color_FFFFFF,t_70)\n\n### 四次挥手的 6 种状态\n\n#### （1）FIN_WAIT_1\n\n主动方在 `ESTABLISHED` 状态的时候，想要主动关闭连接，向对方发送 `FIN` 报文，并进入 `FIN_WAIT_1` 状态。\n\n#### （2）FIN_WAIT_2\n\n当主动方收到被动方回复的 `ACK` 报文后，就进入了 `FIN_WAIT_2` 状态。\n\n当主动方进入 `FIN_WAIT_2` 时，表示半连接状态，即被动方还有数据要发过来。\n\n#### （3）CLOSE_WAIT\n\n当被动方接收到 `FIN` 时，会回复一个 `ACK`，并进入 `CLOSE_WAIT` 状态。\n\n在该状态中，被动方如果还有数据要发送，就继续发送，如果没有，就关闭连接，并发送一个 `FIN` 给对方。\n\n#### （4）TIME_WAIT\n\n当主动方接收到了 `FIN` 报文，就回复一个 `ACK` 报文，并进入 `TIME_WAIT` 状态。\n\n如果主动方在 `FIN_WAIT_1` 状态下，收到了对方的 `FIN`+`ACK` 报文，可以跳过 `FIN_WAIT_2` 直接进入 `TIME_WAIT` 状态。\n\n#### （5）LAST_ACK\n\n被动方发送了 `FIN` 报文后，最后等待对方的 `ACK` 报文时进入的状态。收到ACK报文后就可以进入CLOSED状态了。\n\n#### （6）CLOSED\n\n主动方进入 `TIME_WAIT` 状态后，再等待 `2MSL` 就会进入 `CLOSED` 状态。\n被动方在收到 `ACK` 报文后，立即进入 `CLOSED` 状态。\n\n### `TIME_WAIT` 的意义\n\n如果没有 `TIME-WAIT`，主动方会直接进入 `CLOSED` 状态。\n此时如果因为网络原因最后一次 `ACK` 丢失了，服务端会重复发送 `FIN` 请求给客户端，所以就需要主动方发送最后一次 `ACK` 之后进入 `TIME_WAIT` 状态，等待 `2MSL`（两个报文最大生命周期），等待这段时间就是为了如果接收到了重发的 `FIN` 请求能够进行最后一次 `ACK` 回复。\n","slug":"27-三次握手&四次挥手","published":1,"updated":"2025-01-02T16:09:23.672Z","_id":"cm38m0cxh00024ew6911t3j9b","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"三次握手\"><a href=\"#三次握手\" class=\"headerlink\" title=\"三次握手\"></a>三次握手</h2><h3 id=\"一、概念\"><a href=\"#一、概念\" class=\"headerlink\" title=\"一、概念\"></a>一、概念</h3><h4 id=\"1、TCP-协议\"><a href=\"#1、TCP-协议\" class=\"headerlink\" title=\"1、TCP 协议\"></a>1、TCP 协议</h4><p>TCP（Transmission Control Protocol），即传输控制协议。<br>TCP 协议是一个 <strong>面向连接的、可靠的、基于字节流</strong> 的 <strong>传输层协议</strong>。</p>\n<p>TCP 连接可以用于 <strong>保证可靠性</strong> 和 <strong>流量控制机制</strong>，包括 Socket、序列号及窗口大小。</p>\n<p>其中 Socket 是由 IP 加端口组成的，序列号是用来解决乱序问题的，而窗口大小则是用来做流量控制的。</p>\n<h4 id=\"2、TCP-的特点\"><a href=\"#2、TCP-的特点\" class=\"headerlink\" title=\"2、TCP 的特点\"></a>2、TCP 的特点</h4><ul>\n<li>面向连接：TCP 是通过服务端和客户端进行连接的协议。</li>\n<li>面向字节流：TCP 服务端和客户端之间的数据通讯是通过 <strong>字节流数据</strong> 传输的。</li>\n<li>可靠的：TCP 传输的可靠性得益于 TCP 会记录 <strong>信息的发送状态</strong> 和 <strong>数据的接收与否</strong>，对于丢包等发送不成功的情况，TCP 会重新发包，进而保证 TCP 的可靠性。</li>\n</ul>\n<h3 id=\"3、TCP-三次握手\"><a href=\"#3、TCP-三次握手\" class=\"headerlink\" title=\"3、TCP 三次握手\"></a>3、TCP 三次握手</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://ask.qcloudimg.com/http-save/yehe-1208223/0b58ac09994e834e14ca43dcf357294b.png?imageView2/2/w/1620\"\n                      alt=\"图1\"\n                ></p>\n<ul>\n<li>SYN：Synchronize Sequence Numbers，同步序列号，表示发起一个新连接。</li>\n<li>ACK：确认收到一个新连接。</li>\n<li>SEQ：序列号。</li>\n</ul>\n<p>TCP 三次握手执行过程：</p>\n<h4 id=\"（1）第一次握手（在吗？）\"><a href=\"#（1）第一次握手（在吗？）\" class=\"headerlink\" title=\"（1）第一次握手（在吗？）\"></a>（1）第一次握手（在吗？）</h4><p>Client 将 <code>SYN</code> 发给 Server。<br>Client 进入 <code>SYN_SENT</code> 状态，等待 Server 确认。</p>\n<h4 id=\"（2）第二次握手（在的，有事？）\"><a href=\"#（2）第二次握手（在的，有事？）\" class=\"headerlink\" title=\"（2）第二次握手（在的，有事？）\"></a>（2）第二次握手（在的，有事？）</h4><p>Server 收到 <code>SYN</code>，将 <code>SYN</code>+<code>ACK</code> 发给 Client。<br>Server 进入 <code>SYN_RCVD</code> 状态，等待 Client 确认。</p>\n<h4 id=\"（3）第三次握手（需要数据传输）\"><a href=\"#（3）第三次握手（需要数据传输）\" class=\"headerlink\" title=\"（3）第三次握手（需要数据传输）\"></a>（3）第三次握手（需要数据传输）</h4><p>Client 收到 <code>SYN</code>+<code>ACK</code>，将 <code>SYN</code> 发给 Server。<br>连接成功，Client 与 Server 进入 <code>ESTABLISHED</code> 状态，可以传输数据。</p>\n<h4 id=\"TCP-为什么需要三次握手？\"><a href=\"#TCP-为什么需要三次握手？\" class=\"headerlink\" title=\"TCP 为什么需要三次握手？\"></a>TCP 为什么需要三次握手？</h4><p><strong>为了防止已失效的请求报文段传送到服务端而产生连接的误判。</strong></p>\n<p>假设是两次握手：</p>\n<p>当 A 发送一个连接请求给 B，但是该请求由于网络原因被阻塞了，一段时间后，A 未收到回复，会认为该消息丢失了，就会重新发送消息。</p>\n<p>当 A 和 B 通信完成后，这个被 A 认为已经丢失的请求到达了 B，B 会认为这是一个新的请求连接消息，就向 A 发送确认。</p>\n<p>但是 A 认为自己没有给 B 再次发送消息，所以不会理睬 B 的确认，但是 B 会一直等待 A 的消息，导致 B 的资源被浪费。</p>\n<p>这就是为什么不能两次握手。</p>\n<p><strong>设计成三次握手的情况，客户端在接收到服务端 SEQ+1 的返回消息后，就会知道该连接是历史连接，接着发送报文告诉服务端。</strong></p>\n<p>为了节省资源，也没必要设计成更多次的握手。</p>\n<h2 id=\"四次挥手\"><a href=\"#四次挥手\" class=\"headerlink\" title=\"四次挥手\"></a>四次挥手</h2><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://img-blog.csdnimg.cn/20190627203747107.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NodWZmbGVfVHM=,size_16,color_FFFFFF,t_70\"\n                      alt=\"图2\"\n                ></p>\n<h3 id=\"四次挥手的-6-种状态\"><a href=\"#四次挥手的-6-种状态\" class=\"headerlink\" title=\"四次挥手的 6 种状态\"></a>四次挥手的 6 种状态</h3><h4 id=\"（1）FIN-WAIT-1\"><a href=\"#（1）FIN-WAIT-1\" class=\"headerlink\" title=\"（1）FIN_WAIT_1\"></a>（1）FIN_WAIT_1</h4><p>主动方在 <code>ESTABLISHED</code> 状态的时候，想要主动关闭连接，向对方发送 <code>FIN</code> 报文，并进入 <code>FIN_WAIT_1</code> 状态。</p>\n<h4 id=\"（2）FIN-WAIT-2\"><a href=\"#（2）FIN-WAIT-2\" class=\"headerlink\" title=\"（2）FIN_WAIT_2\"></a>（2）FIN_WAIT_2</h4><p>当主动方收到被动方回复的 <code>ACK</code> 报文后，就进入了 <code>FIN_WAIT_2</code> 状态。</p>\n<p>当主动方进入 <code>FIN_WAIT_2</code> 时，表示半连接状态，即被动方还有数据要发过来。</p>\n<h4 id=\"（3）CLOSE-WAIT\"><a href=\"#（3）CLOSE-WAIT\" class=\"headerlink\" title=\"（3）CLOSE_WAIT\"></a>（3）CLOSE_WAIT</h4><p>当被动方接收到 <code>FIN</code> 时，会回复一个 <code>ACK</code>，并进入 <code>CLOSE_WAIT</code> 状态。</p>\n<p>在该状态中，被动方如果还有数据要发送，就继续发送，如果没有，就关闭连接，并发送一个 <code>FIN</code> 给对方。</p>\n<h4 id=\"（4）TIME-WAIT\"><a href=\"#（4）TIME-WAIT\" class=\"headerlink\" title=\"（4）TIME_WAIT\"></a>（4）TIME_WAIT</h4><p>当主动方接收到了 <code>FIN</code> 报文，就回复一个 <code>ACK</code> 报文，并进入 <code>TIME_WAIT</code> 状态。</p>\n<p>如果主动方在 <code>FIN_WAIT_1</code> 状态下，收到了对方的 <code>FIN</code>+<code>ACK</code> 报文，可以跳过 <code>FIN_WAIT_2</code> 直接进入 <code>TIME_WAIT</code> 状态。</p>\n<h4 id=\"（5）LAST-ACK\"><a href=\"#（5）LAST-ACK\" class=\"headerlink\" title=\"（5）LAST_ACK\"></a>（5）LAST_ACK</h4><p>被动方发送了 <code>FIN</code> 报文后，最后等待对方的 <code>ACK</code> 报文时进入的状态。收到ACK报文后就可以进入CLOSED状态了。</p>\n<h4 id=\"（6）CLOSED\"><a href=\"#（6）CLOSED\" class=\"headerlink\" title=\"（6）CLOSED\"></a>（6）CLOSED</h4><p>主动方进入 <code>TIME_WAIT</code> 状态后，再等待 <code>2MSL</code> 就会进入 <code>CLOSED</code> 状态。<br>被动方在收到 <code>ACK</code> 报文后，立即进入 <code>CLOSED</code> 状态。</p>\n<h3 id=\"TIME-WAIT-的意义\"><a href=\"#TIME-WAIT-的意义\" class=\"headerlink\" title=\"TIME_WAIT 的意义\"></a><code>TIME_WAIT</code> 的意义</h3><p>如果没有 <code>TIME-WAIT</code>，主动方会直接进入 <code>CLOSED</code> 状态。<br>此时如果因为网络原因最后一次 <code>ACK</code> 丢失了，服务端会重复发送 <code>FIN</code> 请求给客户端，所以就需要主动方发送最后一次 <code>ACK</code> 之后进入 <code>TIME_WAIT</code> 状态，等待 <code>2MSL</code>（两个报文最大生命周期），等待这段时间就是为了如果接收到了重发的 <code>FIN</code> 请求能够进行最后一次 <code>ACK</code> 回复。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"三次握手\"><a href=\"#三次握手\" class=\"headerlink\" title=\"三次握手\"></a>三次握手</h2><h3 id=\"一、概念\"><a href=\"#一、概念\" class=\"headerlink\" title=\"一、概念\"></a>一、概念</h3><h4 id=\"1、TCP-协议\"><a href=\"#1、TCP-协议\" class=\"headerlink\" title=\"1、TCP 协议\"></a>1、TCP 协议</h4><p>TCP（Transmission Control Protocol），即传输控制协议。<br>TCP 协议是一个 <strong>面向连接的、可靠的、基于字节流</strong> 的 <strong>传输层协议</strong>。</p>\n<p>TCP 连接可以用于 <strong>保证可靠性</strong> 和 <strong>流量控制机制</strong>，包括 Socket、序列号及窗口大小。</p>\n<p>其中 Socket 是由 IP 加端口组成的，序列号是用来解决乱序问题的，而窗口大小则是用来做流量控制的。</p>\n<h4 id=\"2、TCP-的特点\"><a href=\"#2、TCP-的特点\" class=\"headerlink\" title=\"2、TCP 的特点\"></a>2、TCP 的特点</h4><ul>\n<li>面向连接：TCP 是通过服务端和客户端进行连接的协议。</li>\n<li>面向字节流：TCP 服务端和客户端之间的数据通讯是通过 <strong>字节流数据</strong> 传输的。</li>\n<li>可靠的：TCP 传输的可靠性得益于 TCP 会记录 <strong>信息的发送状态</strong> 和 <strong>数据的接收与否</strong>，对于丢包等发送不成功的情况，TCP 会重新发包，进而保证 TCP 的可靠性。</li>\n</ul>\n<h3 id=\"3、TCP-三次握手\"><a href=\"#3、TCP-三次握手\" class=\"headerlink\" title=\"3、TCP 三次握手\"></a>3、TCP 三次握手</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://ask.qcloudimg.com/http-save/yehe-1208223/0b58ac09994e834e14ca43dcf357294b.png?imageView2/2/w/1620\"\n                      alt=\"图1\"\n                ></p>\n<ul>\n<li>SYN：Synchronize Sequence Numbers，同步序列号，表示发起一个新连接。</li>\n<li>ACK：确认收到一个新连接。</li>\n<li>SEQ：序列号。</li>\n</ul>\n<p>TCP 三次握手执行过程：</p>\n<h4 id=\"（1）第一次握手（在吗？）\"><a href=\"#（1）第一次握手（在吗？）\" class=\"headerlink\" title=\"（1）第一次握手（在吗？）\"></a>（1）第一次握手（在吗？）</h4><p>Client 将 <code>SYN</code> 发给 Server。<br>Client 进入 <code>SYN_SENT</code> 状态，等待 Server 确认。</p>\n<h4 id=\"（2）第二次握手（在的，有事？）\"><a href=\"#（2）第二次握手（在的，有事？）\" class=\"headerlink\" title=\"（2）第二次握手（在的，有事？）\"></a>（2）第二次握手（在的，有事？）</h4><p>Server 收到 <code>SYN</code>，将 <code>SYN</code>+<code>ACK</code> 发给 Client。<br>Server 进入 <code>SYN_RCVD</code> 状态，等待 Client 确认。</p>\n<h4 id=\"（3）第三次握手（需要数据传输）\"><a href=\"#（3）第三次握手（需要数据传输）\" class=\"headerlink\" title=\"（3）第三次握手（需要数据传输）\"></a>（3）第三次握手（需要数据传输）</h4><p>Client 收到 <code>SYN</code>+<code>ACK</code>，将 <code>SYN</code> 发给 Server。<br>连接成功，Client 与 Server 进入 <code>ESTABLISHED</code> 状态，可以传输数据。</p>\n<h4 id=\"TCP-为什么需要三次握手？\"><a href=\"#TCP-为什么需要三次握手？\" class=\"headerlink\" title=\"TCP 为什么需要三次握手？\"></a>TCP 为什么需要三次握手？</h4><p><strong>为了防止已失效的请求报文段传送到服务端而产生连接的误判。</strong></p>\n<p>假设是两次握手：</p>\n<p>当 A 发送一个连接请求给 B，但是该请求由于网络原因被阻塞了，一段时间后，A 未收到回复，会认为该消息丢失了，就会重新发送消息。</p>\n<p>当 A 和 B 通信完成后，这个被 A 认为已经丢失的请求到达了 B，B 会认为这是一个新的请求连接消息，就向 A 发送确认。</p>\n<p>但是 A 认为自己没有给 B 再次发送消息，所以不会理睬 B 的确认，但是 B 会一直等待 A 的消息，导致 B 的资源被浪费。</p>\n<p>这就是为什么不能两次握手。</p>\n<p><strong>设计成三次握手的情况，客户端在接收到服务端 SEQ+1 的返回消息后，就会知道该连接是历史连接，接着发送报文告诉服务端。</strong></p>\n<p>为了节省资源，也没必要设计成更多次的握手。</p>\n<h2 id=\"四次挥手\"><a href=\"#四次挥手\" class=\"headerlink\" title=\"四次挥手\"></a>四次挥手</h2><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://img-blog.csdnimg.cn/20190627203747107.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NodWZmbGVfVHM=,size_16,color_FFFFFF,t_70\"\n                      alt=\"图2\"\n                ></p>\n<h3 id=\"四次挥手的-6-种状态\"><a href=\"#四次挥手的-6-种状态\" class=\"headerlink\" title=\"四次挥手的 6 种状态\"></a>四次挥手的 6 种状态</h3><h4 id=\"（1）FIN-WAIT-1\"><a href=\"#（1）FIN-WAIT-1\" class=\"headerlink\" title=\"（1）FIN_WAIT_1\"></a>（1）FIN_WAIT_1</h4><p>主动方在 <code>ESTABLISHED</code> 状态的时候，想要主动关闭连接，向对方发送 <code>FIN</code> 报文，并进入 <code>FIN_WAIT_1</code> 状态。</p>\n<h4 id=\"（2）FIN-WAIT-2\"><a href=\"#（2）FIN-WAIT-2\" class=\"headerlink\" title=\"（2）FIN_WAIT_2\"></a>（2）FIN_WAIT_2</h4><p>当主动方收到被动方回复的 <code>ACK</code> 报文后，就进入了 <code>FIN_WAIT_2</code> 状态。</p>\n<p>当主动方进入 <code>FIN_WAIT_2</code> 时，表示半连接状态，即被动方还有数据要发过来。</p>\n<h4 id=\"（3）CLOSE-WAIT\"><a href=\"#（3）CLOSE-WAIT\" class=\"headerlink\" title=\"（3）CLOSE_WAIT\"></a>（3）CLOSE_WAIT</h4><p>当被动方接收到 <code>FIN</code> 时，会回复一个 <code>ACK</code>，并进入 <code>CLOSE_WAIT</code> 状态。</p>\n<p>在该状态中，被动方如果还有数据要发送，就继续发送，如果没有，就关闭连接，并发送一个 <code>FIN</code> 给对方。</p>\n<h4 id=\"（4）TIME-WAIT\"><a href=\"#（4）TIME-WAIT\" class=\"headerlink\" title=\"（4）TIME_WAIT\"></a>（4）TIME_WAIT</h4><p>当主动方接收到了 <code>FIN</code> 报文，就回复一个 <code>ACK</code> 报文，并进入 <code>TIME_WAIT</code> 状态。</p>\n<p>如果主动方在 <code>FIN_WAIT_1</code> 状态下，收到了对方的 <code>FIN</code>+<code>ACK</code> 报文，可以跳过 <code>FIN_WAIT_2</code> 直接进入 <code>TIME_WAIT</code> 状态。</p>\n<h4 id=\"（5）LAST-ACK\"><a href=\"#（5）LAST-ACK\" class=\"headerlink\" title=\"（5）LAST_ACK\"></a>（5）LAST_ACK</h4><p>被动方发送了 <code>FIN</code> 报文后，最后等待对方的 <code>ACK</code> 报文时进入的状态。收到ACK报文后就可以进入CLOSED状态了。</p>\n<h4 id=\"（6）CLOSED\"><a href=\"#（6）CLOSED\" class=\"headerlink\" title=\"（6）CLOSED\"></a>（6）CLOSED</h4><p>主动方进入 <code>TIME_WAIT</code> 状态后，再等待 <code>2MSL</code> 就会进入 <code>CLOSED</code> 状态。<br>被动方在收到 <code>ACK</code> 报文后，立即进入 <code>CLOSED</code> 状态。</p>\n<h3 id=\"TIME-WAIT-的意义\"><a href=\"#TIME-WAIT-的意义\" class=\"headerlink\" title=\"TIME_WAIT 的意义\"></a><code>TIME_WAIT</code> 的意义</h3><p>如果没有 <code>TIME-WAIT</code>，主动方会直接进入 <code>CLOSED</code> 状态。<br>此时如果因为网络原因最后一次 <code>ACK</code> 丢失了，服务端会重复发送 <code>FIN</code> 请求给客户端，所以就需要主动方发送最后一次 <code>ACK</code> 之后进入 <code>TIME_WAIT</code> 状态，等待 <code>2MSL</code>（两个报文最大生命周期），等待这段时间就是为了如果接收到了重发的 <code>FIN</code> 请求能够进行最后一次 <code>ACK</code> 回复。</p>\n"},{"title":"TCP","date":"2024-11-05T09:31:10.000Z","_content":"\n![图1](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/2/23/1707236e03d22cbc~tplv-t2oaga2asx-zoom-in-crop-mark:1512:0:0:0.webp)\n\n## 一、TCP 和 UDP 的区别\n\nTCP 和 UDP 都是传输层协议，不同点在于：\n\n- TCP 是 **面向连接的、可靠的、面向字节流** 的\n- UDP 是 **面向无连接** 的\n\nTCP 的三大核心特性\n\n### 1、面向连接\n\n在客户端和服务器互相通信之前，TCP 需要三次握手建立连接，而 UDP 不需要\n\n### 2、可靠性\n\nTCP 的可靠性体现在**有状态、可控制**。\n\n#### （1）有状态\n\nTCP 会记录发送的数据，以及其中被接收和未被接收的数据，并保证数据包按序到达\n\n#### （2）可控制\n\n当意识到丢包或网络不佳，TCP 会根据情况调整自身行为，控制发送速度或者重发\n\n### 3、面向字节流\n\nUDP 的数据传输是基于数据报的，这仅仅继承了 IP 层的特性；而 TCP 为了维护状态，将 IP 包变成了字节流\n\n## 二、TCP 三次握手过程 & 为什么是三次\n\n### 1、流程\n\n发送与接收方需要确认双方的两种能力：发送和接收，于是会有三次握手的过程:\n\n![图2](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/2/23/170723de9b8aa08b~tplv-t2oaga2asx-zoom-in-crop-mark:1512:0:0:0.webp)\n\n#### （1）服务器变为 LISTEN\n\n##### 起初双方都处于 CLOSED 状态。服务端开始监听某个端口，进入 LISTEN 状态\n\n#### （2）客户端变为 SYN-SENT\n\n##### 客户端主动发起连接，发送 SYN，并进入 SYN-SENT 状态\n\n其中 seq=x，表示客户端告诉服务端，我发送的首个数据包 序列号从 x 开始\n\n#### （3）服务端变为 SYN-REVD\n\n##### 服务端接收到，返回 SYN 和 ACK（对应客户端发来的 SYN），并进入 SYN-REVD 状态\n\n其中 seq=y，ack=x+1，seq=y 表示服务端的初始序列号是 y ，ack=x+1 表示服务端告诉客户端：已收到从序列号 x 开始的数据包，期望下次发送从序列号 x+1 开始的数据包\n\n#### （4）客户端变为 ESTABLISHED\n\n##### 客户端再发送 ACK 给服务端，并进入 ESTABLISHED 状态\n\n其中 seq=x+1 ，ack=y+1 。seq=x+1 表示客户端按照服务端的期望，从序列号 x+1 开始发送数据包，ack=y+1 表示客户端告诉服务端：已收到从序列号 y 开始的数据包，期望下次发送从序列号 y+1 开始的数据包\n\n##### 服务端收到 ACK 之后，也进入 ESTABLISHED 状态\n\n注意：凡是需要对端确认的，一定会消耗 TCP 报文的序列号。\nSYN 需要对端的确认，而 ACK 不需要，因此 SYN 消耗一个序列号，下次发送对应的 ACK 序列号要加 1，而 ACK 不需要。\n\n### 2、为什么不是两次握手\n\n根本原因：**没有第三次握手，服务端无法确认客户端的接收能力**\n\n如果是两次，客户端发送 SYN 报文试图和服务端建立连接，但是这个包发生了滞留；一段时间后，客户端未收到服务端响应，以为丢了包，于是重传，两次握手建立好了连接。\n\n但是在连接关闭后，如果滞留的包到达了服务端，这时由于是两次握手，服务端只要接收到、并给客户端发送了相应的数据包，就默认建立连接，但是此时客户端已经断开，这就带来了资源的浪费。\n\n### 3、三次握手过程中可以携带数据么\n\n第三次握手可以携带数据，前两次握手不能携带\n\n如果前两次握手能够携带数据，一旦有人想攻击服务器，只需要在第一次握手中的 SYN 报文中放大量数据，服务器势必会消耗更多的时间和内存空间去进行处理，增大了服务器被攻击的风险\n\n第三次握手时，客户端已处于 ESTABLISHED 状态，并且能够确认服务器的接收、发送能力正常，这时相对安全，可以携带数据\n\n## 三、TCP 四次挥手的过程\n","source":"_posts/29-TCP.md","raw":"---\ntitle: TCP\ndate: 2024-11-05 17:31:10\ntags:\n    - 面经\n    - 计算机网络\n    - TCP\ncategories:\n    - 计算机网络\n      - TCP\n---\n\n![图1](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/2/23/1707236e03d22cbc~tplv-t2oaga2asx-zoom-in-crop-mark:1512:0:0:0.webp)\n\n## 一、TCP 和 UDP 的区别\n\nTCP 和 UDP 都是传输层协议，不同点在于：\n\n- TCP 是 **面向连接的、可靠的、面向字节流** 的\n- UDP 是 **面向无连接** 的\n\nTCP 的三大核心特性\n\n### 1、面向连接\n\n在客户端和服务器互相通信之前，TCP 需要三次握手建立连接，而 UDP 不需要\n\n### 2、可靠性\n\nTCP 的可靠性体现在**有状态、可控制**。\n\n#### （1）有状态\n\nTCP 会记录发送的数据，以及其中被接收和未被接收的数据，并保证数据包按序到达\n\n#### （2）可控制\n\n当意识到丢包或网络不佳，TCP 会根据情况调整自身行为，控制发送速度或者重发\n\n### 3、面向字节流\n\nUDP 的数据传输是基于数据报的，这仅仅继承了 IP 层的特性；而 TCP 为了维护状态，将 IP 包变成了字节流\n\n## 二、TCP 三次握手过程 & 为什么是三次\n\n### 1、流程\n\n发送与接收方需要确认双方的两种能力：发送和接收，于是会有三次握手的过程:\n\n![图2](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/2/23/170723de9b8aa08b~tplv-t2oaga2asx-zoom-in-crop-mark:1512:0:0:0.webp)\n\n#### （1）服务器变为 LISTEN\n\n##### 起初双方都处于 CLOSED 状态。服务端开始监听某个端口，进入 LISTEN 状态\n\n#### （2）客户端变为 SYN-SENT\n\n##### 客户端主动发起连接，发送 SYN，并进入 SYN-SENT 状态\n\n其中 seq=x，表示客户端告诉服务端，我发送的首个数据包 序列号从 x 开始\n\n#### （3）服务端变为 SYN-REVD\n\n##### 服务端接收到，返回 SYN 和 ACK（对应客户端发来的 SYN），并进入 SYN-REVD 状态\n\n其中 seq=y，ack=x+1，seq=y 表示服务端的初始序列号是 y ，ack=x+1 表示服务端告诉客户端：已收到从序列号 x 开始的数据包，期望下次发送从序列号 x+1 开始的数据包\n\n#### （4）客户端变为 ESTABLISHED\n\n##### 客户端再发送 ACK 给服务端，并进入 ESTABLISHED 状态\n\n其中 seq=x+1 ，ack=y+1 。seq=x+1 表示客户端按照服务端的期望，从序列号 x+1 开始发送数据包，ack=y+1 表示客户端告诉服务端：已收到从序列号 y 开始的数据包，期望下次发送从序列号 y+1 开始的数据包\n\n##### 服务端收到 ACK 之后，也进入 ESTABLISHED 状态\n\n注意：凡是需要对端确认的，一定会消耗 TCP 报文的序列号。\nSYN 需要对端的确认，而 ACK 不需要，因此 SYN 消耗一个序列号，下次发送对应的 ACK 序列号要加 1，而 ACK 不需要。\n\n### 2、为什么不是两次握手\n\n根本原因：**没有第三次握手，服务端无法确认客户端的接收能力**\n\n如果是两次，客户端发送 SYN 报文试图和服务端建立连接，但是这个包发生了滞留；一段时间后，客户端未收到服务端响应，以为丢了包，于是重传，两次握手建立好了连接。\n\n但是在连接关闭后，如果滞留的包到达了服务端，这时由于是两次握手，服务端只要接收到、并给客户端发送了相应的数据包，就默认建立连接，但是此时客户端已经断开，这就带来了资源的浪费。\n\n### 3、三次握手过程中可以携带数据么\n\n第三次握手可以携带数据，前两次握手不能携带\n\n如果前两次握手能够携带数据，一旦有人想攻击服务器，只需要在第一次握手中的 SYN 报文中放大量数据，服务器势必会消耗更多的时间和内存空间去进行处理，增大了服务器被攻击的风险\n\n第三次握手时，客户端已处于 ESTABLISHED 状态，并且能够确认服务器的接收、发送能力正常，这时相对安全，可以携带数据\n\n## 三、TCP 四次挥手的过程\n","slug":"29-TCP","published":1,"updated":"2025-01-02T16:09:17.326Z","_id":"cm38m0cxl000d4ew6etf6fdjc","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/2/23/1707236e03d22cbc~tplv-t2oaga2asx-zoom-in-crop-mark:1512:0:0:0.webp\"\n                      alt=\"图1\"\n                ></p>\n<h2 id=\"一、TCP-和-UDP-的区别\"><a href=\"#一、TCP-和-UDP-的区别\" class=\"headerlink\" title=\"一、TCP 和 UDP 的区别\"></a>一、TCP 和 UDP 的区别</h2><p>TCP 和 UDP 都是传输层协议，不同点在于：</p>\n<ul>\n<li>TCP 是 <strong>面向连接的、可靠的、面向字节流</strong> 的</li>\n<li>UDP 是 <strong>面向无连接</strong> 的</li>\n</ul>\n<p>TCP 的三大核心特性</p>\n<h3 id=\"1、面向连接\"><a href=\"#1、面向连接\" class=\"headerlink\" title=\"1、面向连接\"></a>1、面向连接</h3><p>在客户端和服务器互相通信之前，TCP 需要三次握手建立连接，而 UDP 不需要</p>\n<h3 id=\"2、可靠性\"><a href=\"#2、可靠性\" class=\"headerlink\" title=\"2、可靠性\"></a>2、可靠性</h3><p>TCP 的可靠性体现在<strong>有状态、可控制</strong>。</p>\n<h4 id=\"（1）有状态\"><a href=\"#（1）有状态\" class=\"headerlink\" title=\"（1）有状态\"></a>（1）有状态</h4><p>TCP 会记录发送的数据，以及其中被接收和未被接收的数据，并保证数据包按序到达</p>\n<h4 id=\"（2）可控制\"><a href=\"#（2）可控制\" class=\"headerlink\" title=\"（2）可控制\"></a>（2）可控制</h4><p>当意识到丢包或网络不佳，TCP 会根据情况调整自身行为，控制发送速度或者重发</p>\n<h3 id=\"3、面向字节流\"><a href=\"#3、面向字节流\" class=\"headerlink\" title=\"3、面向字节流\"></a>3、面向字节流</h3><p>UDP 的数据传输是基于数据报的，这仅仅继承了 IP 层的特性；而 TCP 为了维护状态，将 IP 包变成了字节流</p>\n<h2 id=\"二、TCP-三次握手过程-为什么是三次\"><a href=\"#二、TCP-三次握手过程-为什么是三次\" class=\"headerlink\" title=\"二、TCP 三次握手过程 &amp; 为什么是三次\"></a>二、TCP 三次握手过程 &amp; 为什么是三次</h2><h3 id=\"1、流程\"><a href=\"#1、流程\" class=\"headerlink\" title=\"1、流程\"></a>1、流程</h3><p>发送与接收方需要确认双方的两种能力：发送和接收，于是会有三次握手的过程:</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/2/23/170723de9b8aa08b~tplv-t2oaga2asx-zoom-in-crop-mark:1512:0:0:0.webp\"\n                      alt=\"图2\"\n                ></p>\n<h4 id=\"（1）服务器变为-LISTEN\"><a href=\"#（1）服务器变为-LISTEN\" class=\"headerlink\" title=\"（1）服务器变为 LISTEN\"></a>（1）服务器变为 LISTEN</h4><h5 id=\"起初双方都处于-CLOSED-状态。服务端开始监听某个端口，进入-LISTEN-状态\"><a href=\"#起初双方都处于-CLOSED-状态。服务端开始监听某个端口，进入-LISTEN-状态\" class=\"headerlink\" title=\"起初双方都处于 CLOSED 状态。服务端开始监听某个端口，进入 LISTEN 状态\"></a>起初双方都处于 CLOSED 状态。服务端开始监听某个端口，进入 LISTEN 状态</h5><h4 id=\"（2）客户端变为-SYN-SENT\"><a href=\"#（2）客户端变为-SYN-SENT\" class=\"headerlink\" title=\"（2）客户端变为 SYN-SENT\"></a>（2）客户端变为 SYN-SENT</h4><h5 id=\"客户端主动发起连接，发送-SYN，并进入-SYN-SENT-状态\"><a href=\"#客户端主动发起连接，发送-SYN，并进入-SYN-SENT-状态\" class=\"headerlink\" title=\"客户端主动发起连接，发送 SYN，并进入 SYN-SENT 状态\"></a>客户端主动发起连接，发送 SYN，并进入 SYN-SENT 状态</h5><p>其中 seq&#x3D;x，表示客户端告诉服务端，我发送的首个数据包 序列号从 x 开始</p>\n<h4 id=\"（3）服务端变为-SYN-REVD\"><a href=\"#（3）服务端变为-SYN-REVD\" class=\"headerlink\" title=\"（3）服务端变为 SYN-REVD\"></a>（3）服务端变为 SYN-REVD</h4><h5 id=\"服务端接收到，返回-SYN-和-ACK（对应客户端发来的-SYN），并进入-SYN-REVD-状态\"><a href=\"#服务端接收到，返回-SYN-和-ACK（对应客户端发来的-SYN），并进入-SYN-REVD-状态\" class=\"headerlink\" title=\"服务端接收到，返回 SYN 和 ACK（对应客户端发来的 SYN），并进入 SYN-REVD 状态\"></a>服务端接收到，返回 SYN 和 ACK（对应客户端发来的 SYN），并进入 SYN-REVD 状态</h5><p>其中 seq&#x3D;y，ack&#x3D;x+1，seq&#x3D;y 表示服务端的初始序列号是 y ，ack&#x3D;x+1 表示服务端告诉客户端：已收到从序列号 x 开始的数据包，期望下次发送从序列号 x+1 开始的数据包</p>\n<h4 id=\"（4）客户端变为-ESTABLISHED\"><a href=\"#（4）客户端变为-ESTABLISHED\" class=\"headerlink\" title=\"（4）客户端变为 ESTABLISHED\"></a>（4）客户端变为 ESTABLISHED</h4><h5 id=\"客户端再发送-ACK-给服务端，并进入-ESTABLISHED-状态\"><a href=\"#客户端再发送-ACK-给服务端，并进入-ESTABLISHED-状态\" class=\"headerlink\" title=\"客户端再发送 ACK 给服务端，并进入 ESTABLISHED 状态\"></a>客户端再发送 ACK 给服务端，并进入 ESTABLISHED 状态</h5><p>其中 seq&#x3D;x+1 ，ack&#x3D;y+1 。seq&#x3D;x+1 表示客户端按照服务端的期望，从序列号 x+1 开始发送数据包，ack&#x3D;y+1 表示客户端告诉服务端：已收到从序列号 y 开始的数据包，期望下次发送从序列号 y+1 开始的数据包</p>\n<h5 id=\"服务端收到-ACK-之后，也进入-ESTABLISHED-状态\"><a href=\"#服务端收到-ACK-之后，也进入-ESTABLISHED-状态\" class=\"headerlink\" title=\"服务端收到 ACK 之后，也进入 ESTABLISHED 状态\"></a>服务端收到 ACK 之后，也进入 ESTABLISHED 状态</h5><p>注意：凡是需要对端确认的，一定会消耗 TCP 报文的序列号。<br>SYN 需要对端的确认，而 ACK 不需要，因此 SYN 消耗一个序列号，下次发送对应的 ACK 序列号要加 1，而 ACK 不需要。</p>\n<h3 id=\"2、为什么不是两次握手\"><a href=\"#2、为什么不是两次握手\" class=\"headerlink\" title=\"2、为什么不是两次握手\"></a>2、为什么不是两次握手</h3><p>根本原因：<strong>没有第三次握手，服务端无法确认客户端的接收能力</strong></p>\n<p>如果是两次，客户端发送 SYN 报文试图和服务端建立连接，但是这个包发生了滞留；一段时间后，客户端未收到服务端响应，以为丢了包，于是重传，两次握手建立好了连接。</p>\n<p>但是在连接关闭后，如果滞留的包到达了服务端，这时由于是两次握手，服务端只要接收到、并给客户端发送了相应的数据包，就默认建立连接，但是此时客户端已经断开，这就带来了资源的浪费。</p>\n<h3 id=\"3、三次握手过程中可以携带数据么\"><a href=\"#3、三次握手过程中可以携带数据么\" class=\"headerlink\" title=\"3、三次握手过程中可以携带数据么\"></a>3、三次握手过程中可以携带数据么</h3><p>第三次握手可以携带数据，前两次握手不能携带</p>\n<p>如果前两次握手能够携带数据，一旦有人想攻击服务器，只需要在第一次握手中的 SYN 报文中放大量数据，服务器势必会消耗更多的时间和内存空间去进行处理，增大了服务器被攻击的风险</p>\n<p>第三次握手时，客户端已处于 ESTABLISHED 状态，并且能够确认服务器的接收、发送能力正常，这时相对安全，可以携带数据</p>\n<h2 id=\"三、TCP-四次挥手的过程\"><a href=\"#三、TCP-四次挥手的过程\" class=\"headerlink\" title=\"三、TCP 四次挥手的过程\"></a>三、TCP 四次挥手的过程</h2>","site":{"data":{}},"excerpt":"","more":"<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/2/23/1707236e03d22cbc~tplv-t2oaga2asx-zoom-in-crop-mark:1512:0:0:0.webp\"\n                      alt=\"图1\"\n                ></p>\n<h2 id=\"一、TCP-和-UDP-的区别\"><a href=\"#一、TCP-和-UDP-的区别\" class=\"headerlink\" title=\"一、TCP 和 UDP 的区别\"></a>一、TCP 和 UDP 的区别</h2><p>TCP 和 UDP 都是传输层协议，不同点在于：</p>\n<ul>\n<li>TCP 是 <strong>面向连接的、可靠的、面向字节流</strong> 的</li>\n<li>UDP 是 <strong>面向无连接</strong> 的</li>\n</ul>\n<p>TCP 的三大核心特性</p>\n<h3 id=\"1、面向连接\"><a href=\"#1、面向连接\" class=\"headerlink\" title=\"1、面向连接\"></a>1、面向连接</h3><p>在客户端和服务器互相通信之前，TCP 需要三次握手建立连接，而 UDP 不需要</p>\n<h3 id=\"2、可靠性\"><a href=\"#2、可靠性\" class=\"headerlink\" title=\"2、可靠性\"></a>2、可靠性</h3><p>TCP 的可靠性体现在<strong>有状态、可控制</strong>。</p>\n<h4 id=\"（1）有状态\"><a href=\"#（1）有状态\" class=\"headerlink\" title=\"（1）有状态\"></a>（1）有状态</h4><p>TCP 会记录发送的数据，以及其中被接收和未被接收的数据，并保证数据包按序到达</p>\n<h4 id=\"（2）可控制\"><a href=\"#（2）可控制\" class=\"headerlink\" title=\"（2）可控制\"></a>（2）可控制</h4><p>当意识到丢包或网络不佳，TCP 会根据情况调整自身行为，控制发送速度或者重发</p>\n<h3 id=\"3、面向字节流\"><a href=\"#3、面向字节流\" class=\"headerlink\" title=\"3、面向字节流\"></a>3、面向字节流</h3><p>UDP 的数据传输是基于数据报的，这仅仅继承了 IP 层的特性；而 TCP 为了维护状态，将 IP 包变成了字节流</p>\n<h2 id=\"二、TCP-三次握手过程-为什么是三次\"><a href=\"#二、TCP-三次握手过程-为什么是三次\" class=\"headerlink\" title=\"二、TCP 三次握手过程 &amp; 为什么是三次\"></a>二、TCP 三次握手过程 &amp; 为什么是三次</h2><h3 id=\"1、流程\"><a href=\"#1、流程\" class=\"headerlink\" title=\"1、流程\"></a>1、流程</h3><p>发送与接收方需要确认双方的两种能力：发送和接收，于是会有三次握手的过程:</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/2/23/170723de9b8aa08b~tplv-t2oaga2asx-zoom-in-crop-mark:1512:0:0:0.webp\"\n                      alt=\"图2\"\n                ></p>\n<h4 id=\"（1）服务器变为-LISTEN\"><a href=\"#（1）服务器变为-LISTEN\" class=\"headerlink\" title=\"（1）服务器变为 LISTEN\"></a>（1）服务器变为 LISTEN</h4><h5 id=\"起初双方都处于-CLOSED-状态。服务端开始监听某个端口，进入-LISTEN-状态\"><a href=\"#起初双方都处于-CLOSED-状态。服务端开始监听某个端口，进入-LISTEN-状态\" class=\"headerlink\" title=\"起初双方都处于 CLOSED 状态。服务端开始监听某个端口，进入 LISTEN 状态\"></a>起初双方都处于 CLOSED 状态。服务端开始监听某个端口，进入 LISTEN 状态</h5><h4 id=\"（2）客户端变为-SYN-SENT\"><a href=\"#（2）客户端变为-SYN-SENT\" class=\"headerlink\" title=\"（2）客户端变为 SYN-SENT\"></a>（2）客户端变为 SYN-SENT</h4><h5 id=\"客户端主动发起连接，发送-SYN，并进入-SYN-SENT-状态\"><a href=\"#客户端主动发起连接，发送-SYN，并进入-SYN-SENT-状态\" class=\"headerlink\" title=\"客户端主动发起连接，发送 SYN，并进入 SYN-SENT 状态\"></a>客户端主动发起连接，发送 SYN，并进入 SYN-SENT 状态</h5><p>其中 seq&#x3D;x，表示客户端告诉服务端，我发送的首个数据包 序列号从 x 开始</p>\n<h4 id=\"（3）服务端变为-SYN-REVD\"><a href=\"#（3）服务端变为-SYN-REVD\" class=\"headerlink\" title=\"（3）服务端变为 SYN-REVD\"></a>（3）服务端变为 SYN-REVD</h4><h5 id=\"服务端接收到，返回-SYN-和-ACK（对应客户端发来的-SYN），并进入-SYN-REVD-状态\"><a href=\"#服务端接收到，返回-SYN-和-ACK（对应客户端发来的-SYN），并进入-SYN-REVD-状态\" class=\"headerlink\" title=\"服务端接收到，返回 SYN 和 ACK（对应客户端发来的 SYN），并进入 SYN-REVD 状态\"></a>服务端接收到，返回 SYN 和 ACK（对应客户端发来的 SYN），并进入 SYN-REVD 状态</h5><p>其中 seq&#x3D;y，ack&#x3D;x+1，seq&#x3D;y 表示服务端的初始序列号是 y ，ack&#x3D;x+1 表示服务端告诉客户端：已收到从序列号 x 开始的数据包，期望下次发送从序列号 x+1 开始的数据包</p>\n<h4 id=\"（4）客户端变为-ESTABLISHED\"><a href=\"#（4）客户端变为-ESTABLISHED\" class=\"headerlink\" title=\"（4）客户端变为 ESTABLISHED\"></a>（4）客户端变为 ESTABLISHED</h4><h5 id=\"客户端再发送-ACK-给服务端，并进入-ESTABLISHED-状态\"><a href=\"#客户端再发送-ACK-给服务端，并进入-ESTABLISHED-状态\" class=\"headerlink\" title=\"客户端再发送 ACK 给服务端，并进入 ESTABLISHED 状态\"></a>客户端再发送 ACK 给服务端，并进入 ESTABLISHED 状态</h5><p>其中 seq&#x3D;x+1 ，ack&#x3D;y+1 。seq&#x3D;x+1 表示客户端按照服务端的期望，从序列号 x+1 开始发送数据包，ack&#x3D;y+1 表示客户端告诉服务端：已收到从序列号 y 开始的数据包，期望下次发送从序列号 y+1 开始的数据包</p>\n<h5 id=\"服务端收到-ACK-之后，也进入-ESTABLISHED-状态\"><a href=\"#服务端收到-ACK-之后，也进入-ESTABLISHED-状态\" class=\"headerlink\" title=\"服务端收到 ACK 之后，也进入 ESTABLISHED 状态\"></a>服务端收到 ACK 之后，也进入 ESTABLISHED 状态</h5><p>注意：凡是需要对端确认的，一定会消耗 TCP 报文的序列号。<br>SYN 需要对端的确认，而 ACK 不需要，因此 SYN 消耗一个序列号，下次发送对应的 ACK 序列号要加 1，而 ACK 不需要。</p>\n<h3 id=\"2、为什么不是两次握手\"><a href=\"#2、为什么不是两次握手\" class=\"headerlink\" title=\"2、为什么不是两次握手\"></a>2、为什么不是两次握手</h3><p>根本原因：<strong>没有第三次握手，服务端无法确认客户端的接收能力</strong></p>\n<p>如果是两次，客户端发送 SYN 报文试图和服务端建立连接，但是这个包发生了滞留；一段时间后，客户端未收到服务端响应，以为丢了包，于是重传，两次握手建立好了连接。</p>\n<p>但是在连接关闭后，如果滞留的包到达了服务端，这时由于是两次握手，服务端只要接收到、并给客户端发送了相应的数据包，就默认建立连接，但是此时客户端已经断开，这就带来了资源的浪费。</p>\n<h3 id=\"3、三次握手过程中可以携带数据么\"><a href=\"#3、三次握手过程中可以携带数据么\" class=\"headerlink\" title=\"3、三次握手过程中可以携带数据么\"></a>3、三次握手过程中可以携带数据么</h3><p>第三次握手可以携带数据，前两次握手不能携带</p>\n<p>如果前两次握手能够携带数据，一旦有人想攻击服务器，只需要在第一次握手中的 SYN 报文中放大量数据，服务器势必会消耗更多的时间和内存空间去进行处理，增大了服务器被攻击的风险</p>\n<p>第三次握手时，客户端已处于 ESTABLISHED 状态，并且能够确认服务器的接收、发送能力正常，这时相对安全，可以携带数据</p>\n<h2 id=\"三、TCP-四次挥手的过程\"><a href=\"#三、TCP-四次挥手的过程\" class=\"headerlink\" title=\"三、TCP 四次挥手的过程\"></a>三、TCP 四次挥手的过程</h2>"},{"title":"北大-区块链技术与应用1-简介","date":"2025-01-02T05:16:35.000Z","_content":"\n本课程主要讲：比特币和以太坊 两种加密货币\n\n视频链接：\n\n`<https://www.bilibili.com/video/BV1Vt411X7JF/?spm_id_from=333.337.search-card.all.click&vd_source=69ac93649ea21c4726fe85f272b6d968>`\n","source":"_posts/30-北大区块链-简介.md","raw":"---\ntitle: 北大-区块链技术与应用1-简介\ndate: 2025-01-02 13:16:35\ntags:\n    - web3\ncategories:\n    - Web3\n      - 北大肖臻-区块链技术与应用\n---\n\n本课程主要讲：比特币和以太坊 两种加密货币\n\n视频链接：\n\n`<https://www.bilibili.com/video/BV1Vt411X7JF/?spm_id_from=333.337.search-card.all.click&vd_source=69ac93649ea21c4726fe85f272b6d968>`\n","slug":"30-北大区块链-简介","published":1,"updated":"2025-01-14T13:02:29.365Z","_id":"cm5evjs7600001kw61yjfd9mi","comments":1,"layout":"post","photos":[],"link":"","content":"<p>本课程主要讲：比特币和以太坊 两种加密货币</p>\n<p>视频链接：</p>\n<p><code>&lt;https://www.bilibili.com/video/BV1Vt411X7JF/?spm_id_from=333.337.search-card.all.click&amp;vd_source=69ac93649ea21c4726fe85f272b6d968&gt;</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本课程主要讲：比特币和以太坊 两种加密货币</p>\n<p>视频链接：</p>\n<p><code>&lt;https://www.bilibili.com/video/BV1Vt411X7JF/?spm_id_from=333.337.search-card.all.click&amp;vd_source=69ac93649ea21c4726fe85f272b6d968&gt;</code></p>\n"},{"title":"北大-区块链技术与应用2-密码学基础","date":"2025-01-02T05:24:53.000Z","_content":"\nCrypto-currency（加密货币）\n\n区块链和比特币主要用到：哈希函数 和 数字签名\n\n## 一、Cryptographic Hash Function（哈希函数）\n\n区块链用到了哈希函数的 抗碰撞性 和 隐私性；比特币除了这两个性质，还要求 谜题友好性\n\n### （1）Collision resistance（抗碰撞）\n\n x≠y, H(x)≠H(y)\n 给定一个x，没有高效的方法找到一个y，满足H(x)=H(y)，可以用 brute-force（蛮力破解）\n\n Message digest（信息摘要）：给定一个消息m，用H(m)检测对消息的篡改\n 对m'≠m，H(m')≠H(m)\n\n MD5已经可以被人为地制造碰撞\n\n### （2）Hiding（隐私性）/ Not invertable（单向不可逆）\n\n x --> H(x)，没有高效的方法从H(x)得到x，除了 brute-force\n\n### （3）Puzzle friendly（谜题友好）\n\n 不知道如何选定x，使H(x)落在某个区间内，Exp. 00…0XXX…X（以k个0开始）\n\n 挖矿过程：找一个nonce，和区块块头中的其他信息和在一起作为输入，哈希过后的值要小于等于目标域值，即H(block header) ≤target\n 其谜题友好意味着，挖矿的过程不存在捷径，只能靠 brute-force，所以该过程才能作为 power of work（pow，工作量证明）\n 设置 mining puzzle 的原则：Difficult to solve, but easy to verify\n\n#### Example 1\n\n比特币中用到的哈希函数是 SHA-256（Secure Hash Algorithm），满足以上三个性质\n\n#### Example 2\n\nDigital commitment（数字承诺），又名 Digital Equivalent of a Sealed Envelope（密封信封的数字等价物），允许一方将某个值（秘密或消息）“承诺”给另一方（验证者）\n\n结合了哈希函数的抗碰撞和隐私性\nHiding：公开m=H(x)，给定x'，如果H(x')=m，即可保证x'=x\n\n扩大输入空间的方法：选取nonce（number once）随机数，H(x||nonce)\n\n## 二、Digital Signature（数字签名）\n\n不同于银行的开户流程，比特币是去中心化的，只要在本地创建一个公私钥对（public key，private key），就代表一个比特币账户，来源于非对称加密体系（asymmetric encryption algorithm）\n\n在比特币系统中，公私钥用于签名：发布者用自己的私钥对交易进行签名，接受者通过发布者的公钥验签\n\n生成公私钥、以及签名 都需要 a good source of randomess\n\n## 总结\n\n在比特币系统中，通常对一个message取哈希，然后再对该哈希值进行签名\n","source":"_posts/31-北大区块链-密码学基础.md","raw":"---\ntitle: 北大-区块链技术与应用2-密码学基础\ndate: 2025-01-02 13:24:53\ntags:\n    - web3\n    - 密码学\ncategories:\n    - Web3\n      - 北大肖臻-区块链技术与应用\n---\n\nCrypto-currency（加密货币）\n\n区块链和比特币主要用到：哈希函数 和 数字签名\n\n## 一、Cryptographic Hash Function（哈希函数）\n\n区块链用到了哈希函数的 抗碰撞性 和 隐私性；比特币除了这两个性质，还要求 谜题友好性\n\n### （1）Collision resistance（抗碰撞）\n\n x≠y, H(x)≠H(y)\n 给定一个x，没有高效的方法找到一个y，满足H(x)=H(y)，可以用 brute-force（蛮力破解）\n\n Message digest（信息摘要）：给定一个消息m，用H(m)检测对消息的篡改\n 对m'≠m，H(m')≠H(m)\n\n MD5已经可以被人为地制造碰撞\n\n### （2）Hiding（隐私性）/ Not invertable（单向不可逆）\n\n x --> H(x)，没有高效的方法从H(x)得到x，除了 brute-force\n\n### （3）Puzzle friendly（谜题友好）\n\n 不知道如何选定x，使H(x)落在某个区间内，Exp. 00…0XXX…X（以k个0开始）\n\n 挖矿过程：找一个nonce，和区块块头中的其他信息和在一起作为输入，哈希过后的值要小于等于目标域值，即H(block header) ≤target\n 其谜题友好意味着，挖矿的过程不存在捷径，只能靠 brute-force，所以该过程才能作为 power of work（pow，工作量证明）\n 设置 mining puzzle 的原则：Difficult to solve, but easy to verify\n\n#### Example 1\n\n比特币中用到的哈希函数是 SHA-256（Secure Hash Algorithm），满足以上三个性质\n\n#### Example 2\n\nDigital commitment（数字承诺），又名 Digital Equivalent of a Sealed Envelope（密封信封的数字等价物），允许一方将某个值（秘密或消息）“承诺”给另一方（验证者）\n\n结合了哈希函数的抗碰撞和隐私性\nHiding：公开m=H(x)，给定x'，如果H(x')=m，即可保证x'=x\n\n扩大输入空间的方法：选取nonce（number once）随机数，H(x||nonce)\n\n## 二、Digital Signature（数字签名）\n\n不同于银行的开户流程，比特币是去中心化的，只要在本地创建一个公私钥对（public key，private key），就代表一个比特币账户，来源于非对称加密体系（asymmetric encryption algorithm）\n\n在比特币系统中，公私钥用于签名：发布者用自己的私钥对交易进行签名，接受者通过发布者的公钥验签\n\n生成公私钥、以及签名 都需要 a good source of randomess\n\n## 总结\n\n在比特币系统中，通常对一个message取哈希，然后再对该哈希值进行签名\n","slug":"31-北大区块链-密码学基础","published":1,"updated":"2025-01-13T12:58:05.649Z","_id":"cm5firt1i0000zww62fyh72ym","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Crypto-currency（加密货币）</p>\n<p>区块链和比特币主要用到：哈希函数 和 数字签名</p>\n<h2 id=\"一、Cryptographic-Hash-Function（哈希函数）\"><a href=\"#一、Cryptographic-Hash-Function（哈希函数）\" class=\"headerlink\" title=\"一、Cryptographic Hash Function（哈希函数）\"></a>一、Cryptographic Hash Function（哈希函数）</h2><p>区块链用到了哈希函数的 抗碰撞性 和 隐私性；比特币除了这两个性质，还要求 谜题友好性</p>\n<h3 id=\"（1）Collision-resistance（抗碰撞）\"><a href=\"#（1）Collision-resistance（抗碰撞）\" class=\"headerlink\" title=\"（1）Collision resistance（抗碰撞）\"></a>（1）Collision resistance（抗碰撞）</h3><p> x≠y, H(x)≠H(y)<br> 给定一个x，没有高效的方法找到一个y，满足H(x)&#x3D;H(y)，可以用 brute-force（蛮力破解）</p>\n<p> Message digest（信息摘要）：给定一个消息m，用H(m)检测对消息的篡改<br> 对m’≠m，H(m’)≠H(m)</p>\n<p> MD5已经可以被人为地制造碰撞</p>\n<h3 id=\"（2）Hiding（隐私性）-Not-invertable（单向不可逆）\"><a href=\"#（2）Hiding（隐私性）-Not-invertable（单向不可逆）\" class=\"headerlink\" title=\"（2）Hiding（隐私性）&#x2F; Not invertable（单向不可逆）\"></a>（2）Hiding（隐私性）&#x2F; Not invertable（单向不可逆）</h3><p> x –&gt; H(x)，没有高效的方法从H(x)得到x，除了 brute-force</p>\n<h3 id=\"（3）Puzzle-friendly（谜题友好）\"><a href=\"#（3）Puzzle-friendly（谜题友好）\" class=\"headerlink\" title=\"（3）Puzzle friendly（谜题友好）\"></a>（3）Puzzle friendly（谜题友好）</h3><p> 不知道如何选定x，使H(x)落在某个区间内，Exp. 00…0XXX…X（以k个0开始）</p>\n<p> 挖矿过程：找一个nonce，和区块块头中的其他信息和在一起作为输入，哈希过后的值要小于等于目标域值，即H(block header) ≤target<br> 其谜题友好意味着，挖矿的过程不存在捷径，只能靠 brute-force，所以该过程才能作为 power of work（pow，工作量证明）<br> 设置 mining puzzle 的原则：Difficult to solve, but easy to verify</p>\n<h4 id=\"Example-1\"><a href=\"#Example-1\" class=\"headerlink\" title=\"Example 1\"></a>Example 1</h4><p>比特币中用到的哈希函数是 SHA-256（Secure Hash Algorithm），满足以上三个性质</p>\n<h4 id=\"Example-2\"><a href=\"#Example-2\" class=\"headerlink\" title=\"Example 2\"></a>Example 2</h4><p>Digital commitment（数字承诺），又名 Digital Equivalent of a Sealed Envelope（密封信封的数字等价物），允许一方将某个值（秘密或消息）“承诺”给另一方（验证者）</p>\n<p>结合了哈希函数的抗碰撞和隐私性<br>Hiding：公开m&#x3D;H(x)，给定x’，如果H(x’)&#x3D;m，即可保证x’&#x3D;x</p>\n<p>扩大输入空间的方法：选取nonce（number once）随机数，H(x||nonce)</p>\n<h2 id=\"二、Digital-Signature（数字签名）\"><a href=\"#二、Digital-Signature（数字签名）\" class=\"headerlink\" title=\"二、Digital Signature（数字签名）\"></a>二、Digital Signature（数字签名）</h2><p>不同于银行的开户流程，比特币是去中心化的，只要在本地创建一个公私钥对（public key，private key），就代表一个比特币账户，来源于非对称加密体系（asymmetric encryption algorithm）</p>\n<p>在比特币系统中，公私钥用于签名：发布者用自己的私钥对交易进行签名，接受者通过发布者的公钥验签</p>\n<p>生成公私钥、以及签名 都需要 a good source of randomess</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在比特币系统中，通常对一个message取哈希，然后再对该哈希值进行签名</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Crypto-currency（加密货币）</p>\n<p>区块链和比特币主要用到：哈希函数 和 数字签名</p>\n<h2 id=\"一、Cryptographic-Hash-Function（哈希函数）\"><a href=\"#一、Cryptographic-Hash-Function（哈希函数）\" class=\"headerlink\" title=\"一、Cryptographic Hash Function（哈希函数）\"></a>一、Cryptographic Hash Function（哈希函数）</h2><p>区块链用到了哈希函数的 抗碰撞性 和 隐私性；比特币除了这两个性质，还要求 谜题友好性</p>\n<h3 id=\"（1）Collision-resistance（抗碰撞）\"><a href=\"#（1）Collision-resistance（抗碰撞）\" class=\"headerlink\" title=\"（1）Collision resistance（抗碰撞）\"></a>（1）Collision resistance（抗碰撞）</h3><p> x≠y, H(x)≠H(y)<br> 给定一个x，没有高效的方法找到一个y，满足H(x)&#x3D;H(y)，可以用 brute-force（蛮力破解）</p>\n<p> Message digest（信息摘要）：给定一个消息m，用H(m)检测对消息的篡改<br> 对m’≠m，H(m’)≠H(m)</p>\n<p> MD5已经可以被人为地制造碰撞</p>\n<h3 id=\"（2）Hiding（隐私性）-Not-invertable（单向不可逆）\"><a href=\"#（2）Hiding（隐私性）-Not-invertable（单向不可逆）\" class=\"headerlink\" title=\"（2）Hiding（隐私性）&#x2F; Not invertable（单向不可逆）\"></a>（2）Hiding（隐私性）&#x2F; Not invertable（单向不可逆）</h3><p> x –&gt; H(x)，没有高效的方法从H(x)得到x，除了 brute-force</p>\n<h3 id=\"（3）Puzzle-friendly（谜题友好）\"><a href=\"#（3）Puzzle-friendly（谜题友好）\" class=\"headerlink\" title=\"（3）Puzzle friendly（谜题友好）\"></a>（3）Puzzle friendly（谜题友好）</h3><p> 不知道如何选定x，使H(x)落在某个区间内，Exp. 00…0XXX…X（以k个0开始）</p>\n<p> 挖矿过程：找一个nonce，和区块块头中的其他信息和在一起作为输入，哈希过后的值要小于等于目标域值，即H(block header) ≤target<br> 其谜题友好意味着，挖矿的过程不存在捷径，只能靠 brute-force，所以该过程才能作为 power of work（pow，工作量证明）<br> 设置 mining puzzle 的原则：Difficult to solve, but easy to verify</p>\n<h4 id=\"Example-1\"><a href=\"#Example-1\" class=\"headerlink\" title=\"Example 1\"></a>Example 1</h4><p>比特币中用到的哈希函数是 SHA-256（Secure Hash Algorithm），满足以上三个性质</p>\n<h4 id=\"Example-2\"><a href=\"#Example-2\" class=\"headerlink\" title=\"Example 2\"></a>Example 2</h4><p>Digital commitment（数字承诺），又名 Digital Equivalent of a Sealed Envelope（密封信封的数字等价物），允许一方将某个值（秘密或消息）“承诺”给另一方（验证者）</p>\n<p>结合了哈希函数的抗碰撞和隐私性<br>Hiding：公开m&#x3D;H(x)，给定x’，如果H(x’)&#x3D;m，即可保证x’&#x3D;x</p>\n<p>扩大输入空间的方法：选取nonce（number once）随机数，H(x||nonce)</p>\n<h2 id=\"二、Digital-Signature（数字签名）\"><a href=\"#二、Digital-Signature（数字签名）\" class=\"headerlink\" title=\"二、Digital Signature（数字签名）\"></a>二、Digital Signature（数字签名）</h2><p>不同于银行的开户流程，比特币是去中心化的，只要在本地创建一个公私钥对（public key，private key），就代表一个比特币账户，来源于非对称加密体系（asymmetric encryption algorithm）</p>\n<p>在比特币系统中，公私钥用于签名：发布者用自己的私钥对交易进行签名，接受者通过发布者的公钥验签</p>\n<p>生成公私钥、以及签名 都需要 a good source of randomess</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在比特币系统中，通常对一个message取哈希，然后再对该哈希值进行签名</p>\n"},{"title":"北大-区块链技术与应用4-共识协议","date":"2025-01-02T13:59:43.000Z","_content":"\n## 一、Double spending attack（双花攻击）\n\n双花攻击指同一笔资金被重复支付的情况，也是数字货币面临的主要挑战\n\n中心化解决方案：数字货币上添加唯一编号，并由央行维护一个数据结构，展示每个编号的货币由谁持有；如果付费方的货币在表中对应的持有人与此人不符，则证明该货币已支付给其他人\n\n去中心化的解决方案：比特币\n\n关注：货币的发行（挖矿）、交易的有效性验证（防范双花攻击）\n\n## 二、交易的有效性验证\n\n通过一个由所有用户共同维护的数据结构——区块链 来实现\n\n## 三、区块链简易结构\n\nNote：以下为简易版的区块链，每个区块都只有一个交易，实际上每个区块的交易记录都构成一个 Merkle tree\n\n![图1](../images/33/1.png)\n\n存在两种哈希指针：将区块串联成链表的指针，和指向前面某个交易的指针（为了说明币的来源，避免凭空捏造和重复交易）\n\n1、用户A 具有发行货币的权利（铸币权，mint 铸币），并发行了10个比特币（coin base transaction，铸币交易）\n\n2、用户A 分别给 用户B、用户C 5个比特币\n\n3、用户B 分别给 用户C 2个比特币、用户D 3个比特币\n\n4、用户C 转给 用户E 7个比特币\n\n5、假设用户B 继续给 用户F 5个比特币，通过区块的回溯，校验出其已经在先前的交易中支付过了，所以交易不合法（避免双花攻击）\n\n在 用户A 向 用户B 的交易中，需要记录 「输入」A的公钥、A的签名 和 「输出」B的地址（通过B的公钥取哈希等操作得到，可类比为银行卡账号）\nA 需要 B的公钥 知道向哪里转账，所有节点都 需要 A的公钥 来验签\n\n#### BitCoin Scripts\n\n交易中的A的公钥（该交易的输入脚本），需要与 币的来源的A的公钥的哈希（前一交易的输出脚本） 相符（两脚本拼在一起能顺利执行）；否则说明币的来源有问题，A被冒名顶替了\n\n## 四、区块结构\n\n### 1、Block header\n\n包含区块的宏信息，比如：version（协议版本）、hash of privious block header（前一区块头的哈希）、merkle root hash（Merkle树 根哈希），还有和挖矿相关的 target（挖矿的难度目标域值）、nonce（随机数）\n\nNote：\n\n（1）hash of privious block header 取的只是前一区块头的哈希，不包含块体\n\n（2）Merkle树 根哈希 保证了块体中的交易列表不会被篡改\n\n（3）target 满足 H(block header)≤target，块头中存的是该目标域值的编码 nBits（nBits 是用于表示难度的参数，用于判断区块头是否有效）\n\n#### nBits\n\nnBits 是一个包含了目标值信息的编码，通常以十六进制形式存储并表示为一个 4 字节（32 位）的数\n该编码包含两个部分：\n- 难度指数（Exponent）：前 1 个字节（8 位）\n- 目标哈希的有效值（Coefficient）：后 3 个字节（24 位）\n目标值越小，挖掘新区块的难度就越大。这允许系统灵活地调整挖矿的难度，并以压缩的方式存储信息\n\n### 2、Block body\n\n包含 transaction list（交易列表）\n\n## 五、Distributed consensus（分布式共识）\n\n账本的内容要取得分布式的共识\n\n### 1、共识的例子：Distributed hash table（分布式哈希表）\n达成共识的是 key-value pairs（键值对）\n\n### 2、Impossibility result（不可能结论）\n\nExample：FLP impossibility result\n在 asynchronous system（异步系统）中，即使只有一个成员是 faulty（有故障的），那么也无法取得共识\n\nCAP Theorem\n\n（1）Consistency（一致性）\n\n（2）Availability（可用性）：即使某些节点不可用，系统仍然能够提供服务\n\n（3）Partition tolerance（分区容忍性）：分区是指在网络中，若干节点之间的通信链路发生故障时形成的网络割裂，这意味着某些节点无法与其他节点进行交互\n\n不可能三角：任何一个分布式系统，只能满足以上两个性质，不可能三个性质都满足\n\n### 3、分布式共识的著名协议：Paxos\n\n该协议能保证一致性，但是有可能一直达不成共识（可能性比较小）\n\n## 六、Consensus in BitCoin（比特币中的共识）\n\n### 1、基于投票的共识方案\n\n基于投票的方案需要确认投票权的 membership，比如联盟链的协议 hyperledger fabric（超分类账结构）。常规的投票方案会带来 sybil attack（女巫攻击），即通过超级计算机生成超半数的比特币账户以获取控制权\n\n### 2、验证过程\n\nH(block header) ≤ target，block header 中包含 4 bytes 的随机数 nonce，组装好区块后就开始尝试不同的 nonce，直到哈希值落在 target 内。如果某节点找到了符合要求的 nonce，即具备了记账权（在去中心化账本中写入/发布下一个区块的权利），发布后即由其他区块进行验证：\n\n1、验证 block header 中的几项\n\n2、看 block body 中的交易列表，验证每个交易都是合法的：（1）要有合法的签名；（2）以前没有被交易过\n\n### 3、Forking attack（分叉攻击）\n\n但是不同的链上可能发生重复交易（forking attack），解决方案是以 longest valid chain（最长合法链）为准，因此只有扩展最长合法链的区块才是合法的\n\n![图2](../images/33/2.png)\n\n当两个矿工同时创造新区块时，其他节点按照接收时间来选择接受哪个区块，等长的临时性的分叉会维持一段时间，直到其中一条链胜出（先找到下一个区块）；而另一条链就变成了 orphan block（孤儿区块），被丢弃掉，也就没有出块奖励\n\n### 4、Block reward（区/出块奖励）\n\n获得记账权的节点，在发布的区块里可以进行 coinbase transaction（铸币交易），发布一定数量的比特币\n\n一开始，每个发布的区块可以产生 50 BTC；21万个区块以后，出块奖励会减半为 25 BTC；再过21万个区块，会变成 12.5 BTC（现在）\n\n平均出块时间为10分钟，出块奖励减半的时间：21w * 10min / (60min * 24h * 365d) ≈ 4年\n\n### 5、基于 hash rate 的共识方案\n\nHash rate（计算 nonce 哈希的速度）决定了投票的权重，hash rate 越高，获得记账权并得到出块奖励的概率越大\n\n避免 sybil attack（女巫攻击）：创建多个账户不会增加 hash rate，也不会增加投票权重\n\n## 七、类比\n\n挖矿：mining\n\n比特币：digital gold\n\n矿工（争夺记账权的节点）：minner\n","source":"_posts/33-北大区块链-共识协议.md","raw":"---\ntitle: 北大-区块链技术与应用4-共识协议\ndate: 2025-01-02 21:59:43\ntags:\n    - web3\n    - 共识协议\ncategories:\n    - Web3\n      - 北大肖臻-区块链技术与应用\n---\n\n## 一、Double spending attack（双花攻击）\n\n双花攻击指同一笔资金被重复支付的情况，也是数字货币面临的主要挑战\n\n中心化解决方案：数字货币上添加唯一编号，并由央行维护一个数据结构，展示每个编号的货币由谁持有；如果付费方的货币在表中对应的持有人与此人不符，则证明该货币已支付给其他人\n\n去中心化的解决方案：比特币\n\n关注：货币的发行（挖矿）、交易的有效性验证（防范双花攻击）\n\n## 二、交易的有效性验证\n\n通过一个由所有用户共同维护的数据结构——区块链 来实现\n\n## 三、区块链简易结构\n\nNote：以下为简易版的区块链，每个区块都只有一个交易，实际上每个区块的交易记录都构成一个 Merkle tree\n\n![图1](../images/33/1.png)\n\n存在两种哈希指针：将区块串联成链表的指针，和指向前面某个交易的指针（为了说明币的来源，避免凭空捏造和重复交易）\n\n1、用户A 具有发行货币的权利（铸币权，mint 铸币），并发行了10个比特币（coin base transaction，铸币交易）\n\n2、用户A 分别给 用户B、用户C 5个比特币\n\n3、用户B 分别给 用户C 2个比特币、用户D 3个比特币\n\n4、用户C 转给 用户E 7个比特币\n\n5、假设用户B 继续给 用户F 5个比特币，通过区块的回溯，校验出其已经在先前的交易中支付过了，所以交易不合法（避免双花攻击）\n\n在 用户A 向 用户B 的交易中，需要记录 「输入」A的公钥、A的签名 和 「输出」B的地址（通过B的公钥取哈希等操作得到，可类比为银行卡账号）\nA 需要 B的公钥 知道向哪里转账，所有节点都 需要 A的公钥 来验签\n\n#### BitCoin Scripts\n\n交易中的A的公钥（该交易的输入脚本），需要与 币的来源的A的公钥的哈希（前一交易的输出脚本） 相符（两脚本拼在一起能顺利执行）；否则说明币的来源有问题，A被冒名顶替了\n\n## 四、区块结构\n\n### 1、Block header\n\n包含区块的宏信息，比如：version（协议版本）、hash of privious block header（前一区块头的哈希）、merkle root hash（Merkle树 根哈希），还有和挖矿相关的 target（挖矿的难度目标域值）、nonce（随机数）\n\nNote：\n\n（1）hash of privious block header 取的只是前一区块头的哈希，不包含块体\n\n（2）Merkle树 根哈希 保证了块体中的交易列表不会被篡改\n\n（3）target 满足 H(block header)≤target，块头中存的是该目标域值的编码 nBits（nBits 是用于表示难度的参数，用于判断区块头是否有效）\n\n#### nBits\n\nnBits 是一个包含了目标值信息的编码，通常以十六进制形式存储并表示为一个 4 字节（32 位）的数\n该编码包含两个部分：\n- 难度指数（Exponent）：前 1 个字节（8 位）\n- 目标哈希的有效值（Coefficient）：后 3 个字节（24 位）\n目标值越小，挖掘新区块的难度就越大。这允许系统灵活地调整挖矿的难度，并以压缩的方式存储信息\n\n### 2、Block body\n\n包含 transaction list（交易列表）\n\n## 五、Distributed consensus（分布式共识）\n\n账本的内容要取得分布式的共识\n\n### 1、共识的例子：Distributed hash table（分布式哈希表）\n达成共识的是 key-value pairs（键值对）\n\n### 2、Impossibility result（不可能结论）\n\nExample：FLP impossibility result\n在 asynchronous system（异步系统）中，即使只有一个成员是 faulty（有故障的），那么也无法取得共识\n\nCAP Theorem\n\n（1）Consistency（一致性）\n\n（2）Availability（可用性）：即使某些节点不可用，系统仍然能够提供服务\n\n（3）Partition tolerance（分区容忍性）：分区是指在网络中，若干节点之间的通信链路发生故障时形成的网络割裂，这意味着某些节点无法与其他节点进行交互\n\n不可能三角：任何一个分布式系统，只能满足以上两个性质，不可能三个性质都满足\n\n### 3、分布式共识的著名协议：Paxos\n\n该协议能保证一致性，但是有可能一直达不成共识（可能性比较小）\n\n## 六、Consensus in BitCoin（比特币中的共识）\n\n### 1、基于投票的共识方案\n\n基于投票的方案需要确认投票权的 membership，比如联盟链的协议 hyperledger fabric（超分类账结构）。常规的投票方案会带来 sybil attack（女巫攻击），即通过超级计算机生成超半数的比特币账户以获取控制权\n\n### 2、验证过程\n\nH(block header) ≤ target，block header 中包含 4 bytes 的随机数 nonce，组装好区块后就开始尝试不同的 nonce，直到哈希值落在 target 内。如果某节点找到了符合要求的 nonce，即具备了记账权（在去中心化账本中写入/发布下一个区块的权利），发布后即由其他区块进行验证：\n\n1、验证 block header 中的几项\n\n2、看 block body 中的交易列表，验证每个交易都是合法的：（1）要有合法的签名；（2）以前没有被交易过\n\n### 3、Forking attack（分叉攻击）\n\n但是不同的链上可能发生重复交易（forking attack），解决方案是以 longest valid chain（最长合法链）为准，因此只有扩展最长合法链的区块才是合法的\n\n![图2](../images/33/2.png)\n\n当两个矿工同时创造新区块时，其他节点按照接收时间来选择接受哪个区块，等长的临时性的分叉会维持一段时间，直到其中一条链胜出（先找到下一个区块）；而另一条链就变成了 orphan block（孤儿区块），被丢弃掉，也就没有出块奖励\n\n### 4、Block reward（区/出块奖励）\n\n获得记账权的节点，在发布的区块里可以进行 coinbase transaction（铸币交易），发布一定数量的比特币\n\n一开始，每个发布的区块可以产生 50 BTC；21万个区块以后，出块奖励会减半为 25 BTC；再过21万个区块，会变成 12.5 BTC（现在）\n\n平均出块时间为10分钟，出块奖励减半的时间：21w * 10min / (60min * 24h * 365d) ≈ 4年\n\n### 5、基于 hash rate 的共识方案\n\nHash rate（计算 nonce 哈希的速度）决定了投票的权重，hash rate 越高，获得记账权并得到出块奖励的概率越大\n\n避免 sybil attack（女巫攻击）：创建多个账户不会增加 hash rate，也不会增加投票权重\n\n## 七、类比\n\n挖矿：mining\n\n比特币：digital gold\n\n矿工（争夺记账权的节点）：minner\n","slug":"33-北大区块链-共识协议","published":1,"updated":"2025-01-13T12:58:12.453Z","_id":"cm5firt1k0001zww68igh4k6v","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、Double-spending-attack（双花攻击）\"><a href=\"#一、Double-spending-attack（双花攻击）\" class=\"headerlink\" title=\"一、Double spending attack（双花攻击）\"></a>一、Double spending attack（双花攻击）</h2><p>双花攻击指同一笔资金被重复支付的情况，也是数字货币面临的主要挑战</p>\n<p>中心化解决方案：数字货币上添加唯一编号，并由央行维护一个数据结构，展示每个编号的货币由谁持有；如果付费方的货币在表中对应的持有人与此人不符，则证明该货币已支付给其他人</p>\n<p>去中心化的解决方案：比特币</p>\n<p>关注：货币的发行（挖矿）、交易的有效性验证（防范双花攻击）</p>\n<h2 id=\"二、交易的有效性验证\"><a href=\"#二、交易的有效性验证\" class=\"headerlink\" title=\"二、交易的有效性验证\"></a>二、交易的有效性验证</h2><p>通过一个由所有用户共同维护的数据结构——区块链 来实现</p>\n<h2 id=\"三、区块链简易结构\"><a href=\"#三、区块链简易结构\" class=\"headerlink\" title=\"三、区块链简易结构\"></a>三、区块链简易结构</h2><p>Note：以下为简易版的区块链，每个区块都只有一个交易，实际上每个区块的交易记录都构成一个 Merkle tree</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/33/1.png\"\n                      alt=\"图1\"\n                ></p>\n<p>存在两种哈希指针：将区块串联成链表的指针，和指向前面某个交易的指针（为了说明币的来源，避免凭空捏造和重复交易）</p>\n<p>1、用户A 具有发行货币的权利（铸币权，mint 铸币），并发行了10个比特币（coin base transaction，铸币交易）</p>\n<p>2、用户A 分别给 用户B、用户C 5个比特币</p>\n<p>3、用户B 分别给 用户C 2个比特币、用户D 3个比特币</p>\n<p>4、用户C 转给 用户E 7个比特币</p>\n<p>5、假设用户B 继续给 用户F 5个比特币，通过区块的回溯，校验出其已经在先前的交易中支付过了，所以交易不合法（避免双花攻击）</p>\n<p>在 用户A 向 用户B 的交易中，需要记录 「输入」A的公钥、A的签名 和 「输出」B的地址（通过B的公钥取哈希等操作得到，可类比为银行卡账号）<br>A 需要 B的公钥 知道向哪里转账，所有节点都 需要 A的公钥 来验签</p>\n<h4 id=\"BitCoin-Scripts\"><a href=\"#BitCoin-Scripts\" class=\"headerlink\" title=\"BitCoin Scripts\"></a>BitCoin Scripts</h4><p>交易中的A的公钥（该交易的输入脚本），需要与 币的来源的A的公钥的哈希（前一交易的输出脚本） 相符（两脚本拼在一起能顺利执行）；否则说明币的来源有问题，A被冒名顶替了</p>\n<h2 id=\"四、区块结构\"><a href=\"#四、区块结构\" class=\"headerlink\" title=\"四、区块结构\"></a>四、区块结构</h2><h3 id=\"1、Block-header\"><a href=\"#1、Block-header\" class=\"headerlink\" title=\"1、Block header\"></a>1、Block header</h3><p>包含区块的宏信息，比如：version（协议版本）、hash of privious block header（前一区块头的哈希）、merkle root hash（Merkle树 根哈希），还有和挖矿相关的 target（挖矿的难度目标域值）、nonce（随机数）</p>\n<p>Note：</p>\n<p>（1）hash of privious block header 取的只是前一区块头的哈希，不包含块体</p>\n<p>（2）Merkle树 根哈希 保证了块体中的交易列表不会被篡改</p>\n<p>（3）target 满足 H(block header)≤target，块头中存的是该目标域值的编码 nBits（nBits 是用于表示难度的参数，用于判断区块头是否有效）</p>\n<h4 id=\"nBits\"><a href=\"#nBits\" class=\"headerlink\" title=\"nBits\"></a>nBits</h4><p>nBits 是一个包含了目标值信息的编码，通常以十六进制形式存储并表示为一个 4 字节（32 位）的数<br>该编码包含两个部分：</p>\n<ul>\n<li>难度指数（Exponent）：前 1 个字节（8 位）</li>\n<li>目标哈希的有效值（Coefficient）：后 3 个字节（24 位）<br>目标值越小，挖掘新区块的难度就越大。这允许系统灵活地调整挖矿的难度，并以压缩的方式存储信息</li>\n</ul>\n<h3 id=\"2、Block-body\"><a href=\"#2、Block-body\" class=\"headerlink\" title=\"2、Block body\"></a>2、Block body</h3><p>包含 transaction list（交易列表）</p>\n<h2 id=\"五、Distributed-consensus（分布式共识）\"><a href=\"#五、Distributed-consensus（分布式共识）\" class=\"headerlink\" title=\"五、Distributed consensus（分布式共识）\"></a>五、Distributed consensus（分布式共识）</h2><p>账本的内容要取得分布式的共识</p>\n<h3 id=\"1、共识的例子：Distributed-hash-table（分布式哈希表）\"><a href=\"#1、共识的例子：Distributed-hash-table（分布式哈希表）\" class=\"headerlink\" title=\"1、共识的例子：Distributed hash table（分布式哈希表）\"></a>1、共识的例子：Distributed hash table（分布式哈希表）</h3><p>达成共识的是 key-value pairs（键值对）</p>\n<h3 id=\"2、Impossibility-result（不可能结论）\"><a href=\"#2、Impossibility-result（不可能结论）\" class=\"headerlink\" title=\"2、Impossibility result（不可能结论）\"></a>2、Impossibility result（不可能结论）</h3><p>Example：FLP impossibility result<br>在 asynchronous system（异步系统）中，即使只有一个成员是 faulty（有故障的），那么也无法取得共识</p>\n<p>CAP Theorem</p>\n<p>（1）Consistency（一致性）</p>\n<p>（2）Availability（可用性）：即使某些节点不可用，系统仍然能够提供服务</p>\n<p>（3）Partition tolerance（分区容忍性）：分区是指在网络中，若干节点之间的通信链路发生故障时形成的网络割裂，这意味着某些节点无法与其他节点进行交互</p>\n<p>不可能三角：任何一个分布式系统，只能满足以上两个性质，不可能三个性质都满足</p>\n<h3 id=\"3、分布式共识的著名协议：Paxos\"><a href=\"#3、分布式共识的著名协议：Paxos\" class=\"headerlink\" title=\"3、分布式共识的著名协议：Paxos\"></a>3、分布式共识的著名协议：Paxos</h3><p>该协议能保证一致性，但是有可能一直达不成共识（可能性比较小）</p>\n<h2 id=\"六、Consensus-in-BitCoin（比特币中的共识）\"><a href=\"#六、Consensus-in-BitCoin（比特币中的共识）\" class=\"headerlink\" title=\"六、Consensus in BitCoin（比特币中的共识）\"></a>六、Consensus in BitCoin（比特币中的共识）</h2><h3 id=\"1、基于投票的共识方案\"><a href=\"#1、基于投票的共识方案\" class=\"headerlink\" title=\"1、基于投票的共识方案\"></a>1、基于投票的共识方案</h3><p>基于投票的方案需要确认投票权的 membership，比如联盟链的协议 hyperledger fabric（超分类账结构）。常规的投票方案会带来 sybil attack（女巫攻击），即通过超级计算机生成超半数的比特币账户以获取控制权</p>\n<h3 id=\"2、验证过程\"><a href=\"#2、验证过程\" class=\"headerlink\" title=\"2、验证过程\"></a>2、验证过程</h3><p>H(block header) ≤ target，block header 中包含 4 bytes 的随机数 nonce，组装好区块后就开始尝试不同的 nonce，直到哈希值落在 target 内。如果某节点找到了符合要求的 nonce，即具备了记账权（在去中心化账本中写入&#x2F;发布下一个区块的权利），发布后即由其他区块进行验证：</p>\n<p>1、验证 block header 中的几项</p>\n<p>2、看 block body 中的交易列表，验证每个交易都是合法的：（1）要有合法的签名；（2）以前没有被交易过</p>\n<h3 id=\"3、Forking-attack（分叉攻击）\"><a href=\"#3、Forking-attack（分叉攻击）\" class=\"headerlink\" title=\"3、Forking attack（分叉攻击）\"></a>3、Forking attack（分叉攻击）</h3><p>但是不同的链上可能发生重复交易（forking attack），解决方案是以 longest valid chain（最长合法链）为准，因此只有扩展最长合法链的区块才是合法的</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/33/2.png\"\n                      alt=\"图2\"\n                ></p>\n<p>当两个矿工同时创造新区块时，其他节点按照接收时间来选择接受哪个区块，等长的临时性的分叉会维持一段时间，直到其中一条链胜出（先找到下一个区块）；而另一条链就变成了 orphan block（孤儿区块），被丢弃掉，也就没有出块奖励</p>\n<h3 id=\"4、Block-reward（区-出块奖励）\"><a href=\"#4、Block-reward（区-出块奖励）\" class=\"headerlink\" title=\"4、Block reward（区&#x2F;出块奖励）\"></a>4、Block reward（区&#x2F;出块奖励）</h3><p>获得记账权的节点，在发布的区块里可以进行 coinbase transaction（铸币交易），发布一定数量的比特币</p>\n<p>一开始，每个发布的区块可以产生 50 BTC；21万个区块以后，出块奖励会减半为 25 BTC；再过21万个区块，会变成 12.5 BTC（现在）</p>\n<p>平均出块时间为10分钟，出块奖励减半的时间：21w * 10min &#x2F; (60min * 24h * 365d) ≈ 4年</p>\n<h3 id=\"5、基于-hash-rate-的共识方案\"><a href=\"#5、基于-hash-rate-的共识方案\" class=\"headerlink\" title=\"5、基于 hash rate 的共识方案\"></a>5、基于 hash rate 的共识方案</h3><p>Hash rate（计算 nonce 哈希的速度）决定了投票的权重，hash rate 越高，获得记账权并得到出块奖励的概率越大</p>\n<p>避免 sybil attack（女巫攻击）：创建多个账户不会增加 hash rate，也不会增加投票权重</p>\n<h2 id=\"七、类比\"><a href=\"#七、类比\" class=\"headerlink\" title=\"七、类比\"></a>七、类比</h2><p>挖矿：mining</p>\n<p>比特币：digital gold</p>\n<p>矿工（争夺记账权的节点）：minner</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、Double-spending-attack（双花攻击）\"><a href=\"#一、Double-spending-attack（双花攻击）\" class=\"headerlink\" title=\"一、Double spending attack（双花攻击）\"></a>一、Double spending attack（双花攻击）</h2><p>双花攻击指同一笔资金被重复支付的情况，也是数字货币面临的主要挑战</p>\n<p>中心化解决方案：数字货币上添加唯一编号，并由央行维护一个数据结构，展示每个编号的货币由谁持有；如果付费方的货币在表中对应的持有人与此人不符，则证明该货币已支付给其他人</p>\n<p>去中心化的解决方案：比特币</p>\n<p>关注：货币的发行（挖矿）、交易的有效性验证（防范双花攻击）</p>\n<h2 id=\"二、交易的有效性验证\"><a href=\"#二、交易的有效性验证\" class=\"headerlink\" title=\"二、交易的有效性验证\"></a>二、交易的有效性验证</h2><p>通过一个由所有用户共同维护的数据结构——区块链 来实现</p>\n<h2 id=\"三、区块链简易结构\"><a href=\"#三、区块链简易结构\" class=\"headerlink\" title=\"三、区块链简易结构\"></a>三、区块链简易结构</h2><p>Note：以下为简易版的区块链，每个区块都只有一个交易，实际上每个区块的交易记录都构成一个 Merkle tree</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/33/1.png\"\n                      alt=\"图1\"\n                ></p>\n<p>存在两种哈希指针：将区块串联成链表的指针，和指向前面某个交易的指针（为了说明币的来源，避免凭空捏造和重复交易）</p>\n<p>1、用户A 具有发行货币的权利（铸币权，mint 铸币），并发行了10个比特币（coin base transaction，铸币交易）</p>\n<p>2、用户A 分别给 用户B、用户C 5个比特币</p>\n<p>3、用户B 分别给 用户C 2个比特币、用户D 3个比特币</p>\n<p>4、用户C 转给 用户E 7个比特币</p>\n<p>5、假设用户B 继续给 用户F 5个比特币，通过区块的回溯，校验出其已经在先前的交易中支付过了，所以交易不合法（避免双花攻击）</p>\n<p>在 用户A 向 用户B 的交易中，需要记录 「输入」A的公钥、A的签名 和 「输出」B的地址（通过B的公钥取哈希等操作得到，可类比为银行卡账号）<br>A 需要 B的公钥 知道向哪里转账，所有节点都 需要 A的公钥 来验签</p>\n<h4 id=\"BitCoin-Scripts\"><a href=\"#BitCoin-Scripts\" class=\"headerlink\" title=\"BitCoin Scripts\"></a>BitCoin Scripts</h4><p>交易中的A的公钥（该交易的输入脚本），需要与 币的来源的A的公钥的哈希（前一交易的输出脚本） 相符（两脚本拼在一起能顺利执行）；否则说明币的来源有问题，A被冒名顶替了</p>\n<h2 id=\"四、区块结构\"><a href=\"#四、区块结构\" class=\"headerlink\" title=\"四、区块结构\"></a>四、区块结构</h2><h3 id=\"1、Block-header\"><a href=\"#1、Block-header\" class=\"headerlink\" title=\"1、Block header\"></a>1、Block header</h3><p>包含区块的宏信息，比如：version（协议版本）、hash of privious block header（前一区块头的哈希）、merkle root hash（Merkle树 根哈希），还有和挖矿相关的 target（挖矿的难度目标域值）、nonce（随机数）</p>\n<p>Note：</p>\n<p>（1）hash of privious block header 取的只是前一区块头的哈希，不包含块体</p>\n<p>（2）Merkle树 根哈希 保证了块体中的交易列表不会被篡改</p>\n<p>（3）target 满足 H(block header)≤target，块头中存的是该目标域值的编码 nBits（nBits 是用于表示难度的参数，用于判断区块头是否有效）</p>\n<h4 id=\"nBits\"><a href=\"#nBits\" class=\"headerlink\" title=\"nBits\"></a>nBits</h4><p>nBits 是一个包含了目标值信息的编码，通常以十六进制形式存储并表示为一个 4 字节（32 位）的数<br>该编码包含两个部分：</p>\n<ul>\n<li>难度指数（Exponent）：前 1 个字节（8 位）</li>\n<li>目标哈希的有效值（Coefficient）：后 3 个字节（24 位）<br>目标值越小，挖掘新区块的难度就越大。这允许系统灵活地调整挖矿的难度，并以压缩的方式存储信息</li>\n</ul>\n<h3 id=\"2、Block-body\"><a href=\"#2、Block-body\" class=\"headerlink\" title=\"2、Block body\"></a>2、Block body</h3><p>包含 transaction list（交易列表）</p>\n<h2 id=\"五、Distributed-consensus（分布式共识）\"><a href=\"#五、Distributed-consensus（分布式共识）\" class=\"headerlink\" title=\"五、Distributed consensus（分布式共识）\"></a>五、Distributed consensus（分布式共识）</h2><p>账本的内容要取得分布式的共识</p>\n<h3 id=\"1、共识的例子：Distributed-hash-table（分布式哈希表）\"><a href=\"#1、共识的例子：Distributed-hash-table（分布式哈希表）\" class=\"headerlink\" title=\"1、共识的例子：Distributed hash table（分布式哈希表）\"></a>1、共识的例子：Distributed hash table（分布式哈希表）</h3><p>达成共识的是 key-value pairs（键值对）</p>\n<h3 id=\"2、Impossibility-result（不可能结论）\"><a href=\"#2、Impossibility-result（不可能结论）\" class=\"headerlink\" title=\"2、Impossibility result（不可能结论）\"></a>2、Impossibility result（不可能结论）</h3><p>Example：FLP impossibility result<br>在 asynchronous system（异步系统）中，即使只有一个成员是 faulty（有故障的），那么也无法取得共识</p>\n<p>CAP Theorem</p>\n<p>（1）Consistency（一致性）</p>\n<p>（2）Availability（可用性）：即使某些节点不可用，系统仍然能够提供服务</p>\n<p>（3）Partition tolerance（分区容忍性）：分区是指在网络中，若干节点之间的通信链路发生故障时形成的网络割裂，这意味着某些节点无法与其他节点进行交互</p>\n<p>不可能三角：任何一个分布式系统，只能满足以上两个性质，不可能三个性质都满足</p>\n<h3 id=\"3、分布式共识的著名协议：Paxos\"><a href=\"#3、分布式共识的著名协议：Paxos\" class=\"headerlink\" title=\"3、分布式共识的著名协议：Paxos\"></a>3、分布式共识的著名协议：Paxos</h3><p>该协议能保证一致性，但是有可能一直达不成共识（可能性比较小）</p>\n<h2 id=\"六、Consensus-in-BitCoin（比特币中的共识）\"><a href=\"#六、Consensus-in-BitCoin（比特币中的共识）\" class=\"headerlink\" title=\"六、Consensus in BitCoin（比特币中的共识）\"></a>六、Consensus in BitCoin（比特币中的共识）</h2><h3 id=\"1、基于投票的共识方案\"><a href=\"#1、基于投票的共识方案\" class=\"headerlink\" title=\"1、基于投票的共识方案\"></a>1、基于投票的共识方案</h3><p>基于投票的方案需要确认投票权的 membership，比如联盟链的协议 hyperledger fabric（超分类账结构）。常规的投票方案会带来 sybil attack（女巫攻击），即通过超级计算机生成超半数的比特币账户以获取控制权</p>\n<h3 id=\"2、验证过程\"><a href=\"#2、验证过程\" class=\"headerlink\" title=\"2、验证过程\"></a>2、验证过程</h3><p>H(block header) ≤ target，block header 中包含 4 bytes 的随机数 nonce，组装好区块后就开始尝试不同的 nonce，直到哈希值落在 target 内。如果某节点找到了符合要求的 nonce，即具备了记账权（在去中心化账本中写入&#x2F;发布下一个区块的权利），发布后即由其他区块进行验证：</p>\n<p>1、验证 block header 中的几项</p>\n<p>2、看 block body 中的交易列表，验证每个交易都是合法的：（1）要有合法的签名；（2）以前没有被交易过</p>\n<h3 id=\"3、Forking-attack（分叉攻击）\"><a href=\"#3、Forking-attack（分叉攻击）\" class=\"headerlink\" title=\"3、Forking attack（分叉攻击）\"></a>3、Forking attack（分叉攻击）</h3><p>但是不同的链上可能发生重复交易（forking attack），解决方案是以 longest valid chain（最长合法链）为准，因此只有扩展最长合法链的区块才是合法的</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/33/2.png\"\n                      alt=\"图2\"\n                ></p>\n<p>当两个矿工同时创造新区块时，其他节点按照接收时间来选择接受哪个区块，等长的临时性的分叉会维持一段时间，直到其中一条链胜出（先找到下一个区块）；而另一条链就变成了 orphan block（孤儿区块），被丢弃掉，也就没有出块奖励</p>\n<h3 id=\"4、Block-reward（区-出块奖励）\"><a href=\"#4、Block-reward（区-出块奖励）\" class=\"headerlink\" title=\"4、Block reward（区&#x2F;出块奖励）\"></a>4、Block reward（区&#x2F;出块奖励）</h3><p>获得记账权的节点，在发布的区块里可以进行 coinbase transaction（铸币交易），发布一定数量的比特币</p>\n<p>一开始，每个发布的区块可以产生 50 BTC；21万个区块以后，出块奖励会减半为 25 BTC；再过21万个区块，会变成 12.5 BTC（现在）</p>\n<p>平均出块时间为10分钟，出块奖励减半的时间：21w * 10min &#x2F; (60min * 24h * 365d) ≈ 4年</p>\n<h3 id=\"5、基于-hash-rate-的共识方案\"><a href=\"#5、基于-hash-rate-的共识方案\" class=\"headerlink\" title=\"5、基于 hash rate 的共识方案\"></a>5、基于 hash rate 的共识方案</h3><p>Hash rate（计算 nonce 哈希的速度）决定了投票的权重，hash rate 越高，获得记账权并得到出块奖励的概率越大</p>\n<p>避免 sybil attack（女巫攻击）：创建多个账户不会增加 hash rate，也不会增加投票权重</p>\n<h2 id=\"七、类比\"><a href=\"#七、类比\" class=\"headerlink\" title=\"七、类比\"></a>七、类比</h2><p>挖矿：mining</p>\n<p>比特币：digital gold</p>\n<p>矿工（争夺记账权的节点）：minner</p>\n"},{"title":"北大-区块链技术与应用3-数据结构","date":"2025-01-02T05:57:32.000Z","_content":"\n## 一、Hash Pointers（哈希指针）\n\n哈希指针除了地址之外，还要保存地址的哈希值，用于检测结构体的内容是否被篡改\n\nBlock chain is a linked list using hash pointers.\n\n![图1](../images/32/1.png)\n\n区块链中的第一个区块叫 genesis block（创世区块），其 height（高度）为 0；最后一个区块叫 most recent block\n\n后一个区块中的哈希指针是对前一区块的整体取哈希（包含前一区块中储存的哈希指针），可以实现 tamper-evident log（篡改证明记录）\n\n修改一个区块，会导致其后所有区块的哈希发生改变。所以只需保存和比对最后一个哈希值，就能检测出对区块链中任何部位的修改\n\n## 二、Merkle Tree（默克尔树）\n\nMerkle tree 和 Binary tree 对比，就是把普通指针换成哈希指针\n\n![图2](../images/32/2.png)\n\n只要记录并比对 root hash（根哈希值），就能检测出整个树中任何部位的修改\n\n### 区块结构\n\n每个区块包含 block header（块头） 和 block body（块身）\n\n1、块头：包含 该区块的所有交易组成的 Merkle tree 的根哈希值，但没有具体的交易内容\n2、块体：包含具体的交易列表\n\n### 比特币节点\n\n比特币中的节点分为：\n\n- full node, or fully validationg node（全节点）\n- light node, or light-weight node（轻节点）\n\n1、全节点：保存整个区块的内容，包括块头和块体（包含 tansaction list，即交易的具体信息）；会验证每一笔交易\n\n2、轻节点：比如手机上的比特币钱包的APP，只保存块头；无法独立验证交易的合法性\n\n![图3](../images/32/3.png)\n\nMerkle proof 指从交易发生到根哈希值的路径，可以向轻节点证明某笔交易写入了区块链，流程如下：\n\n（1）轻节点向全节点请求图3中红色的哈希值\n\n（2）然后根据交易和红色的哈希值，自底向上算出绿色的哈希值，直至算出根哈希值\n\n（3）最后将算出的根哈希值，与轻节点块头中的哈希指针比较，一致则证明该交易发生在此区块\n\n上述方法也叫做 proof of membership 或 proof of inclusion\n假设最底层的交易数为n，验证交易存在的时间复杂度为：θ(log(n))\n\n对于无序的 Merkle tree，proof of non-membership（验证交易不存在）的时间复杂度为线性 θ(n)，即一个一个试\n对于 Sorted Merkle tree（对交易取哈希，并且按哈希值大小排序），上述验证的时间复杂度为 θ(log(n))，与二分法一致：只需要对其大小相邻的两个交易进行哈希值的校验，如果和根哈希一致，则证明该交易不存在\n\n由于区块链中不需要做不存在证明，所以比特币中的 Merkle tree 不要求排序\n\n除了区块链 和 Merkle tree，哈希指针还可以用在其他无环的链表中\n","source":"_posts/32-北大区块链-数据结构.md","raw":"---\ntitle: 北大-区块链技术与应用3-数据结构\ndate: 2025-01-02 13:57:32\ntags:\n    - web3\n    - 数据结构\ncategories:\n    - Web3\n      - 北大肖臻-区块链技术与应用\n---\n\n## 一、Hash Pointers（哈希指针）\n\n哈希指针除了地址之外，还要保存地址的哈希值，用于检测结构体的内容是否被篡改\n\nBlock chain is a linked list using hash pointers.\n\n![图1](../images/32/1.png)\n\n区块链中的第一个区块叫 genesis block（创世区块），其 height（高度）为 0；最后一个区块叫 most recent block\n\n后一个区块中的哈希指针是对前一区块的整体取哈希（包含前一区块中储存的哈希指针），可以实现 tamper-evident log（篡改证明记录）\n\n修改一个区块，会导致其后所有区块的哈希发生改变。所以只需保存和比对最后一个哈希值，就能检测出对区块链中任何部位的修改\n\n## 二、Merkle Tree（默克尔树）\n\nMerkle tree 和 Binary tree 对比，就是把普通指针换成哈希指针\n\n![图2](../images/32/2.png)\n\n只要记录并比对 root hash（根哈希值），就能检测出整个树中任何部位的修改\n\n### 区块结构\n\n每个区块包含 block header（块头） 和 block body（块身）\n\n1、块头：包含 该区块的所有交易组成的 Merkle tree 的根哈希值，但没有具体的交易内容\n2、块体：包含具体的交易列表\n\n### 比特币节点\n\n比特币中的节点分为：\n\n- full node, or fully validationg node（全节点）\n- light node, or light-weight node（轻节点）\n\n1、全节点：保存整个区块的内容，包括块头和块体（包含 tansaction list，即交易的具体信息）；会验证每一笔交易\n\n2、轻节点：比如手机上的比特币钱包的APP，只保存块头；无法独立验证交易的合法性\n\n![图3](../images/32/3.png)\n\nMerkle proof 指从交易发生到根哈希值的路径，可以向轻节点证明某笔交易写入了区块链，流程如下：\n\n（1）轻节点向全节点请求图3中红色的哈希值\n\n（2）然后根据交易和红色的哈希值，自底向上算出绿色的哈希值，直至算出根哈希值\n\n（3）最后将算出的根哈希值，与轻节点块头中的哈希指针比较，一致则证明该交易发生在此区块\n\n上述方法也叫做 proof of membership 或 proof of inclusion\n假设最底层的交易数为n，验证交易存在的时间复杂度为：θ(log(n))\n\n对于无序的 Merkle tree，proof of non-membership（验证交易不存在）的时间复杂度为线性 θ(n)，即一个一个试\n对于 Sorted Merkle tree（对交易取哈希，并且按哈希值大小排序），上述验证的时间复杂度为 θ(log(n))，与二分法一致：只需要对其大小相邻的两个交易进行哈希值的校验，如果和根哈希一致，则证明该交易不存在\n\n由于区块链中不需要做不存在证明，所以比特币中的 Merkle tree 不要求排序\n\n除了区块链 和 Merkle tree，哈希指针还可以用在其他无环的链表中\n","slug":"32-北大区块链-数据结构","published":1,"updated":"2025-01-15T07:19:39.776Z","_id":"cm5firt1p0004zww6djlfdi26","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、Hash-Pointers（哈希指针）\"><a href=\"#一、Hash-Pointers（哈希指针）\" class=\"headerlink\" title=\"一、Hash Pointers（哈希指针）\"></a>一、Hash Pointers（哈希指针）</h2><p>哈希指针除了地址之外，还要保存地址的哈希值，用于检测结构体的内容是否被篡改</p>\n<p>Block chain is a linked list using hash pointers.</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/32/1.png\"\n                      alt=\"图1\"\n                ></p>\n<p>区块链中的第一个区块叫 genesis block（创世区块），其 height（高度）为 0；最后一个区块叫 most recent block</p>\n<p>后一个区块中的哈希指针是对前一区块的整体取哈希（包含前一区块中储存的哈希指针），可以实现 tamper-evident log（篡改证明记录）</p>\n<p>修改一个区块，会导致其后所有区块的哈希发生改变。所以只需保存和比对最后一个哈希值，就能检测出对区块链中任何部位的修改</p>\n<h2 id=\"二、Merkle-Tree（默克尔树）\"><a href=\"#二、Merkle-Tree（默克尔树）\" class=\"headerlink\" title=\"二、Merkle Tree（默克尔树）\"></a>二、Merkle Tree（默克尔树）</h2><p>Merkle tree 和 Binary tree 对比，就是把普通指针换成哈希指针</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/32/2.png\"\n                      alt=\"图2\"\n                ></p>\n<p>只要记录并比对 root hash（根哈希值），就能检测出整个树中任何部位的修改</p>\n<h3 id=\"区块结构\"><a href=\"#区块结构\" class=\"headerlink\" title=\"区块结构\"></a>区块结构</h3><p>每个区块包含 block header（块头） 和 block body（块身）</p>\n<p>1、块头：包含 该区块的所有交易组成的 Merkle tree 的根哈希值，但没有具体的交易内容<br>2、块体：包含具体的交易列表</p>\n<h3 id=\"比特币节点\"><a href=\"#比特币节点\" class=\"headerlink\" title=\"比特币节点\"></a>比特币节点</h3><p>比特币中的节点分为：</p>\n<ul>\n<li>full node, or fully validationg node（全节点）</li>\n<li>light node, or light-weight node（轻节点）</li>\n</ul>\n<p>1、全节点：保存整个区块的内容，包括块头和块体（包含 tansaction list，即交易的具体信息）；会验证每一笔交易</p>\n<p>2、轻节点：比如手机上的比特币钱包的APP，只保存块头；无法独立验证交易的合法性</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/32/3.png\"\n                      alt=\"图3\"\n                ></p>\n<p>Merkle proof 指从交易发生到根哈希值的路径，可以向轻节点证明某笔交易写入了区块链，流程如下：</p>\n<p>（1）轻节点向全节点请求图3中红色的哈希值</p>\n<p>（2）然后根据交易和红色的哈希值，自底向上算出绿色的哈希值，直至算出根哈希值</p>\n<p>（3）最后将算出的根哈希值，与轻节点块头中的哈希指针比较，一致则证明该交易发生在此区块</p>\n<p>上述方法也叫做 proof of membership 或 proof of inclusion<br>假设最底层的交易数为n，验证交易存在的时间复杂度为：θ(log(n))</p>\n<p>对于无序的 Merkle tree，proof of non-membership（验证交易不存在）的时间复杂度为线性 θ(n)，即一个一个试<br>对于 Sorted Merkle tree（对交易取哈希，并且按哈希值大小排序），上述验证的时间复杂度为 θ(log(n))，与二分法一致：只需要对其大小相邻的两个交易进行哈希值的校验，如果和根哈希一致，则证明该交易不存在</p>\n<p>由于区块链中不需要做不存在证明，所以比特币中的 Merkle tree 不要求排序</p>\n<p>除了区块链 和 Merkle tree，哈希指针还可以用在其他无环的链表中</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、Hash-Pointers（哈希指针）\"><a href=\"#一、Hash-Pointers（哈希指针）\" class=\"headerlink\" title=\"一、Hash Pointers（哈希指针）\"></a>一、Hash Pointers（哈希指针）</h2><p>哈希指针除了地址之外，还要保存地址的哈希值，用于检测结构体的内容是否被篡改</p>\n<p>Block chain is a linked list using hash pointers.</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/32/1.png\"\n                      alt=\"图1\"\n                ></p>\n<p>区块链中的第一个区块叫 genesis block（创世区块），其 height（高度）为 0；最后一个区块叫 most recent block</p>\n<p>后一个区块中的哈希指针是对前一区块的整体取哈希（包含前一区块中储存的哈希指针），可以实现 tamper-evident log（篡改证明记录）</p>\n<p>修改一个区块，会导致其后所有区块的哈希发生改变。所以只需保存和比对最后一个哈希值，就能检测出对区块链中任何部位的修改</p>\n<h2 id=\"二、Merkle-Tree（默克尔树）\"><a href=\"#二、Merkle-Tree（默克尔树）\" class=\"headerlink\" title=\"二、Merkle Tree（默克尔树）\"></a>二、Merkle Tree（默克尔树）</h2><p>Merkle tree 和 Binary tree 对比，就是把普通指针换成哈希指针</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/32/2.png\"\n                      alt=\"图2\"\n                ></p>\n<p>只要记录并比对 root hash（根哈希值），就能检测出整个树中任何部位的修改</p>\n<h3 id=\"区块结构\"><a href=\"#区块结构\" class=\"headerlink\" title=\"区块结构\"></a>区块结构</h3><p>每个区块包含 block header（块头） 和 block body（块身）</p>\n<p>1、块头：包含 该区块的所有交易组成的 Merkle tree 的根哈希值，但没有具体的交易内容<br>2、块体：包含具体的交易列表</p>\n<h3 id=\"比特币节点\"><a href=\"#比特币节点\" class=\"headerlink\" title=\"比特币节点\"></a>比特币节点</h3><p>比特币中的节点分为：</p>\n<ul>\n<li>full node, or fully validationg node（全节点）</li>\n<li>light node, or light-weight node（轻节点）</li>\n</ul>\n<p>1、全节点：保存整个区块的内容，包括块头和块体（包含 tansaction list，即交易的具体信息）；会验证每一笔交易</p>\n<p>2、轻节点：比如手机上的比特币钱包的APP，只保存块头；无法独立验证交易的合法性</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/32/3.png\"\n                      alt=\"图3\"\n                ></p>\n<p>Merkle proof 指从交易发生到根哈希值的路径，可以向轻节点证明某笔交易写入了区块链，流程如下：</p>\n<p>（1）轻节点向全节点请求图3中红色的哈希值</p>\n<p>（2）然后根据交易和红色的哈希值，自底向上算出绿色的哈希值，直至算出根哈希值</p>\n<p>（3）最后将算出的根哈希值，与轻节点块头中的哈希指针比较，一致则证明该交易发生在此区块</p>\n<p>上述方法也叫做 proof of membership 或 proof of inclusion<br>假设最底层的交易数为n，验证交易存在的时间复杂度为：θ(log(n))</p>\n<p>对于无序的 Merkle tree，proof of non-membership（验证交易不存在）的时间复杂度为线性 θ(n)，即一个一个试<br>对于 Sorted Merkle tree（对交易取哈希，并且按哈希值大小排序），上述验证的时间复杂度为 θ(log(n))，与二分法一致：只需要对其大小相邻的两个交易进行哈希值的校验，如果和根哈希一致，则证明该交易不存在</p>\n<p>由于区块链中不需要做不存在证明，所以比特币中的 Merkle tree 不要求排序</p>\n<p>除了区块链 和 Merkle tree，哈希指针还可以用在其他无环的链表中</p>\n"},{"title":"北大-区块链技术与应用5-BTC系统的实现","date":"2025-01-12T15:07:42.000Z","_content":"\n比特币采用 transaction-based ledger（基于交易的账本）模式，每个区块中记录交易信息（转账交易、铸币交易），系统上不记录交易信息\n\n## 一、UTXO\n\n比特币的全节点要维护一个数据结构 UTXO（Unspent Transaction Output，所有未被花出去的交易的输出 组成的集合）\n\n一个交易可能有多个输出，即用户可以在一次交易中同时向多人转账（可以节省手续费）\n\n比如：A 给 B 交易 5 BTC，B 将其交易出去；A 给 C 交易 3 BTC，但未交易出去。这是两个输出，但是只有 A 给 C 的交易在 UTXO 中\n\n![图1](../images/34/1.png)\n\nUTXO 中的每个元素要给出产生这个输出的交易的哈希值（可理解为交易的ID），以及它在这个交易里是第几个输出，这两个信息可以定位一个 UTXO 中的输出\n\n### UTXO 的用途：\n\n在交易发生前，检查即将花出去的币是否在 UTXO 中，在才是合法的，快速校验双花攻击和凭空捏造\n\n每笔交易会消耗掉 UTXO 中的一些输出，同时在 UTXO 中产生新的输出，total inputs = total outputs（所有输入的金额 等于 所有输出的金额）\n\n```\ntotal inputs ≈ total outputs\n    1 BTC         0.99 BTC\n```\n\n### Transaction fee（交易费）：\n\n发布区块的节点（矿工）之所以会把他人的交易打包到新区块里，是因为 BTC 系统的第二个激励机制——交易费。通过把他人的交易打包到区块里，矿工会收取一些交易费（费用高的交易优先级就更高）\n\n目前矿工挖矿、争夺记账权，主要目的还是为了获取出块奖励，但是随着出块奖励的减少；多年后，交易费可能会变成矿工的主要收益\n\n## 二、Account-based ledger（基于账户的账本）\n\n和比特币 transaction-based ledger（基于交易的账本）模式不同，以太坊采用 account-based ledger（基于账户的账本）模式，在这种模式中，系统需要显式地记录每个账户有多少币，查询更方便（不需要说明币的来源），但是隐私保护性不如比特币\n\n## 三、Block Example\n\nBlock header 的详细字段：https://developer.bitcoin.org/reference/block_chain.html\n\n其中，nonce 和 merkle root hash 是可以改变的，通过改变 coinbase message 来改变 merkle root hash（coinbase message 可以看做 extra nonce）\n\n![图3](../images/34/2.png)\n\n在比特币的 POW（Power of work，工作量证明机制）中，矿工需要不断尝试不同的 nonce 和 coinbase message 组合，以找到一个满足目标哈希值的区块头，共有两层循环：\n\n外层循环调整 coinbase 域 的 extra nonce，算出 block header 里的根哈希值之后，内层循环再调整 header 里的 nonce\n\n![图3](../images/34/3.png)\n\n在比特币系统中，验证交易的合法性，就是通过将交易的 input scripts 和 output scripts 配对后执行来完成的。注意：不是把同一个交易的输入脚本和输入脚本配对，而是把这个交易里的输入脚本 和 前一个提供币来源的交易里的输出脚本配对。如果拼接在一起可以顺利执行，那么该交易就是合法的\n\n## 四、挖矿概率分析\n\nBernoulli trial（伯努利试验）：A random experiment with binary outcome，比如：掷硬币\n\nBernoulli process（伯努利过程）：A sequence of independent Bernoulli trials\n\nPorsson process（泊松过程）：试验次数很多，成功概率很小\n\n伯努利过程的性质之一是 memoryless（无记忆性）/ progress free（与过程无关）：前面的实验结果对后面的实验结果无影响。由于挖矿的成功概率很小，所以可以用泊松过程近似\n\n出块时间服从 Exponential distribution（指数分布），纵轴是 probability density（概率密度），横轴是 time to next block（出块时间）。注意这是整个系统的出块时间，不是每个具体矿工的出块时间，具体到每一个矿工，出块时间取决于矿工的算力占系统总算力的百分比\n\n![图3](../images/34/4.png)\n\n如果不满足 progress free 这个性质，那么算力强的矿工会获得不成比例的优势，比如：A算力是B算力的10倍，但是A获得记账权的概率超过B的10倍。该性质正是挖矿公平性的保证\n\n## 五、比特币的总量\n\n产生的比特币数量构成一个 geometric series（几何序列）：21w * 50 + 21w * 25 + 21w* 12.5 + ... = 21w * 50 * (1 + 1/2 + 1/4 + ...) = 2100w\n\n挖矿的过程对于维护比特币系统的安全性是至关重要的：Bitcoin is secured by mining，对于一个去中心化的系统，挖矿提供了一个凭借算力投票的有效手段，只要大部分算力掌握在诚实的节点手里，系统的安全性就能得到保证\n\n## 六、比特币的安全性\n\n### 1、偷币\n\n偷币是不可能的，因为系统以最长链合法链为准，恶意节点产生的区块会变成孤儿区块被丢弃，并且恶意节点还会损失本应得的出块奖励\n\n### 2、双花攻击\n\n可以通过 forking attack（分叉攻击）实现。区块插入的位置在刚开始挖矿的时候就决定，因为设置的 block header 里需要填写前一个区块的哈希值。\n\n分叉攻击：首先制造等长的合法链，比如，M 向 A 转账交易，产生了不可逆的外部效果（如购买实体商品）；然后再将该交易回滚，留下 M 向自己转账的区块，则 M 可从中不当获利\n\n![图3](../images/34/5.png)\n\n#### 如何防范分叉攻击？\n\n多等几个区块 / confirmation（确认），M 向 A 转账的交易刚写入区块的时候，叫 one confirmation，后面的区块类推。比特币协议中缺省的设置是：等待 6 个 confirmation 之后，才认为前面的交易是不可篡改的（大约1小时）\n\n![图3](../images/34/6.png)\n\n区块链是 Irrevocable ledger（不可篡改的账本），这种不可篡改性只是一种概率上的保证，刚刚写入区块链的内容还是比较容易被改变的，随着后续 confirmation 的增加，被篡改的概率会指数级大幅度下降\n\nZero confirmation：转账交易发布出去了，但是还未被写入区块链中。这种方式在实际应用中比较普遍，因为（1）比特币协议缺省的设置是 节点接收最先听到的那个交易，所以上述例子中 M 转给自己的交易大概率不会被诚实的节点接受；（2）很多购物网站从支付成功到发货天然是有时间间隔的\n\n### 3、恶意节点故意不把合法交易写入\n\n因为总有诚实的节点愿意发布这些交易，所以合法交易总是可以被写到下一个区块里\n\n在正常工作的情况下，也可能出现合法交易未被包含进去的情况，比如近期交易的数目太多。比特币协议中规定，每个区块的大小是有限制的，最多不能超过一兆字节，如果交易的数目太多，可能就只能等到下一个区块再发布\n\n### Selfish mining（自私挖矿）\n\n正常情况下，挖到一个区块就立即发布，防止别人发布后自己的区块作废、丧失出块奖励\n\nSelfish mining：挖到多个区块，但是都藏着不发布，攒够6个之后同时发布。这种攻击的前提是，有恶意的节点需要占据很大一部分算力（比如至少51%）\n\nSelfish mining 的好处：如果个人算力较强，可以减少挖后续区块的竞争\n","source":"_posts/34-北大区块链-BTC系统实现.md","raw":"---\ntitle: 北大-区块链技术与应用5-BTC系统的实现\ndate: 2025-01-12 23:07:42\ntags:\n    - web3\n    - BTC\ncategories:\n    - Web3\n      - 北大肖臻-区块链技术与应用\n---\n\n比特币采用 transaction-based ledger（基于交易的账本）模式，每个区块中记录交易信息（转账交易、铸币交易），系统上不记录交易信息\n\n## 一、UTXO\n\n比特币的全节点要维护一个数据结构 UTXO（Unspent Transaction Output，所有未被花出去的交易的输出 组成的集合）\n\n一个交易可能有多个输出，即用户可以在一次交易中同时向多人转账（可以节省手续费）\n\n比如：A 给 B 交易 5 BTC，B 将其交易出去；A 给 C 交易 3 BTC，但未交易出去。这是两个输出，但是只有 A 给 C 的交易在 UTXO 中\n\n![图1](../images/34/1.png)\n\nUTXO 中的每个元素要给出产生这个输出的交易的哈希值（可理解为交易的ID），以及它在这个交易里是第几个输出，这两个信息可以定位一个 UTXO 中的输出\n\n### UTXO 的用途：\n\n在交易发生前，检查即将花出去的币是否在 UTXO 中，在才是合法的，快速校验双花攻击和凭空捏造\n\n每笔交易会消耗掉 UTXO 中的一些输出，同时在 UTXO 中产生新的输出，total inputs = total outputs（所有输入的金额 等于 所有输出的金额）\n\n```\ntotal inputs ≈ total outputs\n    1 BTC         0.99 BTC\n```\n\n### Transaction fee（交易费）：\n\n发布区块的节点（矿工）之所以会把他人的交易打包到新区块里，是因为 BTC 系统的第二个激励机制——交易费。通过把他人的交易打包到区块里，矿工会收取一些交易费（费用高的交易优先级就更高）\n\n目前矿工挖矿、争夺记账权，主要目的还是为了获取出块奖励，但是随着出块奖励的减少；多年后，交易费可能会变成矿工的主要收益\n\n## 二、Account-based ledger（基于账户的账本）\n\n和比特币 transaction-based ledger（基于交易的账本）模式不同，以太坊采用 account-based ledger（基于账户的账本）模式，在这种模式中，系统需要显式地记录每个账户有多少币，查询更方便（不需要说明币的来源），但是隐私保护性不如比特币\n\n## 三、Block Example\n\nBlock header 的详细字段：https://developer.bitcoin.org/reference/block_chain.html\n\n其中，nonce 和 merkle root hash 是可以改变的，通过改变 coinbase message 来改变 merkle root hash（coinbase message 可以看做 extra nonce）\n\n![图3](../images/34/2.png)\n\n在比特币的 POW（Power of work，工作量证明机制）中，矿工需要不断尝试不同的 nonce 和 coinbase message 组合，以找到一个满足目标哈希值的区块头，共有两层循环：\n\n外层循环调整 coinbase 域 的 extra nonce，算出 block header 里的根哈希值之后，内层循环再调整 header 里的 nonce\n\n![图3](../images/34/3.png)\n\n在比特币系统中，验证交易的合法性，就是通过将交易的 input scripts 和 output scripts 配对后执行来完成的。注意：不是把同一个交易的输入脚本和输入脚本配对，而是把这个交易里的输入脚本 和 前一个提供币来源的交易里的输出脚本配对。如果拼接在一起可以顺利执行，那么该交易就是合法的\n\n## 四、挖矿概率分析\n\nBernoulli trial（伯努利试验）：A random experiment with binary outcome，比如：掷硬币\n\nBernoulli process（伯努利过程）：A sequence of independent Bernoulli trials\n\nPorsson process（泊松过程）：试验次数很多，成功概率很小\n\n伯努利过程的性质之一是 memoryless（无记忆性）/ progress free（与过程无关）：前面的实验结果对后面的实验结果无影响。由于挖矿的成功概率很小，所以可以用泊松过程近似\n\n出块时间服从 Exponential distribution（指数分布），纵轴是 probability density（概率密度），横轴是 time to next block（出块时间）。注意这是整个系统的出块时间，不是每个具体矿工的出块时间，具体到每一个矿工，出块时间取决于矿工的算力占系统总算力的百分比\n\n![图3](../images/34/4.png)\n\n如果不满足 progress free 这个性质，那么算力强的矿工会获得不成比例的优势，比如：A算力是B算力的10倍，但是A获得记账权的概率超过B的10倍。该性质正是挖矿公平性的保证\n\n## 五、比特币的总量\n\n产生的比特币数量构成一个 geometric series（几何序列）：21w * 50 + 21w * 25 + 21w* 12.5 + ... = 21w * 50 * (1 + 1/2 + 1/4 + ...) = 2100w\n\n挖矿的过程对于维护比特币系统的安全性是至关重要的：Bitcoin is secured by mining，对于一个去中心化的系统，挖矿提供了一个凭借算力投票的有效手段，只要大部分算力掌握在诚实的节点手里，系统的安全性就能得到保证\n\n## 六、比特币的安全性\n\n### 1、偷币\n\n偷币是不可能的，因为系统以最长链合法链为准，恶意节点产生的区块会变成孤儿区块被丢弃，并且恶意节点还会损失本应得的出块奖励\n\n### 2、双花攻击\n\n可以通过 forking attack（分叉攻击）实现。区块插入的位置在刚开始挖矿的时候就决定，因为设置的 block header 里需要填写前一个区块的哈希值。\n\n分叉攻击：首先制造等长的合法链，比如，M 向 A 转账交易，产生了不可逆的外部效果（如购买实体商品）；然后再将该交易回滚，留下 M 向自己转账的区块，则 M 可从中不当获利\n\n![图3](../images/34/5.png)\n\n#### 如何防范分叉攻击？\n\n多等几个区块 / confirmation（确认），M 向 A 转账的交易刚写入区块的时候，叫 one confirmation，后面的区块类推。比特币协议中缺省的设置是：等待 6 个 confirmation 之后，才认为前面的交易是不可篡改的（大约1小时）\n\n![图3](../images/34/6.png)\n\n区块链是 Irrevocable ledger（不可篡改的账本），这种不可篡改性只是一种概率上的保证，刚刚写入区块链的内容还是比较容易被改变的，随着后续 confirmation 的增加，被篡改的概率会指数级大幅度下降\n\nZero confirmation：转账交易发布出去了，但是还未被写入区块链中。这种方式在实际应用中比较普遍，因为（1）比特币协议缺省的设置是 节点接收最先听到的那个交易，所以上述例子中 M 转给自己的交易大概率不会被诚实的节点接受；（2）很多购物网站从支付成功到发货天然是有时间间隔的\n\n### 3、恶意节点故意不把合法交易写入\n\n因为总有诚实的节点愿意发布这些交易，所以合法交易总是可以被写到下一个区块里\n\n在正常工作的情况下，也可能出现合法交易未被包含进去的情况，比如近期交易的数目太多。比特币协议中规定，每个区块的大小是有限制的，最多不能超过一兆字节，如果交易的数目太多，可能就只能等到下一个区块再发布\n\n### Selfish mining（自私挖矿）\n\n正常情况下，挖到一个区块就立即发布，防止别人发布后自己的区块作废、丧失出块奖励\n\nSelfish mining：挖到多个区块，但是都藏着不发布，攒够6个之后同时发布。这种攻击的前提是，有恶意的节点需要占据很大一部分算力（比如至少51%）\n\nSelfish mining 的好处：如果个人算力较强，可以减少挖后续区块的竞争\n","slug":"34-北大区块链-BTC系统实现","published":1,"updated":"2025-01-15T07:12:24.777Z","_id":"cm5tr3icr0000gafygo4qgwhh","comments":1,"layout":"post","photos":[],"link":"","content":"<p>比特币采用 transaction-based ledger（基于交易的账本）模式，每个区块中记录交易信息（转账交易、铸币交易），系统上不记录交易信息</p>\n<h2 id=\"一、UTXO\"><a href=\"#一、UTXO\" class=\"headerlink\" title=\"一、UTXO\"></a>一、UTXO</h2><p>比特币的全节点要维护一个数据结构 UTXO（Unspent Transaction Output，所有未被花出去的交易的输出 组成的集合）</p>\n<p>一个交易可能有多个输出，即用户可以在一次交易中同时向多人转账（可以节省手续费）</p>\n<p>比如：A 给 B 交易 5 BTC，B 将其交易出去；A 给 C 交易 3 BTC，但未交易出去。这是两个输出，但是只有 A 给 C 的交易在 UTXO 中</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/34/1.png\"\n                      alt=\"图1\"\n                ></p>\n<p>UTXO 中的每个元素要给出产生这个输出的交易的哈希值（可理解为交易的ID），以及它在这个交易里是第几个输出，这两个信息可以定位一个 UTXO 中的输出</p>\n<h3 id=\"UTXO-的用途：\"><a href=\"#UTXO-的用途：\" class=\"headerlink\" title=\"UTXO 的用途：\"></a>UTXO 的用途：</h3><p>在交易发生前，检查即将花出去的币是否在 UTXO 中，在才是合法的，快速校验双花攻击和凭空捏造</p>\n<p>每笔交易会消耗掉 UTXO 中的一些输出，同时在 UTXO 中产生新的输出，total inputs &#x3D; total outputs（所有输入的金额 等于 所有输出的金额）</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total inputs ≈ total outputs</span><br><span class=\"line\">    1 BTC         0.99 BTC</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"Transaction-fee（交易费）：\"><a href=\"#Transaction-fee（交易费）：\" class=\"headerlink\" title=\"Transaction fee（交易费）：\"></a>Transaction fee（交易费）：</h3><p>发布区块的节点（矿工）之所以会把他人的交易打包到新区块里，是因为 BTC 系统的第二个激励机制——交易费。通过把他人的交易打包到区块里，矿工会收取一些交易费（费用高的交易优先级就更高）</p>\n<p>目前矿工挖矿、争夺记账权，主要目的还是为了获取出块奖励，但是随着出块奖励的减少；多年后，交易费可能会变成矿工的主要收益</p>\n<h2 id=\"二、Account-based-ledger（基于账户的账本）\"><a href=\"#二、Account-based-ledger（基于账户的账本）\" class=\"headerlink\" title=\"二、Account-based ledger（基于账户的账本）\"></a>二、Account-based ledger（基于账户的账本）</h2><p>和比特币 transaction-based ledger（基于交易的账本）模式不同，以太坊采用 account-based ledger（基于账户的账本）模式，在这种模式中，系统需要显式地记录每个账户有多少币，查询更方便（不需要说明币的来源），但是隐私保护性不如比特币</p>\n<h2 id=\"三、Block-Example\"><a href=\"#三、Block-Example\" class=\"headerlink\" title=\"三、Block Example\"></a>三、Block Example</h2><p>Block header 的详细字段：<a class=\"link\"   href=\"https://developer.bitcoin.org/reference/block_chain.html\" >https://developer.bitcoin.org/reference/block_chain.html <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p>其中，nonce 和 merkle root hash 是可以改变的，通过改变 coinbase message 来改变 merkle root hash（coinbase message 可以看做 extra nonce）</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/34/2.png\"\n                      alt=\"图3\"\n                ></p>\n<p>在比特币的 POW（Power of work，工作量证明机制）中，矿工需要不断尝试不同的 nonce 和 coinbase message 组合，以找到一个满足目标哈希值的区块头，共有两层循环：</p>\n<p>外层循环调整 coinbase 域 的 extra nonce，算出 block header 里的根哈希值之后，内层循环再调整 header 里的 nonce</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/34/3.png\"\n                      alt=\"图3\"\n                ></p>\n<p>在比特币系统中，验证交易的合法性，就是通过将交易的 input scripts 和 output scripts 配对后执行来完成的。注意：不是把同一个交易的输入脚本和输入脚本配对，而是把这个交易里的输入脚本 和 前一个提供币来源的交易里的输出脚本配对。如果拼接在一起可以顺利执行，那么该交易就是合法的</p>\n<h2 id=\"四、挖矿概率分析\"><a href=\"#四、挖矿概率分析\" class=\"headerlink\" title=\"四、挖矿概率分析\"></a>四、挖矿概率分析</h2><p>Bernoulli trial（伯努利试验）：A random experiment with binary outcome，比如：掷硬币</p>\n<p>Bernoulli process（伯努利过程）：A sequence of independent Bernoulli trials</p>\n<p>Porsson process（泊松过程）：试验次数很多，成功概率很小</p>\n<p>伯努利过程的性质之一是 memoryless（无记忆性）&#x2F; progress free（与过程无关）：前面的实验结果对后面的实验结果无影响。由于挖矿的成功概率很小，所以可以用泊松过程近似</p>\n<p>出块时间服从 Exponential distribution（指数分布），纵轴是 probability density（概率密度），横轴是 time to next block（出块时间）。注意这是整个系统的出块时间，不是每个具体矿工的出块时间，具体到每一个矿工，出块时间取决于矿工的算力占系统总算力的百分比</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/34/4.png\"\n                      alt=\"图3\"\n                ></p>\n<p>如果不满足 progress free 这个性质，那么算力强的矿工会获得不成比例的优势，比如：A算力是B算力的10倍，但是A获得记账权的概率超过B的10倍。该性质正是挖矿公平性的保证</p>\n<h2 id=\"五、比特币的总量\"><a href=\"#五、比特币的总量\" class=\"headerlink\" title=\"五、比特币的总量\"></a>五、比特币的总量</h2><p>产生的比特币数量构成一个 geometric series（几何序列）：21w * 50 + 21w * 25 + 21w* 12.5 + … &#x3D; 21w * 50 * (1 + 1&#x2F;2 + 1&#x2F;4 + …) &#x3D; 2100w</p>\n<p>挖矿的过程对于维护比特币系统的安全性是至关重要的：Bitcoin is secured by mining，对于一个去中心化的系统，挖矿提供了一个凭借算力投票的有效手段，只要大部分算力掌握在诚实的节点手里，系统的安全性就能得到保证</p>\n<h2 id=\"六、比特币的安全性\"><a href=\"#六、比特币的安全性\" class=\"headerlink\" title=\"六、比特币的安全性\"></a>六、比特币的安全性</h2><h3 id=\"1、偷币\"><a href=\"#1、偷币\" class=\"headerlink\" title=\"1、偷币\"></a>1、偷币</h3><p>偷币是不可能的，因为系统以最长链合法链为准，恶意节点产生的区块会变成孤儿区块被丢弃，并且恶意节点还会损失本应得的出块奖励</p>\n<h3 id=\"2、双花攻击\"><a href=\"#2、双花攻击\" class=\"headerlink\" title=\"2、双花攻击\"></a>2、双花攻击</h3><p>可以通过 forking attack（分叉攻击）实现。区块插入的位置在刚开始挖矿的时候就决定，因为设置的 block header 里需要填写前一个区块的哈希值。</p>\n<p>分叉攻击：首先制造等长的合法链，比如，M 向 A 转账交易，产生了不可逆的外部效果（如购买实体商品）；然后再将该交易回滚，留下 M 向自己转账的区块，则 M 可从中不当获利</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/34/5.png\"\n                      alt=\"图3\"\n                ></p>\n<h4 id=\"如何防范分叉攻击？\"><a href=\"#如何防范分叉攻击？\" class=\"headerlink\" title=\"如何防范分叉攻击？\"></a>如何防范分叉攻击？</h4><p>多等几个区块 &#x2F; confirmation（确认），M 向 A 转账的交易刚写入区块的时候，叫 one confirmation，后面的区块类推。比特币协议中缺省的设置是：等待 6 个 confirmation 之后，才认为前面的交易是不可篡改的（大约1小时）</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/34/6.png\"\n                      alt=\"图3\"\n                ></p>\n<p>区块链是 Irrevocable ledger（不可篡改的账本），这种不可篡改性只是一种概率上的保证，刚刚写入区块链的内容还是比较容易被改变的，随着后续 confirmation 的增加，被篡改的概率会指数级大幅度下降</p>\n<p>Zero confirmation：转账交易发布出去了，但是还未被写入区块链中。这种方式在实际应用中比较普遍，因为（1）比特币协议缺省的设置是 节点接收最先听到的那个交易，所以上述例子中 M 转给自己的交易大概率不会被诚实的节点接受；（2）很多购物网站从支付成功到发货天然是有时间间隔的</p>\n<h3 id=\"3、恶意节点故意不把合法交易写入\"><a href=\"#3、恶意节点故意不把合法交易写入\" class=\"headerlink\" title=\"3、恶意节点故意不把合法交易写入\"></a>3、恶意节点故意不把合法交易写入</h3><p>因为总有诚实的节点愿意发布这些交易，所以合法交易总是可以被写到下一个区块里</p>\n<p>在正常工作的情况下，也可能出现合法交易未被包含进去的情况，比如近期交易的数目太多。比特币协议中规定，每个区块的大小是有限制的，最多不能超过一兆字节，如果交易的数目太多，可能就只能等到下一个区块再发布</p>\n<h3 id=\"Selfish-mining（自私挖矿）\"><a href=\"#Selfish-mining（自私挖矿）\" class=\"headerlink\" title=\"Selfish mining（自私挖矿）\"></a>Selfish mining（自私挖矿）</h3><p>正常情况下，挖到一个区块就立即发布，防止别人发布后自己的区块作废、丧失出块奖励</p>\n<p>Selfish mining：挖到多个区块，但是都藏着不发布，攒够6个之后同时发布。这种攻击的前提是，有恶意的节点需要占据很大一部分算力（比如至少51%）</p>\n<p>Selfish mining 的好处：如果个人算力较强，可以减少挖后续区块的竞争</p>\n","site":{"data":{}},"excerpt":"","more":"<p>比特币采用 transaction-based ledger（基于交易的账本）模式，每个区块中记录交易信息（转账交易、铸币交易），系统上不记录交易信息</p>\n<h2 id=\"一、UTXO\"><a href=\"#一、UTXO\" class=\"headerlink\" title=\"一、UTXO\"></a>一、UTXO</h2><p>比特币的全节点要维护一个数据结构 UTXO（Unspent Transaction Output，所有未被花出去的交易的输出 组成的集合）</p>\n<p>一个交易可能有多个输出，即用户可以在一次交易中同时向多人转账（可以节省手续费）</p>\n<p>比如：A 给 B 交易 5 BTC，B 将其交易出去；A 给 C 交易 3 BTC，但未交易出去。这是两个输出，但是只有 A 给 C 的交易在 UTXO 中</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/34/1.png\"\n                      alt=\"图1\"\n                ></p>\n<p>UTXO 中的每个元素要给出产生这个输出的交易的哈希值（可理解为交易的ID），以及它在这个交易里是第几个输出，这两个信息可以定位一个 UTXO 中的输出</p>\n<h3 id=\"UTXO-的用途：\"><a href=\"#UTXO-的用途：\" class=\"headerlink\" title=\"UTXO 的用途：\"></a>UTXO 的用途：</h3><p>在交易发生前，检查即将花出去的币是否在 UTXO 中，在才是合法的，快速校验双花攻击和凭空捏造</p>\n<p>每笔交易会消耗掉 UTXO 中的一些输出，同时在 UTXO 中产生新的输出，total inputs &#x3D; total outputs（所有输入的金额 等于 所有输出的金额）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total inputs ≈ total outputs</span><br><span class=\"line\">    1 BTC         0.99 BTC</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Transaction-fee（交易费）：\"><a href=\"#Transaction-fee（交易费）：\" class=\"headerlink\" title=\"Transaction fee（交易费）：\"></a>Transaction fee（交易费）：</h3><p>发布区块的节点（矿工）之所以会把他人的交易打包到新区块里，是因为 BTC 系统的第二个激励机制——交易费。通过把他人的交易打包到区块里，矿工会收取一些交易费（费用高的交易优先级就更高）</p>\n<p>目前矿工挖矿、争夺记账权，主要目的还是为了获取出块奖励，但是随着出块奖励的减少；多年后，交易费可能会变成矿工的主要收益</p>\n<h2 id=\"二、Account-based-ledger（基于账户的账本）\"><a href=\"#二、Account-based-ledger（基于账户的账本）\" class=\"headerlink\" title=\"二、Account-based ledger（基于账户的账本）\"></a>二、Account-based ledger（基于账户的账本）</h2><p>和比特币 transaction-based ledger（基于交易的账本）模式不同，以太坊采用 account-based ledger（基于账户的账本）模式，在这种模式中，系统需要显式地记录每个账户有多少币，查询更方便（不需要说明币的来源），但是隐私保护性不如比特币</p>\n<h2 id=\"三、Block-Example\"><a href=\"#三、Block-Example\" class=\"headerlink\" title=\"三、Block Example\"></a>三、Block Example</h2><p>Block header 的详细字段：<a class=\"link\"   href=\"https://developer.bitcoin.org/reference/block_chain.html\" >https://developer.bitcoin.org/reference/block_chain.html <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p>其中，nonce 和 merkle root hash 是可以改变的，通过改变 coinbase message 来改变 merkle root hash（coinbase message 可以看做 extra nonce）</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/34/2.png\"\n                      alt=\"图3\"\n                ></p>\n<p>在比特币的 POW（Power of work，工作量证明机制）中，矿工需要不断尝试不同的 nonce 和 coinbase message 组合，以找到一个满足目标哈希值的区块头，共有两层循环：</p>\n<p>外层循环调整 coinbase 域 的 extra nonce，算出 block header 里的根哈希值之后，内层循环再调整 header 里的 nonce</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/34/3.png\"\n                      alt=\"图3\"\n                ></p>\n<p>在比特币系统中，验证交易的合法性，就是通过将交易的 input scripts 和 output scripts 配对后执行来完成的。注意：不是把同一个交易的输入脚本和输入脚本配对，而是把这个交易里的输入脚本 和 前一个提供币来源的交易里的输出脚本配对。如果拼接在一起可以顺利执行，那么该交易就是合法的</p>\n<h2 id=\"四、挖矿概率分析\"><a href=\"#四、挖矿概率分析\" class=\"headerlink\" title=\"四、挖矿概率分析\"></a>四、挖矿概率分析</h2><p>Bernoulli trial（伯努利试验）：A random experiment with binary outcome，比如：掷硬币</p>\n<p>Bernoulli process（伯努利过程）：A sequence of independent Bernoulli trials</p>\n<p>Porsson process（泊松过程）：试验次数很多，成功概率很小</p>\n<p>伯努利过程的性质之一是 memoryless（无记忆性）&#x2F; progress free（与过程无关）：前面的实验结果对后面的实验结果无影响。由于挖矿的成功概率很小，所以可以用泊松过程近似</p>\n<p>出块时间服从 Exponential distribution（指数分布），纵轴是 probability density（概率密度），横轴是 time to next block（出块时间）。注意这是整个系统的出块时间，不是每个具体矿工的出块时间，具体到每一个矿工，出块时间取决于矿工的算力占系统总算力的百分比</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/34/4.png\"\n                      alt=\"图3\"\n                ></p>\n<p>如果不满足 progress free 这个性质，那么算力强的矿工会获得不成比例的优势，比如：A算力是B算力的10倍，但是A获得记账权的概率超过B的10倍。该性质正是挖矿公平性的保证</p>\n<h2 id=\"五、比特币的总量\"><a href=\"#五、比特币的总量\" class=\"headerlink\" title=\"五、比特币的总量\"></a>五、比特币的总量</h2><p>产生的比特币数量构成一个 geometric series（几何序列）：21w * 50 + 21w * 25 + 21w* 12.5 + … &#x3D; 21w * 50 * (1 + 1&#x2F;2 + 1&#x2F;4 + …) &#x3D; 2100w</p>\n<p>挖矿的过程对于维护比特币系统的安全性是至关重要的：Bitcoin is secured by mining，对于一个去中心化的系统，挖矿提供了一个凭借算力投票的有效手段，只要大部分算力掌握在诚实的节点手里，系统的安全性就能得到保证</p>\n<h2 id=\"六、比特币的安全性\"><a href=\"#六、比特币的安全性\" class=\"headerlink\" title=\"六、比特币的安全性\"></a>六、比特币的安全性</h2><h3 id=\"1、偷币\"><a href=\"#1、偷币\" class=\"headerlink\" title=\"1、偷币\"></a>1、偷币</h3><p>偷币是不可能的，因为系统以最长链合法链为准，恶意节点产生的区块会变成孤儿区块被丢弃，并且恶意节点还会损失本应得的出块奖励</p>\n<h3 id=\"2、双花攻击\"><a href=\"#2、双花攻击\" class=\"headerlink\" title=\"2、双花攻击\"></a>2、双花攻击</h3><p>可以通过 forking attack（分叉攻击）实现。区块插入的位置在刚开始挖矿的时候就决定，因为设置的 block header 里需要填写前一个区块的哈希值。</p>\n<p>分叉攻击：首先制造等长的合法链，比如，M 向 A 转账交易，产生了不可逆的外部效果（如购买实体商品）；然后再将该交易回滚，留下 M 向自己转账的区块，则 M 可从中不当获利</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/34/5.png\"\n                      alt=\"图3\"\n                ></p>\n<h4 id=\"如何防范分叉攻击？\"><a href=\"#如何防范分叉攻击？\" class=\"headerlink\" title=\"如何防范分叉攻击？\"></a>如何防范分叉攻击？</h4><p>多等几个区块 &#x2F; confirmation（确认），M 向 A 转账的交易刚写入区块的时候，叫 one confirmation，后面的区块类推。比特币协议中缺省的设置是：等待 6 个 confirmation 之后，才认为前面的交易是不可篡改的（大约1小时）</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/34/6.png\"\n                      alt=\"图3\"\n                ></p>\n<p>区块链是 Irrevocable ledger（不可篡改的账本），这种不可篡改性只是一种概率上的保证，刚刚写入区块链的内容还是比较容易被改变的，随着后续 confirmation 的增加，被篡改的概率会指数级大幅度下降</p>\n<p>Zero confirmation：转账交易发布出去了，但是还未被写入区块链中。这种方式在实际应用中比较普遍，因为（1）比特币协议缺省的设置是 节点接收最先听到的那个交易，所以上述例子中 M 转给自己的交易大概率不会被诚实的节点接受；（2）很多购物网站从支付成功到发货天然是有时间间隔的</p>\n<h3 id=\"3、恶意节点故意不把合法交易写入\"><a href=\"#3、恶意节点故意不把合法交易写入\" class=\"headerlink\" title=\"3、恶意节点故意不把合法交易写入\"></a>3、恶意节点故意不把合法交易写入</h3><p>因为总有诚实的节点愿意发布这些交易，所以合法交易总是可以被写到下一个区块里</p>\n<p>在正常工作的情况下，也可能出现合法交易未被包含进去的情况，比如近期交易的数目太多。比特币协议中规定，每个区块的大小是有限制的，最多不能超过一兆字节，如果交易的数目太多，可能就只能等到下一个区块再发布</p>\n<h3 id=\"Selfish-mining（自私挖矿）\"><a href=\"#Selfish-mining（自私挖矿）\" class=\"headerlink\" title=\"Selfish mining（自私挖矿）\"></a>Selfish mining（自私挖矿）</h3><p>正常情况下，挖到一个区块就立即发布，防止别人发布后自己的区块作废、丧失出块奖励</p>\n<p>Selfish mining：挖到多个区块，但是都藏着不发布，攒够6个之后同时发布。这种攻击的前提是，有恶意的节点需要占据很大一部分算力（比如至少51%）</p>\n<p>Selfish mining 的好处：如果个人算力较强，可以减少挖后续区块的竞争</p>\n"},{"title":"北大-区块链技术与应用6-BTC网络","date":"2025-01-13T10:08:45.000Z","_content":"\n## 一、网络层级\n\n顶层是 application layer，运行着 BitCoin 和 Block chain 协议；底层是 network layer，运行着 P2P Overlay Network\n\n比特币的 P2P 网络很简单，所有节点都是平等的，不像有的网络有 super node / master node\n\n## 二、加入/离开网络\n\n加入网络前，需要和 seed node（种子节点）联系，它会告知网络中的其他节点，节点之间通过 PCP 通信，有利于穿透防火墙；离开时不需要做任何操作，只需退出应用程序，其他节点会将一段时间未接收到消息的节点删除\n\n比特币网络设计的原则是：simple, robust, but not efficient（简单、鲁棒，而不是高效）\n\n## 三、等待上链的集合\n\n每个节点维护一个邻居节点的集合，消息传播在网络中采取 flooding（泛洪）的方式。节点第一次听到某个消息的时候，把它传播给其他所有的邻居节点，并记录已收到该消息，下次再收到时就不会再次转发。邻居节点的选取是随机的，不考虑底层的拓扑结构，这样设计可以增强鲁棒性，但牺牲了效率\n\n比特币系统中，每个节点需要维护一个等待上链（写入区块链）的集合。第一次听到某个交易的时候，把交易加入该集合，并把该交易转发给邻居节点，下次就不再转发。转发的前提是交易是合法的：签名合法，之前未被花过\n\n如果同时有两个冲突的交易被广播到网络上，比如：A 转钱给 B，A 又转钱给 C（双花），以首先被写入到区块链上的交易为准，交易被写入到区块链中即被等待上链的集合删除\n\n## 四、Best effort\n\n比特币网络的传播属于 best effort（尽最大努力），一个交易发送到比特币网络上，不一定所有节点能收到，且顺序也不一定，节点也不一定按照规则传播\n","source":"_posts/35-北大区块链-BTC网络.md","raw":"---\ntitle: 北大-区块链技术与应用6-BTC网络\ndate: 2025-01-13 18:08:45\ntags:\n    - web3\n    - BTC\ncategories:\n    - Web3\n      - 北大肖臻-区块链技术与应用\n---\n\n## 一、网络层级\n\n顶层是 application layer，运行着 BitCoin 和 Block chain 协议；底层是 network layer，运行着 P2P Overlay Network\n\n比特币的 P2P 网络很简单，所有节点都是平等的，不像有的网络有 super node / master node\n\n## 二、加入/离开网络\n\n加入网络前，需要和 seed node（种子节点）联系，它会告知网络中的其他节点，节点之间通过 PCP 通信，有利于穿透防火墙；离开时不需要做任何操作，只需退出应用程序，其他节点会将一段时间未接收到消息的节点删除\n\n比特币网络设计的原则是：simple, robust, but not efficient（简单、鲁棒，而不是高效）\n\n## 三、等待上链的集合\n\n每个节点维护一个邻居节点的集合，消息传播在网络中采取 flooding（泛洪）的方式。节点第一次听到某个消息的时候，把它传播给其他所有的邻居节点，并记录已收到该消息，下次再收到时就不会再次转发。邻居节点的选取是随机的，不考虑底层的拓扑结构，这样设计可以增强鲁棒性，但牺牲了效率\n\n比特币系统中，每个节点需要维护一个等待上链（写入区块链）的集合。第一次听到某个交易的时候，把交易加入该集合，并把该交易转发给邻居节点，下次就不再转发。转发的前提是交易是合法的：签名合法，之前未被花过\n\n如果同时有两个冲突的交易被广播到网络上，比如：A 转钱给 B，A 又转钱给 C（双花），以首先被写入到区块链上的交易为准，交易被写入到区块链中即被等待上链的集合删除\n\n## 四、Best effort\n\n比特币网络的传播属于 best effort（尽最大努力），一个交易发送到比特币网络上，不一定所有节点能收到，且顺序也不一定，节点也不一定按照规则传播\n","slug":"35-北大区块链-BTC网络","published":1,"updated":"2025-01-13T12:58:21.890Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5xkxz3h0000h1fy985h5vlw","content":"<h2 id=\"一、网络层级\"><a href=\"#一、网络层级\" class=\"headerlink\" title=\"一、网络层级\"></a>一、网络层级</h2><p>顶层是 application layer，运行着 BitCoin 和 Block chain 协议；底层是 network layer，运行着 P2P Overlay Network</p>\n<p>比特币的 P2P 网络很简单，所有节点都是平等的，不像有的网络有 super node &#x2F; master node</p>\n<h2 id=\"二、加入-离开网络\"><a href=\"#二、加入-离开网络\" class=\"headerlink\" title=\"二、加入&#x2F;离开网络\"></a>二、加入&#x2F;离开网络</h2><p>加入网络前，需要和 seed node（种子节点）联系，它会告知网络中的其他节点，节点之间通过 PCP 通信，有利于穿透防火墙；离开时不需要做任何操作，只需退出应用程序，其他节点会将一段时间未接收到消息的节点删除</p>\n<p>比特币网络设计的原则是：simple, robust, but not efficient（简单、鲁棒，而不是高效）</p>\n<h2 id=\"三、等待上链的集合\"><a href=\"#三、等待上链的集合\" class=\"headerlink\" title=\"三、等待上链的集合\"></a>三、等待上链的集合</h2><p>每个节点维护一个邻居节点的集合，消息传播在网络中采取 flooding（泛洪）的方式。节点第一次听到某个消息的时候，把它传播给其他所有的邻居节点，并记录已收到该消息，下次再收到时就不会再次转发。邻居节点的选取是随机的，不考虑底层的拓扑结构，这样设计可以增强鲁棒性，但牺牲了效率</p>\n<p>比特币系统中，每个节点需要维护一个等待上链（写入区块链）的集合。第一次听到某个交易的时候，把交易加入该集合，并把该交易转发给邻居节点，下次就不再转发。转发的前提是交易是合法的：签名合法，之前未被花过</p>\n<p>如果同时有两个冲突的交易被广播到网络上，比如：A 转钱给 B，A 又转钱给 C（双花），以首先被写入到区块链上的交易为准，交易被写入到区块链中即被等待上链的集合删除</p>\n<h2 id=\"四、Best-effort\"><a href=\"#四、Best-effort\" class=\"headerlink\" title=\"四、Best effort\"></a>四、Best effort</h2><p>比特币网络的传播属于 best effort（尽最大努力），一个交易发送到比特币网络上，不一定所有节点能收到，且顺序也不一定，节点也不一定按照规则传播</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、网络层级\"><a href=\"#一、网络层级\" class=\"headerlink\" title=\"一、网络层级\"></a>一、网络层级</h2><p>顶层是 application layer，运行着 BitCoin 和 Block chain 协议；底层是 network layer，运行着 P2P Overlay Network</p>\n<p>比特币的 P2P 网络很简单，所有节点都是平等的，不像有的网络有 super node &#x2F; master node</p>\n<h2 id=\"二、加入-离开网络\"><a href=\"#二、加入-离开网络\" class=\"headerlink\" title=\"二、加入&#x2F;离开网络\"></a>二、加入&#x2F;离开网络</h2><p>加入网络前，需要和 seed node（种子节点）联系，它会告知网络中的其他节点，节点之间通过 PCP 通信，有利于穿透防火墙；离开时不需要做任何操作，只需退出应用程序，其他节点会将一段时间未接收到消息的节点删除</p>\n<p>比特币网络设计的原则是：simple, robust, but not efficient（简单、鲁棒，而不是高效）</p>\n<h2 id=\"三、等待上链的集合\"><a href=\"#三、等待上链的集合\" class=\"headerlink\" title=\"三、等待上链的集合\"></a>三、等待上链的集合</h2><p>每个节点维护一个邻居节点的集合，消息传播在网络中采取 flooding（泛洪）的方式。节点第一次听到某个消息的时候，把它传播给其他所有的邻居节点，并记录已收到该消息，下次再收到时就不会再次转发。邻居节点的选取是随机的，不考虑底层的拓扑结构，这样设计可以增强鲁棒性，但牺牲了效率</p>\n<p>比特币系统中，每个节点需要维护一个等待上链（写入区块链）的集合。第一次听到某个交易的时候，把交易加入该集合，并把该交易转发给邻居节点，下次就不再转发。转发的前提是交易是合法的：签名合法，之前未被花过</p>\n<p>如果同时有两个冲突的交易被广播到网络上，比如：A 转钱给 B，A 又转钱给 C（双花），以首先被写入到区块链上的交易为准，交易被写入到区块链中即被等待上链的集合删除</p>\n<h2 id=\"四、Best-effort\"><a href=\"#四、Best-effort\" class=\"headerlink\" title=\"四、Best effort\"></a>四、Best effort</h2><p>比特币网络的传播属于 best effort（尽最大努力），一个交易发送到比特币网络上，不一定所有节点能收到，且顺序也不一定，节点也不一定按照规则传播</p>\n"},{"title":"北大-区块链技术与应用7-挖矿难度","date":"2025-01-13T12:58:43.000Z","_content":"\n## 一、挖矿难度和目标域值\n\nH(block header) ≤ target\n\n调整挖矿难度，就是调整目标空间 在整个输出空间中所占的比例，通俗地说，就是哈希值的前面有多少 0\n\n比特币使用的哈希算法是 SHA-256，整个输出空间是 2^256 个可能的取值\n\n挖矿难度和目标域值成反比：\n\n![图1](../images/36/1.png)\n\ndifficulty_1_target：挖矿难度等于1时，对应的目标域值（挖矿难度最小就是1），此时的目标域值很大\n\n## 二、出块时间太短的后果\n\n系统的总算力越强，安全性就越高，因为发动 51% attack（考虑2个分叉）的成本就更高\n\n出块时间太短，但是传播速度较慢，很容易导致过多的 forking（分叉），系统的总算力就被分散了，更容易造成 forking attack，因为可以通过较小的算力（100%/分叉数+1%）实现攻击\n\n以太坊的出块时间是15s，出块速度是比特币的40倍，因此以太坊设计了新的共识协议 ghost，其中产生的 orphan block 就不能简单的丢弃，而是要给一些奖励（uncle reward）\n\n## 三、调整挖矿难度\n\n比特币协议规定每个2016个区块，需要调整目标域值，`2016*10/(60*24)≈14天`\n\n调整目标域值的公式：\n\n![图2](../images/36/2.png)\n\n其中，expected time（预期时间）是 2016*10，actual time（实际时间）是系统近期产生2016个区块所花费的时间。在实际代码中，上调和下调分别有4倍和1/4的限度\n\n### 如何让所有的矿工同时调整域值？\n\nblock header 中存储的 nBits 是目标域值编码的版本（将 target 的256字节 压缩到4字节）。如果有矿工不调整，那么校验就不会被通过\n","source":"_posts/36-北大区块链-挖矿难度.md","raw":"---\ntitle: 北大-区块链技术与应用7-挖矿难度\ndate: 2025-01-13 20:58:43\ntags:\n    - web3\n    - BTC\ncategories:\n    - Web3\n      - 北大肖臻-区块链技术与应用\n---\n\n## 一、挖矿难度和目标域值\n\nH(block header) ≤ target\n\n调整挖矿难度，就是调整目标空间 在整个输出空间中所占的比例，通俗地说，就是哈希值的前面有多少 0\n\n比特币使用的哈希算法是 SHA-256，整个输出空间是 2^256 个可能的取值\n\n挖矿难度和目标域值成反比：\n\n![图1](../images/36/1.png)\n\ndifficulty_1_target：挖矿难度等于1时，对应的目标域值（挖矿难度最小就是1），此时的目标域值很大\n\n## 二、出块时间太短的后果\n\n系统的总算力越强，安全性就越高，因为发动 51% attack（考虑2个分叉）的成本就更高\n\n出块时间太短，但是传播速度较慢，很容易导致过多的 forking（分叉），系统的总算力就被分散了，更容易造成 forking attack，因为可以通过较小的算力（100%/分叉数+1%）实现攻击\n\n以太坊的出块时间是15s，出块速度是比特币的40倍，因此以太坊设计了新的共识协议 ghost，其中产生的 orphan block 就不能简单的丢弃，而是要给一些奖励（uncle reward）\n\n## 三、调整挖矿难度\n\n比特币协议规定每个2016个区块，需要调整目标域值，`2016*10/(60*24)≈14天`\n\n调整目标域值的公式：\n\n![图2](../images/36/2.png)\n\n其中，expected time（预期时间）是 2016*10，actual time（实际时间）是系统近期产生2016个区块所花费的时间。在实际代码中，上调和下调分别有4倍和1/4的限度\n\n### 如何让所有的矿工同时调整域值？\n\nblock header 中存储的 nBits 是目标域值编码的版本（将 target 的256字节 压缩到4字节）。如果有矿工不调整，那么校验就不会被通过\n","slug":"36-北大区块链-挖矿难度","published":1,"updated":"2025-01-13T15:47:30.592Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5xkxz3h0001h1fy58vs1duk","content":"<h2 id=\"一、挖矿难度和目标域值\"><a href=\"#一、挖矿难度和目标域值\" class=\"headerlink\" title=\"一、挖矿难度和目标域值\"></a>一、挖矿难度和目标域值</h2><p>H(block header) ≤ target</p>\n<p>调整挖矿难度，就是调整目标空间 在整个输出空间中所占的比例，通俗地说，就是哈希值的前面有多少 0</p>\n<p>比特币使用的哈希算法是 SHA-256，整个输出空间是 2^256 个可能的取值</p>\n<p>挖矿难度和目标域值成反比：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/36/1.png\"\n                      alt=\"图1\"\n                ></p>\n<p>difficulty_1_target：挖矿难度等于1时，对应的目标域值（挖矿难度最小就是1），此时的目标域值很大</p>\n<h2 id=\"二、出块时间太短的后果\"><a href=\"#二、出块时间太短的后果\" class=\"headerlink\" title=\"二、出块时间太短的后果\"></a>二、出块时间太短的后果</h2><p>系统的总算力越强，安全性就越高，因为发动 51% attack（考虑2个分叉）的成本就更高</p>\n<p>出块时间太短，但是传播速度较慢，很容易导致过多的 forking（分叉），系统的总算力就被分散了，更容易造成 forking attack，因为可以通过较小的算力（100%&#x2F;分叉数+1%）实现攻击</p>\n<p>以太坊的出块时间是15s，出块速度是比特币的40倍，因此以太坊设计了新的共识协议 ghost，其中产生的 orphan block 就不能简单的丢弃，而是要给一些奖励（uncle reward）</p>\n<h2 id=\"三、调整挖矿难度\"><a href=\"#三、调整挖矿难度\" class=\"headerlink\" title=\"三、调整挖矿难度\"></a>三、调整挖矿难度</h2><p>比特币协议规定每个2016个区块，需要调整目标域值，<code>2016*10/(60*24)≈14天</code></p>\n<p>调整目标域值的公式：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/36/2.png\"\n                      alt=\"图2\"\n                ></p>\n<p>其中，expected time（预期时间）是 2016*10，actual time（实际时间）是系统近期产生2016个区块所花费的时间。在实际代码中，上调和下调分别有4倍和1&#x2F;4的限度</p>\n<h3 id=\"如何让所有的矿工同时调整域值？\"><a href=\"#如何让所有的矿工同时调整域值？\" class=\"headerlink\" title=\"如何让所有的矿工同时调整域值？\"></a>如何让所有的矿工同时调整域值？</h3><p>block header 中存储的 nBits 是目标域值编码的版本（将 target 的256字节 压缩到4字节）。如果有矿工不调整，那么校验就不会被通过</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、挖矿难度和目标域值\"><a href=\"#一、挖矿难度和目标域值\" class=\"headerlink\" title=\"一、挖矿难度和目标域值\"></a>一、挖矿难度和目标域值</h2><p>H(block header) ≤ target</p>\n<p>调整挖矿难度，就是调整目标空间 在整个输出空间中所占的比例，通俗地说，就是哈希值的前面有多少 0</p>\n<p>比特币使用的哈希算法是 SHA-256，整个输出空间是 2^256 个可能的取值</p>\n<p>挖矿难度和目标域值成反比：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/36/1.png\"\n                      alt=\"图1\"\n                ></p>\n<p>difficulty_1_target：挖矿难度等于1时，对应的目标域值（挖矿难度最小就是1），此时的目标域值很大</p>\n<h2 id=\"二、出块时间太短的后果\"><a href=\"#二、出块时间太短的后果\" class=\"headerlink\" title=\"二、出块时间太短的后果\"></a>二、出块时间太短的后果</h2><p>系统的总算力越强，安全性就越高，因为发动 51% attack（考虑2个分叉）的成本就更高</p>\n<p>出块时间太短，但是传播速度较慢，很容易导致过多的 forking（分叉），系统的总算力就被分散了，更容易造成 forking attack，因为可以通过较小的算力（100%&#x2F;分叉数+1%）实现攻击</p>\n<p>以太坊的出块时间是15s，出块速度是比特币的40倍，因此以太坊设计了新的共识协议 ghost，其中产生的 orphan block 就不能简单的丢弃，而是要给一些奖励（uncle reward）</p>\n<h2 id=\"三、调整挖矿难度\"><a href=\"#三、调整挖矿难度\" class=\"headerlink\" title=\"三、调整挖矿难度\"></a>三、调整挖矿难度</h2><p>比特币协议规定每个2016个区块，需要调整目标域值，<code>2016*10/(60*24)≈14天</code></p>\n<p>调整目标域值的公式：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/36/2.png\"\n                      alt=\"图2\"\n                ></p>\n<p>其中，expected time（预期时间）是 2016*10，actual time（实际时间）是系统近期产生2016个区块所花费的时间。在实际代码中，上调和下调分别有4倍和1&#x2F;4的限度</p>\n<h3 id=\"如何让所有的矿工同时调整域值？\"><a href=\"#如何让所有的矿工同时调整域值？\" class=\"headerlink\" title=\"如何让所有的矿工同时调整域值？\"></a>如何让所有的矿工同时调整域值？</h3><p>block header 中存储的 nBits 是目标域值编码的版本（将 target 的256字节 压缩到4字节）。如果有矿工不调整，那么校验就不会被通过</p>\n"},{"title":"北大-区块链技术与应用8-BTC挖矿","date":"2025-01-13T15:47:49.000Z","_content":"\n## 一、全节点\n\n### 1、一直在线\n\n### 2、在本地硬盘上维护完整的区块链信息\n\n### 3、在内存里维护 UTXO 集合，以便快速检验交易的正确性\n\nUTXO（unspent transaction output）\n\n### 4、监听比特币网络上的交易信息，验证每个交易的合法性\n\n（1）是否有合法的签名\n\n（2）是不是 double spending\n\n### 5、决定哪些交易会被打包到区块里\n\n缺省状态下，只要是合法交易、并且交易费符合要求，就会被打包\n\n### 6、 监听别的矿工挖出来的区块，验证其合法性\n\n（1）区块中的每个交易都要合法，包括铸币交易，比如是否篡改了出块奖励、发布的难度是否符合要求（block header 取哈希后，前面是否有足够多的 0；block header 里的难度目标域值是否设置正确）\n\n（2）全节点是否每两周调整挖矿难度\n\n（3）检查该区块是否在延伸最长合法链\n\n### 7、挖矿\n\n#### （1）决定沿着哪条链挖下去？\n\n缺省情况下沿着最长合法链挖下去\n\n#### （2）当出现等长的分叉的时候，选择哪一个分叉？\n\n缺省情况下选择最先听到的分叉\n\n## 二、轻节点\n\n轻节点也叫做 spv client（simplified payment verification）\n\n### 1、不是一直在线\n\n### 2、不用保存整个区块链，只要保存每个区块的块头\n\n大约是全节点的 1/1000\n\n### 3、不用保存全部交易，只保存与自己相关的交易\n\n### 4、无法检验大多数交易的合法性，只能检验与自己相关 的那些交易的合法性\n\n### 5、无法检测网上发布的区块的正确性\n\n### 6、可以验证挖矿的难度\n\n因为挖矿的时候，计算哈希值只用到了块头的信息\n\n### 7、只能检测哪个是最长链，不知道哪个是最长合法链\n\n因为无法检测这条链上所包含的交易都是合法的（不过可以检测每个区块是否符合难度要求）\n\n## 三、挖矿的注意事项\n\n比特币网络中大部分节点都是轻节点，如果只想进行转账，而不进行挖矿，就不需要运行全节点、只需使用轻节点\n\n在挖矿过程中，如果监听到别人发布了一个区块，需要重新组装区块（block header 和 交易内容都有变化）、重新开始挖\n\n## 四、比特币的安全性保证\n\n### 1、密码学\n\n恶意节点拿不到私钥，就无法伪造签名，也就无法偷币\n\n### 2、好节点占大部分算力\n\n前提是系统中大部分算力的矿工是遵守协议的\n\n## 五、挖矿趋势一：设备从通用到专用\n\n### 1、CPU\n\n最早是用普通的 CPU / 通用计算机 挖矿，但是这种方式无法充分利用内存\n\n### 2、GPU\n\nGPU 用于大规模的并行计算，比如深度学习大量的矩阵乘法，但也部分部件也无法充分利用（比如浮点数运算）\n\n### 3、ASIC 芯片\n\nASIC（Application Specific Integrated Circuit，专用集成电路），ASIC 芯片是专门为比特币挖矿计算哈希值而设计，性价比最高\n\n但是同一个芯片只能用于一种币的挖矿，除非两种币使用同一个 mining puzzle。有些新开发的币会使用已有币的 mining puzzle，进而吸引更多矿工，这叫做 merge mining\n\n购买 ASIC 矿机的时机很重要，因为过时得很快，现在一般需要提前预定。不良厂商可能会在矿机生产后的黄金两个月先自己挖矿，然后才卖给用户\n\n有些新型货币，设计的是 alternative mining puzzle，出发点是 ASIC resistance，目的是让通用计算机也能参与挖矿过程\n\n## 六、挖矿趋势二：大型矿池的出现\n\n矿池的出现是为了解决单个矿工收入不稳定的问题。矿池把矿工组织起来作为一个整体，其架构是：一个全节点驱动多个矿机\n\n一个矿池一般有一个 pool manager（矿主），下面连着很多 minner（矿工），矿工只负责通过 ASIC 芯片计算哈希值，全节点的其他职责都由矿主承担（比如监听网络上的交易，并将其打包成一个候选区块，同时监听是否有其他节点抢先发布区块）\n\n### 矿池的收益分配\n\n矿池一般有两种组织形式：\n\n（1）类似大型数据中心，所有矿机属于同一个机构\n\n（2）分布式的，矿工和矿主不在同一个地方，矿工加入矿池，是通过矿池规定的通讯协议和矿主进行联系。矿主把要计算的哈希值的任务分配给矿工，矿工计算完成后把结果返回给矿主，有出块奖励时一起参与分红\n\n通过工作量证明，按照矿工的贡献大小分配收益：降低挖矿难度（减少目标域值前0的数量），符合条件的叫一个 share（almost valid block），挖到合法区块、得到出块奖励之后，矿主按照矿工 share 的数量来分配收益\n\n### 1、矿工是否能偷出块奖励？\n\n矿工不可能挖到一个合法区块自己偷偷发布，因为矿工的任务由矿主分配，矿主负责组装区块，并把不同的 coinbase parameter 所对应的 nonce，交给不同的矿工尝试，而 coinbase transaction 里的收款人地址填的是矿主的地址\n\n### 2、矿工是否能捣乱？\n\n是可以的，比如 矿工正常提交 share，但是挖到合法区块之后就丢弃掉\n\n### 3、矿池的弊端\n\n恶意方可能吸引到足够多的矿工（不明真相的群众）加入，然后发动 51% attack：\n\n（1）Forking attack：制造分叉，因为算力高，迟早能赶超6个区块；\n\n（2）Boycott：制裁对象一挖出区块，就分叉，因为算力高，更容易使制裁对象的区块作废\n\n类似于云计算中的 on demand computing，平时不用自己去维护很大的计算集群，需要用的时候可以随时召唤，对于矿池来说就是 on demand mining\n","source":"_posts/37-北大区块链-BTC挖矿.md","raw":"---\ntitle: 北大-区块链技术与应用8-BTC挖矿\ndate: 2025-01-13 23:47:49\ntags:\n    - web3\n    - BTC\ncategories:\n    - Web3\n      - 北大肖臻-区块链技术与应用\n---\n\n## 一、全节点\n\n### 1、一直在线\n\n### 2、在本地硬盘上维护完整的区块链信息\n\n### 3、在内存里维护 UTXO 集合，以便快速检验交易的正确性\n\nUTXO（unspent transaction output）\n\n### 4、监听比特币网络上的交易信息，验证每个交易的合法性\n\n（1）是否有合法的签名\n\n（2）是不是 double spending\n\n### 5、决定哪些交易会被打包到区块里\n\n缺省状态下，只要是合法交易、并且交易费符合要求，就会被打包\n\n### 6、 监听别的矿工挖出来的区块，验证其合法性\n\n（1）区块中的每个交易都要合法，包括铸币交易，比如是否篡改了出块奖励、发布的难度是否符合要求（block header 取哈希后，前面是否有足够多的 0；block header 里的难度目标域值是否设置正确）\n\n（2）全节点是否每两周调整挖矿难度\n\n（3）检查该区块是否在延伸最长合法链\n\n### 7、挖矿\n\n#### （1）决定沿着哪条链挖下去？\n\n缺省情况下沿着最长合法链挖下去\n\n#### （2）当出现等长的分叉的时候，选择哪一个分叉？\n\n缺省情况下选择最先听到的分叉\n\n## 二、轻节点\n\n轻节点也叫做 spv client（simplified payment verification）\n\n### 1、不是一直在线\n\n### 2、不用保存整个区块链，只要保存每个区块的块头\n\n大约是全节点的 1/1000\n\n### 3、不用保存全部交易，只保存与自己相关的交易\n\n### 4、无法检验大多数交易的合法性，只能检验与自己相关 的那些交易的合法性\n\n### 5、无法检测网上发布的区块的正确性\n\n### 6、可以验证挖矿的难度\n\n因为挖矿的时候，计算哈希值只用到了块头的信息\n\n### 7、只能检测哪个是最长链，不知道哪个是最长合法链\n\n因为无法检测这条链上所包含的交易都是合法的（不过可以检测每个区块是否符合难度要求）\n\n## 三、挖矿的注意事项\n\n比特币网络中大部分节点都是轻节点，如果只想进行转账，而不进行挖矿，就不需要运行全节点、只需使用轻节点\n\n在挖矿过程中，如果监听到别人发布了一个区块，需要重新组装区块（block header 和 交易内容都有变化）、重新开始挖\n\n## 四、比特币的安全性保证\n\n### 1、密码学\n\n恶意节点拿不到私钥，就无法伪造签名，也就无法偷币\n\n### 2、好节点占大部分算力\n\n前提是系统中大部分算力的矿工是遵守协议的\n\n## 五、挖矿趋势一：设备从通用到专用\n\n### 1、CPU\n\n最早是用普通的 CPU / 通用计算机 挖矿，但是这种方式无法充分利用内存\n\n### 2、GPU\n\nGPU 用于大规模的并行计算，比如深度学习大量的矩阵乘法，但也部分部件也无法充分利用（比如浮点数运算）\n\n### 3、ASIC 芯片\n\nASIC（Application Specific Integrated Circuit，专用集成电路），ASIC 芯片是专门为比特币挖矿计算哈希值而设计，性价比最高\n\n但是同一个芯片只能用于一种币的挖矿，除非两种币使用同一个 mining puzzle。有些新开发的币会使用已有币的 mining puzzle，进而吸引更多矿工，这叫做 merge mining\n\n购买 ASIC 矿机的时机很重要，因为过时得很快，现在一般需要提前预定。不良厂商可能会在矿机生产后的黄金两个月先自己挖矿，然后才卖给用户\n\n有些新型货币，设计的是 alternative mining puzzle，出发点是 ASIC resistance，目的是让通用计算机也能参与挖矿过程\n\n## 六、挖矿趋势二：大型矿池的出现\n\n矿池的出现是为了解决单个矿工收入不稳定的问题。矿池把矿工组织起来作为一个整体，其架构是：一个全节点驱动多个矿机\n\n一个矿池一般有一个 pool manager（矿主），下面连着很多 minner（矿工），矿工只负责通过 ASIC 芯片计算哈希值，全节点的其他职责都由矿主承担（比如监听网络上的交易，并将其打包成一个候选区块，同时监听是否有其他节点抢先发布区块）\n\n### 矿池的收益分配\n\n矿池一般有两种组织形式：\n\n（1）类似大型数据中心，所有矿机属于同一个机构\n\n（2）分布式的，矿工和矿主不在同一个地方，矿工加入矿池，是通过矿池规定的通讯协议和矿主进行联系。矿主把要计算的哈希值的任务分配给矿工，矿工计算完成后把结果返回给矿主，有出块奖励时一起参与分红\n\n通过工作量证明，按照矿工的贡献大小分配收益：降低挖矿难度（减少目标域值前0的数量），符合条件的叫一个 share（almost valid block），挖到合法区块、得到出块奖励之后，矿主按照矿工 share 的数量来分配收益\n\n### 1、矿工是否能偷出块奖励？\n\n矿工不可能挖到一个合法区块自己偷偷发布，因为矿工的任务由矿主分配，矿主负责组装区块，并把不同的 coinbase parameter 所对应的 nonce，交给不同的矿工尝试，而 coinbase transaction 里的收款人地址填的是矿主的地址\n\n### 2、矿工是否能捣乱？\n\n是可以的，比如 矿工正常提交 share，但是挖到合法区块之后就丢弃掉\n\n### 3、矿池的弊端\n\n恶意方可能吸引到足够多的矿工（不明真相的群众）加入，然后发动 51% attack：\n\n（1）Forking attack：制造分叉，因为算力高，迟早能赶超6个区块；\n\n（2）Boycott：制裁对象一挖出区块，就分叉，因为算力高，更容易使制裁对象的区块作废\n\n类似于云计算中的 on demand computing，平时不用自己去维护很大的计算集群，需要用的时候可以随时召唤，对于矿池来说就是 on demand mining\n","slug":"37-北大区块链-BTC挖矿","published":1,"updated":"2025-01-14T12:59:08.744Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5xkxz3h0003h1fy5ur6am7q","content":"<h2 id=\"一、全节点\"><a href=\"#一、全节点\" class=\"headerlink\" title=\"一、全节点\"></a>一、全节点</h2><h3 id=\"1、一直在线\"><a href=\"#1、一直在线\" class=\"headerlink\" title=\"1、一直在线\"></a>1、一直在线</h3><h3 id=\"2、在本地硬盘上维护完整的区块链信息\"><a href=\"#2、在本地硬盘上维护完整的区块链信息\" class=\"headerlink\" title=\"2、在本地硬盘上维护完整的区块链信息\"></a>2、在本地硬盘上维护完整的区块链信息</h3><h3 id=\"3、在内存里维护-UTXO-集合，以便快速检验交易的正确性\"><a href=\"#3、在内存里维护-UTXO-集合，以便快速检验交易的正确性\" class=\"headerlink\" title=\"3、在内存里维护 UTXO 集合，以便快速检验交易的正确性\"></a>3、在内存里维护 UTXO 集合，以便快速检验交易的正确性</h3><p>UTXO（unspent transaction output）</p>\n<h3 id=\"4、监听比特币网络上的交易信息，验证每个交易的合法性\"><a href=\"#4、监听比特币网络上的交易信息，验证每个交易的合法性\" class=\"headerlink\" title=\"4、监听比特币网络上的交易信息，验证每个交易的合法性\"></a>4、监听比特币网络上的交易信息，验证每个交易的合法性</h3><p>（1）是否有合法的签名</p>\n<p>（2）是不是 double spending</p>\n<h3 id=\"5、决定哪些交易会被打包到区块里\"><a href=\"#5、决定哪些交易会被打包到区块里\" class=\"headerlink\" title=\"5、决定哪些交易会被打包到区块里\"></a>5、决定哪些交易会被打包到区块里</h3><p>缺省状态下，只要是合法交易、并且交易费符合要求，就会被打包</p>\n<h3 id=\"6、-监听别的矿工挖出来的区块，验证其合法性\"><a href=\"#6、-监听别的矿工挖出来的区块，验证其合法性\" class=\"headerlink\" title=\"6、 监听别的矿工挖出来的区块，验证其合法性\"></a>6、 监听别的矿工挖出来的区块，验证其合法性</h3><p>（1）区块中的每个交易都要合法，包括铸币交易，比如是否篡改了出块奖励、发布的难度是否符合要求（block header 取哈希后，前面是否有足够多的 0；block header 里的难度目标域值是否设置正确）</p>\n<p>（2）全节点是否每两周调整挖矿难度</p>\n<p>（3）检查该区块是否在延伸最长合法链</p>\n<h3 id=\"7、挖矿\"><a href=\"#7、挖矿\" class=\"headerlink\" title=\"7、挖矿\"></a>7、挖矿</h3><h4 id=\"（1）决定沿着哪条链挖下去？\"><a href=\"#（1）决定沿着哪条链挖下去？\" class=\"headerlink\" title=\"（1）决定沿着哪条链挖下去？\"></a>（1）决定沿着哪条链挖下去？</h4><p>缺省情况下沿着最长合法链挖下去</p>\n<h4 id=\"（2）当出现等长的分叉的时候，选择哪一个分叉？\"><a href=\"#（2）当出现等长的分叉的时候，选择哪一个分叉？\" class=\"headerlink\" title=\"（2）当出现等长的分叉的时候，选择哪一个分叉？\"></a>（2）当出现等长的分叉的时候，选择哪一个分叉？</h4><p>缺省情况下选择最先听到的分叉</p>\n<h2 id=\"二、轻节点\"><a href=\"#二、轻节点\" class=\"headerlink\" title=\"二、轻节点\"></a>二、轻节点</h2><p>轻节点也叫做 spv client（simplified payment verification）</p>\n<h3 id=\"1、不是一直在线\"><a href=\"#1、不是一直在线\" class=\"headerlink\" title=\"1、不是一直在线\"></a>1、不是一直在线</h3><h3 id=\"2、不用保存整个区块链，只要保存每个区块的块头\"><a href=\"#2、不用保存整个区块链，只要保存每个区块的块头\" class=\"headerlink\" title=\"2、不用保存整个区块链，只要保存每个区块的块头\"></a>2、不用保存整个区块链，只要保存每个区块的块头</h3><p>大约是全节点的 1&#x2F;1000</p>\n<h3 id=\"3、不用保存全部交易，只保存与自己相关的交易\"><a href=\"#3、不用保存全部交易，只保存与自己相关的交易\" class=\"headerlink\" title=\"3、不用保存全部交易，只保存与自己相关的交易\"></a>3、不用保存全部交易，只保存与自己相关的交易</h3><h3 id=\"4、无法检验大多数交易的合法性，只能检验与自己相关-的那些交易的合法性\"><a href=\"#4、无法检验大多数交易的合法性，只能检验与自己相关-的那些交易的合法性\" class=\"headerlink\" title=\"4、无法检验大多数交易的合法性，只能检验与自己相关 的那些交易的合法性\"></a>4、无法检验大多数交易的合法性，只能检验与自己相关 的那些交易的合法性</h3><h3 id=\"5、无法检测网上发布的区块的正确性\"><a href=\"#5、无法检测网上发布的区块的正确性\" class=\"headerlink\" title=\"5、无法检测网上发布的区块的正确性\"></a>5、无法检测网上发布的区块的正确性</h3><h3 id=\"6、可以验证挖矿的难度\"><a href=\"#6、可以验证挖矿的难度\" class=\"headerlink\" title=\"6、可以验证挖矿的难度\"></a>6、可以验证挖矿的难度</h3><p>因为挖矿的时候，计算哈希值只用到了块头的信息</p>\n<h3 id=\"7、只能检测哪个是最长链，不知道哪个是最长合法链\"><a href=\"#7、只能检测哪个是最长链，不知道哪个是最长合法链\" class=\"headerlink\" title=\"7、只能检测哪个是最长链，不知道哪个是最长合法链\"></a>7、只能检测哪个是最长链，不知道哪个是最长合法链</h3><p>因为无法检测这条链上所包含的交易都是合法的（不过可以检测每个区块是否符合难度要求）</p>\n<h2 id=\"三、挖矿的注意事项\"><a href=\"#三、挖矿的注意事项\" class=\"headerlink\" title=\"三、挖矿的注意事项\"></a>三、挖矿的注意事项</h2><p>比特币网络中大部分节点都是轻节点，如果只想进行转账，而不进行挖矿，就不需要运行全节点、只需使用轻节点</p>\n<p>在挖矿过程中，如果监听到别人发布了一个区块，需要重新组装区块（block header 和 交易内容都有变化）、重新开始挖</p>\n<h2 id=\"四、比特币的安全性保证\"><a href=\"#四、比特币的安全性保证\" class=\"headerlink\" title=\"四、比特币的安全性保证\"></a>四、比特币的安全性保证</h2><h3 id=\"1、密码学\"><a href=\"#1、密码学\" class=\"headerlink\" title=\"1、密码学\"></a>1、密码学</h3><p>恶意节点拿不到私钥，就无法伪造签名，也就无法偷币</p>\n<h3 id=\"2、好节点占大部分算力\"><a href=\"#2、好节点占大部分算力\" class=\"headerlink\" title=\"2、好节点占大部分算力\"></a>2、好节点占大部分算力</h3><p>前提是系统中大部分算力的矿工是遵守协议的</p>\n<h2 id=\"五、挖矿趋势一：设备从通用到专用\"><a href=\"#五、挖矿趋势一：设备从通用到专用\" class=\"headerlink\" title=\"五、挖矿趋势一：设备从通用到专用\"></a>五、挖矿趋势一：设备从通用到专用</h2><h3 id=\"1、CPU\"><a href=\"#1、CPU\" class=\"headerlink\" title=\"1、CPU\"></a>1、CPU</h3><p>最早是用普通的 CPU &#x2F; 通用计算机 挖矿，但是这种方式无法充分利用内存</p>\n<h3 id=\"2、GPU\"><a href=\"#2、GPU\" class=\"headerlink\" title=\"2、GPU\"></a>2、GPU</h3><p>GPU 用于大规模的并行计算，比如深度学习大量的矩阵乘法，但也部分部件也无法充分利用（比如浮点数运算）</p>\n<h3 id=\"3、ASIC-芯片\"><a href=\"#3、ASIC-芯片\" class=\"headerlink\" title=\"3、ASIC 芯片\"></a>3、ASIC 芯片</h3><p>ASIC（Application Specific Integrated Circuit，专用集成电路），ASIC 芯片是专门为比特币挖矿计算哈希值而设计，性价比最高</p>\n<p>但是同一个芯片只能用于一种币的挖矿，除非两种币使用同一个 mining puzzle。有些新开发的币会使用已有币的 mining puzzle，进而吸引更多矿工，这叫做 merge mining</p>\n<p>购买 ASIC 矿机的时机很重要，因为过时得很快，现在一般需要提前预定。不良厂商可能会在矿机生产后的黄金两个月先自己挖矿，然后才卖给用户</p>\n<p>有些新型货币，设计的是 alternative mining puzzle，出发点是 ASIC resistance，目的是让通用计算机也能参与挖矿过程</p>\n<h2 id=\"六、挖矿趋势二：大型矿池的出现\"><a href=\"#六、挖矿趋势二：大型矿池的出现\" class=\"headerlink\" title=\"六、挖矿趋势二：大型矿池的出现\"></a>六、挖矿趋势二：大型矿池的出现</h2><p>矿池的出现是为了解决单个矿工收入不稳定的问题。矿池把矿工组织起来作为一个整体，其架构是：一个全节点驱动多个矿机</p>\n<p>一个矿池一般有一个 pool manager（矿主），下面连着很多 minner（矿工），矿工只负责通过 ASIC 芯片计算哈希值，全节点的其他职责都由矿主承担（比如监听网络上的交易，并将其打包成一个候选区块，同时监听是否有其他节点抢先发布区块）</p>\n<h3 id=\"矿池的收益分配\"><a href=\"#矿池的收益分配\" class=\"headerlink\" title=\"矿池的收益分配\"></a>矿池的收益分配</h3><p>矿池一般有两种组织形式：</p>\n<p>（1）类似大型数据中心，所有矿机属于同一个机构</p>\n<p>（2）分布式的，矿工和矿主不在同一个地方，矿工加入矿池，是通过矿池规定的通讯协议和矿主进行联系。矿主把要计算的哈希值的任务分配给矿工，矿工计算完成后把结果返回给矿主，有出块奖励时一起参与分红</p>\n<p>通过工作量证明，按照矿工的贡献大小分配收益：降低挖矿难度（减少目标域值前0的数量），符合条件的叫一个 share（almost valid block），挖到合法区块、得到出块奖励之后，矿主按照矿工 share 的数量来分配收益</p>\n<h3 id=\"1、矿工是否能偷出块奖励？\"><a href=\"#1、矿工是否能偷出块奖励？\" class=\"headerlink\" title=\"1、矿工是否能偷出块奖励？\"></a>1、矿工是否能偷出块奖励？</h3><p>矿工不可能挖到一个合法区块自己偷偷发布，因为矿工的任务由矿主分配，矿主负责组装区块，并把不同的 coinbase parameter 所对应的 nonce，交给不同的矿工尝试，而 coinbase transaction 里的收款人地址填的是矿主的地址</p>\n<h3 id=\"2、矿工是否能捣乱？\"><a href=\"#2、矿工是否能捣乱？\" class=\"headerlink\" title=\"2、矿工是否能捣乱？\"></a>2、矿工是否能捣乱？</h3><p>是可以的，比如 矿工正常提交 share，但是挖到合法区块之后就丢弃掉</p>\n<h3 id=\"3、矿池的弊端\"><a href=\"#3、矿池的弊端\" class=\"headerlink\" title=\"3、矿池的弊端\"></a>3、矿池的弊端</h3><p>恶意方可能吸引到足够多的矿工（不明真相的群众）加入，然后发动 51% attack：</p>\n<p>（1）Forking attack：制造分叉，因为算力高，迟早能赶超6个区块；</p>\n<p>（2）Boycott：制裁对象一挖出区块，就分叉，因为算力高，更容易使制裁对象的区块作废</p>\n<p>类似于云计算中的 on demand computing，平时不用自己去维护很大的计算集群，需要用的时候可以随时召唤，对于矿池来说就是 on demand mining</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、全节点\"><a href=\"#一、全节点\" class=\"headerlink\" title=\"一、全节点\"></a>一、全节点</h2><h3 id=\"1、一直在线\"><a href=\"#1、一直在线\" class=\"headerlink\" title=\"1、一直在线\"></a>1、一直在线</h3><h3 id=\"2、在本地硬盘上维护完整的区块链信息\"><a href=\"#2、在本地硬盘上维护完整的区块链信息\" class=\"headerlink\" title=\"2、在本地硬盘上维护完整的区块链信息\"></a>2、在本地硬盘上维护完整的区块链信息</h3><h3 id=\"3、在内存里维护-UTXO-集合，以便快速检验交易的正确性\"><a href=\"#3、在内存里维护-UTXO-集合，以便快速检验交易的正确性\" class=\"headerlink\" title=\"3、在内存里维护 UTXO 集合，以便快速检验交易的正确性\"></a>3、在内存里维护 UTXO 集合，以便快速检验交易的正确性</h3><p>UTXO（unspent transaction output）</p>\n<h3 id=\"4、监听比特币网络上的交易信息，验证每个交易的合法性\"><a href=\"#4、监听比特币网络上的交易信息，验证每个交易的合法性\" class=\"headerlink\" title=\"4、监听比特币网络上的交易信息，验证每个交易的合法性\"></a>4、监听比特币网络上的交易信息，验证每个交易的合法性</h3><p>（1）是否有合法的签名</p>\n<p>（2）是不是 double spending</p>\n<h3 id=\"5、决定哪些交易会被打包到区块里\"><a href=\"#5、决定哪些交易会被打包到区块里\" class=\"headerlink\" title=\"5、决定哪些交易会被打包到区块里\"></a>5、决定哪些交易会被打包到区块里</h3><p>缺省状态下，只要是合法交易、并且交易费符合要求，就会被打包</p>\n<h3 id=\"6、-监听别的矿工挖出来的区块，验证其合法性\"><a href=\"#6、-监听别的矿工挖出来的区块，验证其合法性\" class=\"headerlink\" title=\"6、 监听别的矿工挖出来的区块，验证其合法性\"></a>6、 监听别的矿工挖出来的区块，验证其合法性</h3><p>（1）区块中的每个交易都要合法，包括铸币交易，比如是否篡改了出块奖励、发布的难度是否符合要求（block header 取哈希后，前面是否有足够多的 0；block header 里的难度目标域值是否设置正确）</p>\n<p>（2）全节点是否每两周调整挖矿难度</p>\n<p>（3）检查该区块是否在延伸最长合法链</p>\n<h3 id=\"7、挖矿\"><a href=\"#7、挖矿\" class=\"headerlink\" title=\"7、挖矿\"></a>7、挖矿</h3><h4 id=\"（1）决定沿着哪条链挖下去？\"><a href=\"#（1）决定沿着哪条链挖下去？\" class=\"headerlink\" title=\"（1）决定沿着哪条链挖下去？\"></a>（1）决定沿着哪条链挖下去？</h4><p>缺省情况下沿着最长合法链挖下去</p>\n<h4 id=\"（2）当出现等长的分叉的时候，选择哪一个分叉？\"><a href=\"#（2）当出现等长的分叉的时候，选择哪一个分叉？\" class=\"headerlink\" title=\"（2）当出现等长的分叉的时候，选择哪一个分叉？\"></a>（2）当出现等长的分叉的时候，选择哪一个分叉？</h4><p>缺省情况下选择最先听到的分叉</p>\n<h2 id=\"二、轻节点\"><a href=\"#二、轻节点\" class=\"headerlink\" title=\"二、轻节点\"></a>二、轻节点</h2><p>轻节点也叫做 spv client（simplified payment verification）</p>\n<h3 id=\"1、不是一直在线\"><a href=\"#1、不是一直在线\" class=\"headerlink\" title=\"1、不是一直在线\"></a>1、不是一直在线</h3><h3 id=\"2、不用保存整个区块链，只要保存每个区块的块头\"><a href=\"#2、不用保存整个区块链，只要保存每个区块的块头\" class=\"headerlink\" title=\"2、不用保存整个区块链，只要保存每个区块的块头\"></a>2、不用保存整个区块链，只要保存每个区块的块头</h3><p>大约是全节点的 1&#x2F;1000</p>\n<h3 id=\"3、不用保存全部交易，只保存与自己相关的交易\"><a href=\"#3、不用保存全部交易，只保存与自己相关的交易\" class=\"headerlink\" title=\"3、不用保存全部交易，只保存与自己相关的交易\"></a>3、不用保存全部交易，只保存与自己相关的交易</h3><h3 id=\"4、无法检验大多数交易的合法性，只能检验与自己相关-的那些交易的合法性\"><a href=\"#4、无法检验大多数交易的合法性，只能检验与自己相关-的那些交易的合法性\" class=\"headerlink\" title=\"4、无法检验大多数交易的合法性，只能检验与自己相关 的那些交易的合法性\"></a>4、无法检验大多数交易的合法性，只能检验与自己相关 的那些交易的合法性</h3><h3 id=\"5、无法检测网上发布的区块的正确性\"><a href=\"#5、无法检测网上发布的区块的正确性\" class=\"headerlink\" title=\"5、无法检测网上发布的区块的正确性\"></a>5、无法检测网上发布的区块的正确性</h3><h3 id=\"6、可以验证挖矿的难度\"><a href=\"#6、可以验证挖矿的难度\" class=\"headerlink\" title=\"6、可以验证挖矿的难度\"></a>6、可以验证挖矿的难度</h3><p>因为挖矿的时候，计算哈希值只用到了块头的信息</p>\n<h3 id=\"7、只能检测哪个是最长链，不知道哪个是最长合法链\"><a href=\"#7、只能检测哪个是最长链，不知道哪个是最长合法链\" class=\"headerlink\" title=\"7、只能检测哪个是最长链，不知道哪个是最长合法链\"></a>7、只能检测哪个是最长链，不知道哪个是最长合法链</h3><p>因为无法检测这条链上所包含的交易都是合法的（不过可以检测每个区块是否符合难度要求）</p>\n<h2 id=\"三、挖矿的注意事项\"><a href=\"#三、挖矿的注意事项\" class=\"headerlink\" title=\"三、挖矿的注意事项\"></a>三、挖矿的注意事项</h2><p>比特币网络中大部分节点都是轻节点，如果只想进行转账，而不进行挖矿，就不需要运行全节点、只需使用轻节点</p>\n<p>在挖矿过程中，如果监听到别人发布了一个区块，需要重新组装区块（block header 和 交易内容都有变化）、重新开始挖</p>\n<h2 id=\"四、比特币的安全性保证\"><a href=\"#四、比特币的安全性保证\" class=\"headerlink\" title=\"四、比特币的安全性保证\"></a>四、比特币的安全性保证</h2><h3 id=\"1、密码学\"><a href=\"#1、密码学\" class=\"headerlink\" title=\"1、密码学\"></a>1、密码学</h3><p>恶意节点拿不到私钥，就无法伪造签名，也就无法偷币</p>\n<h3 id=\"2、好节点占大部分算力\"><a href=\"#2、好节点占大部分算力\" class=\"headerlink\" title=\"2、好节点占大部分算力\"></a>2、好节点占大部分算力</h3><p>前提是系统中大部分算力的矿工是遵守协议的</p>\n<h2 id=\"五、挖矿趋势一：设备从通用到专用\"><a href=\"#五、挖矿趋势一：设备从通用到专用\" class=\"headerlink\" title=\"五、挖矿趋势一：设备从通用到专用\"></a>五、挖矿趋势一：设备从通用到专用</h2><h3 id=\"1、CPU\"><a href=\"#1、CPU\" class=\"headerlink\" title=\"1、CPU\"></a>1、CPU</h3><p>最早是用普通的 CPU &#x2F; 通用计算机 挖矿，但是这种方式无法充分利用内存</p>\n<h3 id=\"2、GPU\"><a href=\"#2、GPU\" class=\"headerlink\" title=\"2、GPU\"></a>2、GPU</h3><p>GPU 用于大规模的并行计算，比如深度学习大量的矩阵乘法，但也部分部件也无法充分利用（比如浮点数运算）</p>\n<h3 id=\"3、ASIC-芯片\"><a href=\"#3、ASIC-芯片\" class=\"headerlink\" title=\"3、ASIC 芯片\"></a>3、ASIC 芯片</h3><p>ASIC（Application Specific Integrated Circuit，专用集成电路），ASIC 芯片是专门为比特币挖矿计算哈希值而设计，性价比最高</p>\n<p>但是同一个芯片只能用于一种币的挖矿，除非两种币使用同一个 mining puzzle。有些新开发的币会使用已有币的 mining puzzle，进而吸引更多矿工，这叫做 merge mining</p>\n<p>购买 ASIC 矿机的时机很重要，因为过时得很快，现在一般需要提前预定。不良厂商可能会在矿机生产后的黄金两个月先自己挖矿，然后才卖给用户</p>\n<p>有些新型货币，设计的是 alternative mining puzzle，出发点是 ASIC resistance，目的是让通用计算机也能参与挖矿过程</p>\n<h2 id=\"六、挖矿趋势二：大型矿池的出现\"><a href=\"#六、挖矿趋势二：大型矿池的出现\" class=\"headerlink\" title=\"六、挖矿趋势二：大型矿池的出现\"></a>六、挖矿趋势二：大型矿池的出现</h2><p>矿池的出现是为了解决单个矿工收入不稳定的问题。矿池把矿工组织起来作为一个整体，其架构是：一个全节点驱动多个矿机</p>\n<p>一个矿池一般有一个 pool manager（矿主），下面连着很多 minner（矿工），矿工只负责通过 ASIC 芯片计算哈希值，全节点的其他职责都由矿主承担（比如监听网络上的交易，并将其打包成一个候选区块，同时监听是否有其他节点抢先发布区块）</p>\n<h3 id=\"矿池的收益分配\"><a href=\"#矿池的收益分配\" class=\"headerlink\" title=\"矿池的收益分配\"></a>矿池的收益分配</h3><p>矿池一般有两种组织形式：</p>\n<p>（1）类似大型数据中心，所有矿机属于同一个机构</p>\n<p>（2）分布式的，矿工和矿主不在同一个地方，矿工加入矿池，是通过矿池规定的通讯协议和矿主进行联系。矿主把要计算的哈希值的任务分配给矿工，矿工计算完成后把结果返回给矿主，有出块奖励时一起参与分红</p>\n<p>通过工作量证明，按照矿工的贡献大小分配收益：降低挖矿难度（减少目标域值前0的数量），符合条件的叫一个 share（almost valid block），挖到合法区块、得到出块奖励之后，矿主按照矿工 share 的数量来分配收益</p>\n<h3 id=\"1、矿工是否能偷出块奖励？\"><a href=\"#1、矿工是否能偷出块奖励？\" class=\"headerlink\" title=\"1、矿工是否能偷出块奖励？\"></a>1、矿工是否能偷出块奖励？</h3><p>矿工不可能挖到一个合法区块自己偷偷发布，因为矿工的任务由矿主分配，矿主负责组装区块，并把不同的 coinbase parameter 所对应的 nonce，交给不同的矿工尝试，而 coinbase transaction 里的收款人地址填的是矿主的地址</p>\n<h3 id=\"2、矿工是否能捣乱？\"><a href=\"#2、矿工是否能捣乱？\" class=\"headerlink\" title=\"2、矿工是否能捣乱？\"></a>2、矿工是否能捣乱？</h3><p>是可以的，比如 矿工正常提交 share，但是挖到合法区块之后就丢弃掉</p>\n<h3 id=\"3、矿池的弊端\"><a href=\"#3、矿池的弊端\" class=\"headerlink\" title=\"3、矿池的弊端\"></a>3、矿池的弊端</h3><p>恶意方可能吸引到足够多的矿工（不明真相的群众）加入，然后发动 51% attack：</p>\n<p>（1）Forking attack：制造分叉，因为算力高，迟早能赶超6个区块；</p>\n<p>（2）Boycott：制裁对象一挖出区块，就分叉，因为算力高，更容易使制裁对象的区块作废</p>\n<p>类似于云计算中的 on demand computing，平时不用自己去维护很大的计算集群，需要用的时候可以随时召唤，对于矿池来说就是 on demand mining</p>\n"},{"title":"北大-区块链技术与应用10-BTC分叉","date":"2025-01-14T15:33:21.000Z","_content":"\n## 一、State fork（状态分叉）\n\nState fork：对比特币当前的状态有分歧造成的分叉，比如两个区块几乎同时生成，造成的分叉\n\nForking attack 也属于 state fork，但是是人为故意的，所以也叫做 deliberate fork（故意分叉）\n\n## 二、Protocol fork（协议分叉）\n\nProtocol fork：比特币的协议发生改变（通过软件升级），有些节点由于各种原因可能暂时没有升级，从而造成的分叉\n\n根据对协议修改的内容的不同，可以分为 hard fork（硬分叉）和 soft fork（软分叉）\n\n### 1、Hard fork\n\n**新节点发布的区块，旧节点可能不认**\n\n1个交易约为250字节，一个区块约有 1000,000字节/250字节=4000个交易，每秒约有 4000/(60*10)≈7个交易，数量过少\n\n假设 Block size limit 从 1M 更新到 4M，大多数算力的节点更新了软件，但少部分未更新。只要仍有部分节点未更新软件，该分叉就不会消失\n\n#### Example：ETH & ETC\n\n2016年，以太坊的 DAO（去中心化自治组织）遭到黑客攻击，导致大量ETH被盗。部分成员支持通过硬分叉回滚交易、恢复被盗资金，而另一些成员认为这会破坏区块链的不可篡改性\n\n最终社区实施硬分叉，恢复到攻击前的状态，这条新链称为 Ethereum（ETH）；而反对硬分叉的用户继续使用原链，称为 Ethereum Classic（ETC），从此两种货币独立发展（通过chain ID 区分两条链）\n\n### 2、Soft fork\n\n**新节点发布的区块，旧节点仍会认可**\n\n假设 Block size limit 从 1M 更新到 0.5M，大多数算力的节点更新了软件，但少部分未更新。如果有节点不更新软件，可能会经常产生孤儿区块，所以最终所有节点都会更新，分叉不会继续延展\n\n#### Example：P2SH（Pay to Script Hash）\n\nP2SH 的验证分为两步：（1）验证输入脚本给出的赎回脚本，和前一个交易的输出脚本给出的 赎回脚本的哈希值 对得上；（2）执行赎回脚本，验证输入脚本给出的签名是合法的\n\n对于旧节点来说，只会进行第一阶段的认证；所以新节点认为合法的区块，旧节点仍然会认可\n\n### 3、总结\n\n（1）Soft fork：只要系统有半数以上的节点更新，就不会有永久的分叉\n\n（2）Hard fork：如果不是所有的节点都更新了，就会有永久的分叉。根本原因是旧节点不认可新链（不是合法最长链），所以会按照旧链执行\n","source":"_posts/39-北大区块链-BTC分叉.md","raw":"---\ntitle: 北大-区块链技术与应用10-BTC分叉\ndate: 2025-01-14 23:33:21\ntags:\n    - web3\n    - BTC\ncategories:\n    - Web3\n      - 北大肖臻-区块链技术与应用\n---\n\n## 一、State fork（状态分叉）\n\nState fork：对比特币当前的状态有分歧造成的分叉，比如两个区块几乎同时生成，造成的分叉\n\nForking attack 也属于 state fork，但是是人为故意的，所以也叫做 deliberate fork（故意分叉）\n\n## 二、Protocol fork（协议分叉）\n\nProtocol fork：比特币的协议发生改变（通过软件升级），有些节点由于各种原因可能暂时没有升级，从而造成的分叉\n\n根据对协议修改的内容的不同，可以分为 hard fork（硬分叉）和 soft fork（软分叉）\n\n### 1、Hard fork\n\n**新节点发布的区块，旧节点可能不认**\n\n1个交易约为250字节，一个区块约有 1000,000字节/250字节=4000个交易，每秒约有 4000/(60*10)≈7个交易，数量过少\n\n假设 Block size limit 从 1M 更新到 4M，大多数算力的节点更新了软件，但少部分未更新。只要仍有部分节点未更新软件，该分叉就不会消失\n\n#### Example：ETH & ETC\n\n2016年，以太坊的 DAO（去中心化自治组织）遭到黑客攻击，导致大量ETH被盗。部分成员支持通过硬分叉回滚交易、恢复被盗资金，而另一些成员认为这会破坏区块链的不可篡改性\n\n最终社区实施硬分叉，恢复到攻击前的状态，这条新链称为 Ethereum（ETH）；而反对硬分叉的用户继续使用原链，称为 Ethereum Classic（ETC），从此两种货币独立发展（通过chain ID 区分两条链）\n\n### 2、Soft fork\n\n**新节点发布的区块，旧节点仍会认可**\n\n假设 Block size limit 从 1M 更新到 0.5M，大多数算力的节点更新了软件，但少部分未更新。如果有节点不更新软件，可能会经常产生孤儿区块，所以最终所有节点都会更新，分叉不会继续延展\n\n#### Example：P2SH（Pay to Script Hash）\n\nP2SH 的验证分为两步：（1）验证输入脚本给出的赎回脚本，和前一个交易的输出脚本给出的 赎回脚本的哈希值 对得上；（2）执行赎回脚本，验证输入脚本给出的签名是合法的\n\n对于旧节点来说，只会进行第一阶段的认证；所以新节点认为合法的区块，旧节点仍然会认可\n\n### 3、总结\n\n（1）Soft fork：只要系统有半数以上的节点更新，就不会有永久的分叉\n\n（2）Hard fork：如果不是所有的节点都更新了，就会有永久的分叉。根本原因是旧节点不认可新链（不是合法最长链），所以会按照旧链执行\n","slug":"39-北大区块链-BTC分叉","published":1,"updated":"2025-01-15T03:10:26.613Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5xkxz3i0005h1fy2flufknf","content":"<h2 id=\"一、State-fork（状态分叉）\"><a href=\"#一、State-fork（状态分叉）\" class=\"headerlink\" title=\"一、State fork（状态分叉）\"></a>一、State fork（状态分叉）</h2><p>State fork：对比特币当前的状态有分歧造成的分叉，比如两个区块几乎同时生成，造成的分叉</p>\n<p>Forking attack 也属于 state fork，但是是人为故意的，所以也叫做 deliberate fork（故意分叉）</p>\n<h2 id=\"二、Protocol-fork（协议分叉）\"><a href=\"#二、Protocol-fork（协议分叉）\" class=\"headerlink\" title=\"二、Protocol fork（协议分叉）\"></a>二、Protocol fork（协议分叉）</h2><p>Protocol fork：比特币的协议发生改变（通过软件升级），有些节点由于各种原因可能暂时没有升级，从而造成的分叉</p>\n<p>根据对协议修改的内容的不同，可以分为 hard fork（硬分叉）和 soft fork（软分叉）</p>\n<h3 id=\"1、Hard-fork\"><a href=\"#1、Hard-fork\" class=\"headerlink\" title=\"1、Hard fork\"></a>1、Hard fork</h3><p><strong>新节点发布的区块，旧节点可能不认</strong></p>\n<p>1个交易约为250字节，一个区块约有 1000,000字节&#x2F;250字节&#x3D;4000个交易，每秒约有 4000&#x2F;(60*10)≈7个交易，数量过少</p>\n<p>假设 Block size limit 从 1M 更新到 4M，大多数算力的节点更新了软件，但少部分未更新。只要仍有部分节点未更新软件，该分叉就不会消失</p>\n<h4 id=\"Example：ETH-ETC\"><a href=\"#Example：ETH-ETC\" class=\"headerlink\" title=\"Example：ETH &amp; ETC\"></a>Example：ETH &amp; ETC</h4><p>2016年，以太坊的 DAO（去中心化自治组织）遭到黑客攻击，导致大量ETH被盗。部分成员支持通过硬分叉回滚交易、恢复被盗资金，而另一些成员认为这会破坏区块链的不可篡改性</p>\n<p>最终社区实施硬分叉，恢复到攻击前的状态，这条新链称为 Ethereum（ETH）；而反对硬分叉的用户继续使用原链，称为 Ethereum Classic（ETC），从此两种货币独立发展（通过chain ID 区分两条链）</p>\n<h3 id=\"2、Soft-fork\"><a href=\"#2、Soft-fork\" class=\"headerlink\" title=\"2、Soft fork\"></a>2、Soft fork</h3><p><strong>新节点发布的区块，旧节点仍会认可</strong></p>\n<p>假设 Block size limit 从 1M 更新到 0.5M，大多数算力的节点更新了软件，但少部分未更新。如果有节点不更新软件，可能会经常产生孤儿区块，所以最终所有节点都会更新，分叉不会继续延展</p>\n<h4 id=\"Example：P2SH（Pay-to-Script-Hash）\"><a href=\"#Example：P2SH（Pay-to-Script-Hash）\" class=\"headerlink\" title=\"Example：P2SH（Pay to Script Hash）\"></a>Example：P2SH（Pay to Script Hash）</h4><p>P2SH 的验证分为两步：（1）验证输入脚本给出的赎回脚本，和前一个交易的输出脚本给出的 赎回脚本的哈希值 对得上；（2）执行赎回脚本，验证输入脚本给出的签名是合法的</p>\n<p>对于旧节点来说，只会进行第一阶段的认证；所以新节点认为合法的区块，旧节点仍然会认可</p>\n<h3 id=\"3、总结\"><a href=\"#3、总结\" class=\"headerlink\" title=\"3、总结\"></a>3、总结</h3><p>（1）Soft fork：只要系统有半数以上的节点更新，就不会有永久的分叉</p>\n<p>（2）Hard fork：如果不是所有的节点都更新了，就会有永久的分叉。根本原因是旧节点不认可新链（不是合法最长链），所以会按照旧链执行</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、State-fork（状态分叉）\"><a href=\"#一、State-fork（状态分叉）\" class=\"headerlink\" title=\"一、State fork（状态分叉）\"></a>一、State fork（状态分叉）</h2><p>State fork：对比特币当前的状态有分歧造成的分叉，比如两个区块几乎同时生成，造成的分叉</p>\n<p>Forking attack 也属于 state fork，但是是人为故意的，所以也叫做 deliberate fork（故意分叉）</p>\n<h2 id=\"二、Protocol-fork（协议分叉）\"><a href=\"#二、Protocol-fork（协议分叉）\" class=\"headerlink\" title=\"二、Protocol fork（协议分叉）\"></a>二、Protocol fork（协议分叉）</h2><p>Protocol fork：比特币的协议发生改变（通过软件升级），有些节点由于各种原因可能暂时没有升级，从而造成的分叉</p>\n<p>根据对协议修改的内容的不同，可以分为 hard fork（硬分叉）和 soft fork（软分叉）</p>\n<h3 id=\"1、Hard-fork\"><a href=\"#1、Hard-fork\" class=\"headerlink\" title=\"1、Hard fork\"></a>1、Hard fork</h3><p><strong>新节点发布的区块，旧节点可能不认</strong></p>\n<p>1个交易约为250字节，一个区块约有 1000,000字节&#x2F;250字节&#x3D;4000个交易，每秒约有 4000&#x2F;(60*10)≈7个交易，数量过少</p>\n<p>假设 Block size limit 从 1M 更新到 4M，大多数算力的节点更新了软件，但少部分未更新。只要仍有部分节点未更新软件，该分叉就不会消失</p>\n<h4 id=\"Example：ETH-ETC\"><a href=\"#Example：ETH-ETC\" class=\"headerlink\" title=\"Example：ETH &amp; ETC\"></a>Example：ETH &amp; ETC</h4><p>2016年，以太坊的 DAO（去中心化自治组织）遭到黑客攻击，导致大量ETH被盗。部分成员支持通过硬分叉回滚交易、恢复被盗资金，而另一些成员认为这会破坏区块链的不可篡改性</p>\n<p>最终社区实施硬分叉，恢复到攻击前的状态，这条新链称为 Ethereum（ETH）；而反对硬分叉的用户继续使用原链，称为 Ethereum Classic（ETC），从此两种货币独立发展（通过chain ID 区分两条链）</p>\n<h3 id=\"2、Soft-fork\"><a href=\"#2、Soft-fork\" class=\"headerlink\" title=\"2、Soft fork\"></a>2、Soft fork</h3><p><strong>新节点发布的区块，旧节点仍会认可</strong></p>\n<p>假设 Block size limit 从 1M 更新到 0.5M，大多数算力的节点更新了软件，但少部分未更新。如果有节点不更新软件，可能会经常产生孤儿区块，所以最终所有节点都会更新，分叉不会继续延展</p>\n<h4 id=\"Example：P2SH（Pay-to-Script-Hash）\"><a href=\"#Example：P2SH（Pay-to-Script-Hash）\" class=\"headerlink\" title=\"Example：P2SH（Pay to Script Hash）\"></a>Example：P2SH（Pay to Script Hash）</h4><p>P2SH 的验证分为两步：（1）验证输入脚本给出的赎回脚本，和前一个交易的输出脚本给出的 赎回脚本的哈希值 对得上；（2）执行赎回脚本，验证输入脚本给出的签名是合法的</p>\n<p>对于旧节点来说，只会进行第一阶段的认证；所以新节点认为合法的区块，旧节点仍然会认可</p>\n<h3 id=\"3、总结\"><a href=\"#3、总结\" class=\"headerlink\" title=\"3、总结\"></a>3、总结</h3><p>（1）Soft fork：只要系统有半数以上的节点更新，就不会有永久的分叉</p>\n<p>（2）Hard fork：如果不是所有的节点都更新了，就会有永久的分叉。根本原因是旧节点不认可新链（不是合法最长链），所以会按照旧链执行</p>\n"},{"title":"北大-区块链技术与应用11-课堂回答","date":"2025-01-15T03:11:13.000Z","_content":"\n略（基本没有新东西），详情可参考课程视频：\n\n`https://www.bilibili.com/video/BV1Vt411X7JF?spm_id_from=333.788.videopod.episodes&vd_source=69ac93649ea21c4726fe85f272b6d968&p=11`\n","source":"_posts/40-北大区块链-课堂回答.md","raw":"---\ntitle: 北大-区块链技术与应用11-课堂回答\ndate: 2025-01-15 11:11:13\ntags:\n    - web3\ncategories:\n    - Web3\n      - 北大肖臻-区块链技术与应用\n---\n\n略（基本没有新东西），详情可参考课程视频：\n\n`https://www.bilibili.com/video/BV1Vt411X7JF?spm_id_from=333.788.videopod.episodes&vd_source=69ac93649ea21c4726fe85f272b6d968&p=11`\n","slug":"40-北大区块链-课堂回答","published":1,"updated":"2025-01-15T07:27:26.046Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5xkxz3i0008h1fydicf5kmq","content":"<p>略（基本没有新东西），详情可参考课程视频：</p>\n<p><code>https://www.bilibili.com/video/BV1Vt411X7JF?spm_id_from=333.788.videopod.episodes&amp;vd_source=69ac93649ea21c4726fe85f272b6d968&amp;p=11</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>略（基本没有新东西），详情可参考课程视频：</p>\n<p><code>https://www.bilibili.com/video/BV1Vt411X7JF?spm_id_from=333.788.videopod.episodes&amp;vd_source=69ac93649ea21c4726fe85f272b6d968&amp;p=11</code></p>\n"},{"title":"北大-区块链技术与应用12-BTC的匿名性","date":"2025-01-15T07:26:10.000Z","_content":"\n","source":"_posts/41-北大区块链-BTC匿名性.md","raw":"---\ntitle: 北大-区块链技术与应用12-BTC的匿名性\ndate: 2025-01-15 15:26:10\ntags:\n    - web3\n    - BTC\ncategories:\n    - Web3\n      - 北大肖臻-区块链技术与应用\n---\n\n","slug":"41-北大区块链-BTC匿名性","published":1,"updated":"2025-01-15T07:26:41.349Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5xkxz3i000bh1fy94m38xvr","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"北大-区块链技术与应用9-BTC脚本","date":"2025-01-14T12:59:31.000Z","_content":"\n本节课较多用到 PPT 上的动画，视频链接如下：\n\n`https://www.bilibili.com/video/BV1Vt411X7JF?spm_id_from=333.788.player.switch&vd_source=69ac93649ea21c4726fe85f272b6d968&p=9`\n\n比特币使用的编程语言很简单，内存空间只有一个通用的堆栈\n\n![图1](../images/38/1.png)\n\n上述的输入脚本包含2个操作：分别把2个很长的数压入栈里\n\n输出脚本有2行，分别对应上面的2个输出，每个输出有自己单独的脚本\n\n# BTC 脚本校验方式\n\n假设 A->B，B->C，下面对 B 交易时币的来源做校验，有两种校验方式\n\n![图2](../images/38/2.png)\n\n## 1、P2PK（Pay to Public Key）\n\n```\ninput script:\n    PUSHDATA(Sig)\n\noutput script:\n    PUSHDATA(PubKey)\n    CHECKSIG\n```\n\n1、PUSHDATA(Sig)：把 B 的签名入栈——来自输入脚本\n\n2、PUSHDATA(PubKey)：把 B 的公钥入栈——来自输出脚本\n\n3、CHECKSIG：弹出栈顶的两个元素（公钥和签名），用公钥验签，通过则返回 TRUE\n\n## 2、P2PKH（Pay to Public Key Hash）——最常用\n\nP2PKH 与 P2PK 的区别是：输出脚本给出的不是公钥，而是公钥的哈希值；输入脚本除了签名外，还需要给出公钥\n\n```\ninput script:\n    PUSHDATA(Sig)\n    PUSHDATA(PubKey)\n\noutput script:\n    DUP\n    HASH160\n    PUSHDATA(PubKeyHash)\n    EQUALVERIFY\n    CHECKSIG\n```\n\n1、PUSHDATA(Sig)：把 B 的签名入栈——来自输入脚本\n\n2、PUSHDATA(PubKey)：把 B 的公钥入栈——来自输入脚本\n\n3、DUP：把栈顶的元素复制一遍（即 B 的公钥）\n\n4、HASH160：把栈顶元素弹出，并取哈希（即对 B 的公钥取哈希），然后把得到的哈希再压入栈\n\n5、PUSHDATA(PubKeyHash)：把 B 的公钥哈希入栈——来自输出脚本\n\n6、EQUALVERIFY 是弹出栈顶的两个元素（哈希值），并比较它们是否相等\n\n7、CHECKSIG：弹出栈顶的两个元素（公钥和签名），用公钥验签，通过则返回 TRUE\n\n## 3、P2SH（Pay to Script Hash）——最复杂\n\nP2SH 的特点是 input script 要提供一个 redeem script（赎回脚本）\n\nP2SH 常见的应用场景是对 multiple signature（多重签名，即一个输出要求多个签名才能把钱取出，目前已不推荐）的支持\n\n验证分为两个阶段：第一阶段按照输入脚本和输出脚本的顺序执行；第二阶段执行赎回脚本\n\n具体略，有点复杂，可简单理解为把 P2PKH 中的 PUSHDATA(PubKey) 和 CHECKSIG 提取成一个赎回脚本\n\n## 4、Proof of Burn\n\n```\noutput script:\n    RETURN\n        [Zero or more ops or text]\n```\n\n这种类型的输出被称为：Provably Unspendable（可证明不可花费） / Prunable Outputs（可删减输出）\n\n这个脚本是证明销毁掉比特币的一种方法，有两种应用场景：（1）有些小的币种要求销毁一定数量的比特币才能够得到该币，这种币叫做 AltCoin（Alternative Coin）；（2）往区块链中写入一些内容，比如 digital commitment，把知识产权取哈希放在 return 后面，可以证明在某个时间点知道某个知识，任何用户都可以通过销毁少量比特币（将币转到不存在的地址）、换取向区块链写入的机会（不提倡，因为该交易会永久保留在 UTXO 中，浪费资源）\n\n注意：以上的 CHECKSIG 全称是 OP_CHECKSIG，DUP 全程是 OP_DUP\n","source":"_posts/38-北大区块链-BTC脚本.md","raw":"---\ntitle: 北大-区块链技术与应用9-BTC脚本\ndate: 2025-01-14 20:59:31\ntags:\n    - web3\n    - BTC\ncategories:\n    - Web3\n      - 北大肖臻-区块链技术与应用\n---\n\n本节课较多用到 PPT 上的动画，视频链接如下：\n\n`https://www.bilibili.com/video/BV1Vt411X7JF?spm_id_from=333.788.player.switch&vd_source=69ac93649ea21c4726fe85f272b6d968&p=9`\n\n比特币使用的编程语言很简单，内存空间只有一个通用的堆栈\n\n![图1](../images/38/1.png)\n\n上述的输入脚本包含2个操作：分别把2个很长的数压入栈里\n\n输出脚本有2行，分别对应上面的2个输出，每个输出有自己单独的脚本\n\n# BTC 脚本校验方式\n\n假设 A->B，B->C，下面对 B 交易时币的来源做校验，有两种校验方式\n\n![图2](../images/38/2.png)\n\n## 1、P2PK（Pay to Public Key）\n\n```\ninput script:\n    PUSHDATA(Sig)\n\noutput script:\n    PUSHDATA(PubKey)\n    CHECKSIG\n```\n\n1、PUSHDATA(Sig)：把 B 的签名入栈——来自输入脚本\n\n2、PUSHDATA(PubKey)：把 B 的公钥入栈——来自输出脚本\n\n3、CHECKSIG：弹出栈顶的两个元素（公钥和签名），用公钥验签，通过则返回 TRUE\n\n## 2、P2PKH（Pay to Public Key Hash）——最常用\n\nP2PKH 与 P2PK 的区别是：输出脚本给出的不是公钥，而是公钥的哈希值；输入脚本除了签名外，还需要给出公钥\n\n```\ninput script:\n    PUSHDATA(Sig)\n    PUSHDATA(PubKey)\n\noutput script:\n    DUP\n    HASH160\n    PUSHDATA(PubKeyHash)\n    EQUALVERIFY\n    CHECKSIG\n```\n\n1、PUSHDATA(Sig)：把 B 的签名入栈——来自输入脚本\n\n2、PUSHDATA(PubKey)：把 B 的公钥入栈——来自输入脚本\n\n3、DUP：把栈顶的元素复制一遍（即 B 的公钥）\n\n4、HASH160：把栈顶元素弹出，并取哈希（即对 B 的公钥取哈希），然后把得到的哈希再压入栈\n\n5、PUSHDATA(PubKeyHash)：把 B 的公钥哈希入栈——来自输出脚本\n\n6、EQUALVERIFY 是弹出栈顶的两个元素（哈希值），并比较它们是否相等\n\n7、CHECKSIG：弹出栈顶的两个元素（公钥和签名），用公钥验签，通过则返回 TRUE\n\n## 3、P2SH（Pay to Script Hash）——最复杂\n\nP2SH 的特点是 input script 要提供一个 redeem script（赎回脚本）\n\nP2SH 常见的应用场景是对 multiple signature（多重签名，即一个输出要求多个签名才能把钱取出，目前已不推荐）的支持\n\n验证分为两个阶段：第一阶段按照输入脚本和输出脚本的顺序执行；第二阶段执行赎回脚本\n\n具体略，有点复杂，可简单理解为把 P2PKH 中的 PUSHDATA(PubKey) 和 CHECKSIG 提取成一个赎回脚本\n\n## 4、Proof of Burn\n\n```\noutput script:\n    RETURN\n        [Zero or more ops or text]\n```\n\n这种类型的输出被称为：Provably Unspendable（可证明不可花费） / Prunable Outputs（可删减输出）\n\n这个脚本是证明销毁掉比特币的一种方法，有两种应用场景：（1）有些小的币种要求销毁一定数量的比特币才能够得到该币，这种币叫做 AltCoin（Alternative Coin）；（2）往区块链中写入一些内容，比如 digital commitment，把知识产权取哈希放在 return 后面，可以证明在某个时间点知道某个知识，任何用户都可以通过销毁少量比特币（将币转到不存在的地址）、换取向区块链写入的机会（不提倡，因为该交易会永久保留在 UTXO 中，浪费资源）\n\n注意：以上的 CHECKSIG 全称是 OP_CHECKSIG，DUP 全程是 OP_DUP\n","slug":"38-北大区块链-BTC脚本","published":1,"updated":"2025-01-15T07:08:43.699Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5xkxz3i000eh1fya91qftw5","content":"<p>本节课较多用到 PPT 上的动画，视频链接如下：</p>\n<p><code>https://www.bilibili.com/video/BV1Vt411X7JF?spm_id_from=333.788.player.switch&amp;vd_source=69ac93649ea21c4726fe85f272b6d968&amp;p=9</code></p>\n<p>比特币使用的编程语言很简单，内存空间只有一个通用的堆栈</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/38/1.png\"\n                      alt=\"图1\"\n                ></p>\n<p>上述的输入脚本包含2个操作：分别把2个很长的数压入栈里</p>\n<p>输出脚本有2行，分别对应上面的2个输出，每个输出有自己单独的脚本</p>\n<h1 id=\"BTC-脚本校验方式\"><a href=\"#BTC-脚本校验方式\" class=\"headerlink\" title=\"BTC 脚本校验方式\"></a>BTC 脚本校验方式</h1><p>假设 A-&gt;B，B-&gt;C，下面对 B 交易时币的来源做校验，有两种校验方式</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/38/2.png\"\n                      alt=\"图2\"\n                ></p>\n<h2 id=\"1、P2PK（Pay-to-Public-Key）\"><a href=\"#1、P2PK（Pay-to-Public-Key）\" class=\"headerlink\" title=\"1、P2PK（Pay to Public Key）\"></a>1、P2PK（Pay to Public Key）</h2><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input script:</span><br><span class=\"line\">    PUSHDATA(Sig)</span><br><span class=\"line\"></span><br><span class=\"line\">output script:</span><br><span class=\"line\">    PUSHDATA(PubKey)</span><br><span class=\"line\">    CHECKSIG</span><br></pre></td></tr></table></figure></div>\n\n<p>1、PUSHDATA(Sig)：把 B 的签名入栈——来自输入脚本</p>\n<p>2、PUSHDATA(PubKey)：把 B 的公钥入栈——来自输出脚本</p>\n<p>3、CHECKSIG：弹出栈顶的两个元素（公钥和签名），用公钥验签，通过则返回 TRUE</p>\n<h2 id=\"2、P2PKH（Pay-to-Public-Key-Hash）——最常用\"><a href=\"#2、P2PKH（Pay-to-Public-Key-Hash）——最常用\" class=\"headerlink\" title=\"2、P2PKH（Pay to Public Key Hash）——最常用\"></a>2、P2PKH（Pay to Public Key Hash）——最常用</h2><p>P2PKH 与 P2PK 的区别是：输出脚本给出的不是公钥，而是公钥的哈希值；输入脚本除了签名外，还需要给出公钥</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input script:</span><br><span class=\"line\">    PUSHDATA(Sig)</span><br><span class=\"line\">    PUSHDATA(PubKey)</span><br><span class=\"line\"></span><br><span class=\"line\">output script:</span><br><span class=\"line\">    DUP</span><br><span class=\"line\">    HASH160</span><br><span class=\"line\">    PUSHDATA(PubKeyHash)</span><br><span class=\"line\">    EQUALVERIFY</span><br><span class=\"line\">    CHECKSIG</span><br></pre></td></tr></table></figure></div>\n\n<p>1、PUSHDATA(Sig)：把 B 的签名入栈——来自输入脚本</p>\n<p>2、PUSHDATA(PubKey)：把 B 的公钥入栈——来自输入脚本</p>\n<p>3、DUP：把栈顶的元素复制一遍（即 B 的公钥）</p>\n<p>4、HASH160：把栈顶元素弹出，并取哈希（即对 B 的公钥取哈希），然后把得到的哈希再压入栈</p>\n<p>5、PUSHDATA(PubKeyHash)：把 B 的公钥哈希入栈——来自输出脚本</p>\n<p>6、EQUALVERIFY 是弹出栈顶的两个元素（哈希值），并比较它们是否相等</p>\n<p>7、CHECKSIG：弹出栈顶的两个元素（公钥和签名），用公钥验签，通过则返回 TRUE</p>\n<h2 id=\"3、P2SH（Pay-to-Script-Hash）——最复杂\"><a href=\"#3、P2SH（Pay-to-Script-Hash）——最复杂\" class=\"headerlink\" title=\"3、P2SH（Pay to Script Hash）——最复杂\"></a>3、P2SH（Pay to Script Hash）——最复杂</h2><p>P2SH 的特点是 input script 要提供一个 redeem script（赎回脚本）</p>\n<p>P2SH 常见的应用场景是对 multiple signature（多重签名，即一个输出要求多个签名才能把钱取出，目前已不推荐）的支持</p>\n<p>验证分为两个阶段：第一阶段按照输入脚本和输出脚本的顺序执行；第二阶段执行赎回脚本</p>\n<p>具体略，有点复杂，可简单理解为把 P2PKH 中的 PUSHDATA(PubKey) 和 CHECKSIG 提取成一个赎回脚本</p>\n<h2 id=\"4、Proof-of-Burn\"><a href=\"#4、Proof-of-Burn\" class=\"headerlink\" title=\"4、Proof of Burn\"></a>4、Proof of Burn</h2><div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output script:</span><br><span class=\"line\">    RETURN</span><br><span class=\"line\">        [Zero or more ops or text]</span><br></pre></td></tr></table></figure></div>\n\n<p>这种类型的输出被称为：Provably Unspendable（可证明不可花费） &#x2F; Prunable Outputs（可删减输出）</p>\n<p>这个脚本是证明销毁掉比特币的一种方法，有两种应用场景：（1）有些小的币种要求销毁一定数量的比特币才能够得到该币，这种币叫做 AltCoin（Alternative Coin）；（2）往区块链中写入一些内容，比如 digital commitment，把知识产权取哈希放在 return 后面，可以证明在某个时间点知道某个知识，任何用户都可以通过销毁少量比特币（将币转到不存在的地址）、换取向区块链写入的机会（不提倡，因为该交易会永久保留在 UTXO 中，浪费资源）</p>\n<p>注意：以上的 CHECKSIG 全称是 OP_CHECKSIG，DUP 全程是 OP_DUP</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本节课较多用到 PPT 上的动画，视频链接如下：</p>\n<p><code>https://www.bilibili.com/video/BV1Vt411X7JF?spm_id_from=333.788.player.switch&amp;vd_source=69ac93649ea21c4726fe85f272b6d968&amp;p=9</code></p>\n<p>比特币使用的编程语言很简单，内存空间只有一个通用的堆栈</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/38/1.png\"\n                      alt=\"图1\"\n                ></p>\n<p>上述的输入脚本包含2个操作：分别把2个很长的数压入栈里</p>\n<p>输出脚本有2行，分别对应上面的2个输出，每个输出有自己单独的脚本</p>\n<h1 id=\"BTC-脚本校验方式\"><a href=\"#BTC-脚本校验方式\" class=\"headerlink\" title=\"BTC 脚本校验方式\"></a>BTC 脚本校验方式</h1><p>假设 A-&gt;B，B-&gt;C，下面对 B 交易时币的来源做校验，有两种校验方式</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/38/2.png\"\n                      alt=\"图2\"\n                ></p>\n<h2 id=\"1、P2PK（Pay-to-Public-Key）\"><a href=\"#1、P2PK（Pay-to-Public-Key）\" class=\"headerlink\" title=\"1、P2PK（Pay to Public Key）\"></a>1、P2PK（Pay to Public Key）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input script:</span><br><span class=\"line\">    PUSHDATA(Sig)</span><br><span class=\"line\"></span><br><span class=\"line\">output script:</span><br><span class=\"line\">    PUSHDATA(PubKey)</span><br><span class=\"line\">    CHECKSIG</span><br></pre></td></tr></table></figure>\n\n<p>1、PUSHDATA(Sig)：把 B 的签名入栈——来自输入脚本</p>\n<p>2、PUSHDATA(PubKey)：把 B 的公钥入栈——来自输出脚本</p>\n<p>3、CHECKSIG：弹出栈顶的两个元素（公钥和签名），用公钥验签，通过则返回 TRUE</p>\n<h2 id=\"2、P2PKH（Pay-to-Public-Key-Hash）——最常用\"><a href=\"#2、P2PKH（Pay-to-Public-Key-Hash）——最常用\" class=\"headerlink\" title=\"2、P2PKH（Pay to Public Key Hash）——最常用\"></a>2、P2PKH（Pay to Public Key Hash）——最常用</h2><p>P2PKH 与 P2PK 的区别是：输出脚本给出的不是公钥，而是公钥的哈希值；输入脚本除了签名外，还需要给出公钥</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input script:</span><br><span class=\"line\">    PUSHDATA(Sig)</span><br><span class=\"line\">    PUSHDATA(PubKey)</span><br><span class=\"line\"></span><br><span class=\"line\">output script:</span><br><span class=\"line\">    DUP</span><br><span class=\"line\">    HASH160</span><br><span class=\"line\">    PUSHDATA(PubKeyHash)</span><br><span class=\"line\">    EQUALVERIFY</span><br><span class=\"line\">    CHECKSIG</span><br></pre></td></tr></table></figure>\n\n<p>1、PUSHDATA(Sig)：把 B 的签名入栈——来自输入脚本</p>\n<p>2、PUSHDATA(PubKey)：把 B 的公钥入栈——来自输入脚本</p>\n<p>3、DUP：把栈顶的元素复制一遍（即 B 的公钥）</p>\n<p>4、HASH160：把栈顶元素弹出，并取哈希（即对 B 的公钥取哈希），然后把得到的哈希再压入栈</p>\n<p>5、PUSHDATA(PubKeyHash)：把 B 的公钥哈希入栈——来自输出脚本</p>\n<p>6、EQUALVERIFY 是弹出栈顶的两个元素（哈希值），并比较它们是否相等</p>\n<p>7、CHECKSIG：弹出栈顶的两个元素（公钥和签名），用公钥验签，通过则返回 TRUE</p>\n<h2 id=\"3、P2SH（Pay-to-Script-Hash）——最复杂\"><a href=\"#3、P2SH（Pay-to-Script-Hash）——最复杂\" class=\"headerlink\" title=\"3、P2SH（Pay to Script Hash）——最复杂\"></a>3、P2SH（Pay to Script Hash）——最复杂</h2><p>P2SH 的特点是 input script 要提供一个 redeem script（赎回脚本）</p>\n<p>P2SH 常见的应用场景是对 multiple signature（多重签名，即一个输出要求多个签名才能把钱取出，目前已不推荐）的支持</p>\n<p>验证分为两个阶段：第一阶段按照输入脚本和输出脚本的顺序执行；第二阶段执行赎回脚本</p>\n<p>具体略，有点复杂，可简单理解为把 P2PKH 中的 PUSHDATA(PubKey) 和 CHECKSIG 提取成一个赎回脚本</p>\n<h2 id=\"4、Proof-of-Burn\"><a href=\"#4、Proof-of-Burn\" class=\"headerlink\" title=\"4、Proof of Burn\"></a>4、Proof of Burn</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output script:</span><br><span class=\"line\">    RETURN</span><br><span class=\"line\">        [Zero or more ops or text]</span><br></pre></td></tr></table></figure>\n\n<p>这种类型的输出被称为：Provably Unspendable（可证明不可花费） &#x2F; Prunable Outputs（可删减输出）</p>\n<p>这个脚本是证明销毁掉比特币的一种方法，有两种应用场景：（1）有些小的币种要求销毁一定数量的比特币才能够得到该币，这种币叫做 AltCoin（Alternative Coin）；（2）往区块链中写入一些内容，比如 digital commitment，把知识产权取哈希放在 return 后面，可以证明在某个时间点知道某个知识，任何用户都可以通过销毁少量比特币（将币转到不存在的地址）、换取向区块链写入的机会（不提倡，因为该交易会永久保留在 UTXO 中，浪费资源）</p>\n<p>注意：以上的 CHECKSIG 全称是 OP_CHECKSIG，DUP 全程是 OP_DUP</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clomnjwvc000fm5w68cc8bqrv","category_id":"clomnfqd60008m5w6ejsc6la0","_id":"clomnjwvd000hm5w65tvs8k4h"},{"post_id":"clomnki9v000im5w67a9mafk9","category_id":"clomnfqd60008m5w6ejsc6la0","_id":"clomorpvy000km5w66th6h1sr"},{"post_id":"cloy7augf0001blw601xvetqn","category_id":"clomnfqd60008m5w6ejsc6la0","_id":"cloy7augg0005blw62097dbmp"},{"post_id":"cloy7augi000dblw60i4q3j4o","category_id":"cloy7augi000eblw6bj2j9q3l","_id":"cloy7augi000hblw6bs520kxj"},{"post_id":"clpj6vfnn00007uw6eiabhjv2","category_id":"cloy7augi000eblw6bj2j9q3l","_id":"clpj6vfnr00057uw6fbko2r1i"},{"post_id":"clpj6vfnn00007uw6eiabhjv2","category_id":"clpj6vfno00037uw664nhch3a","_id":"clpj6vfnr00067uw67uovgstz"},{"post_id":"clpl36b6u000059w6aufu8ufh","category_id":"clpl36b6y000659w6a6si3o5a","_id":"clpl36b6z000a59w6etst3cr0"},{"post_id":"clprrpltr00019ww6gvarfi6m","category_id":"clomnfqd60008m5w6ejsc6la0","_id":"clprrplts00069ww66zbhd007"},{"post_id":"clq0s4b7h00005dw67395ev3g","category_id":"clomnfqd60008m5w6ejsc6la0","_id":"clq0s4b7k00055dw65of3apt1"},{"post_id":"clq0s4b7j00015dw62cca8kw4","category_id":"clomnfqd60008m5w6ejsc6la0","_id":"clq0s4b7k00075dw68dza6uri"},{"post_id":"clq0s4b7k00035dw6g57045bg","category_id":"clomnfqd60008m5w6ejsc6la0","_id":"clq0s4b7k00095dw645dxgm3e"},{"post_id":"clq6lxtzm0000lbw6bfszev06","category_id":"clomnfqd60008m5w6ejsc6la0","_id":"clq6lxtzo0005lbw6dhdhhyvz"},{"post_id":"clprrpltp00009ww69lob2abv","category_id":"clqls3vve0000ovw6eaut5x6x","_id":"clqls3vvi0001ovw6beuffwju"},{"post_id":"clq6lxtzn0001lbw6flcf0gn4","category_id":"clomnfqd60008m5w6ejsc6la0","_id":"clqls3vvj0006ovw6bir47ibt"},{"post_id":"clq6lxtzo0003lbw63a4i1duv","category_id":"clomnfqd60008m5w6ejsc6la0","_id":"clqls3vvj0008ovw6041n8vbl"},{"post_id":"clqls3vvi0003ovw65nlf8a3u","category_id":"clomnfqd60008m5w6ejsc6la0","_id":"clqls3vvk000aovw60n1p4cuq"},{"post_id":"clqls3vvj0005ovw662xr0l17","category_id":"clqls3vve0000ovw6eaut5x6x","_id":"clqls3vvk000covw64p7n1nmx"},{"post_id":"clomn21kc0005m5w60q8kcman","category_id":"clqls3vve0000ovw6eaut5x6x","_id":"clqls3vvl000eovw6e9um6g8b"},{"post_id":"clpj6vfno00017uw61ro9869t","category_id":"clqls3vve0000ovw6eaut5x6x","_id":"clqls3vvm000govw63sfv3jla"},{"post_id":"clpl36b6x000359w69m8dg8y3","category_id":"clqls3vve0000ovw6eaut5x6x","_id":"clqls3vvm000hovw60sa6331f"},{"post_id":"cm22ma9wx00009zw6ctwyamrt","category_id":"clomnfqd60008m5w6ejsc6la0","_id":"cm22ma9x000049zw69uf2752n"},{"post_id":"cm22ma9wz00019zw663lu8o7g","category_id":"cm28lqmpc0000lyw6d0pw52ah","_id":"cm28lqmpg0003lyw67lq95rax"},{"post_id":"cm28ok88d0000eww60xuf3yim","category_id":"cm28ok88g0001eww616og8w14","_id":"cm28ok88i0005eww6cx591ivr"},{"post_id":"cm2bos5uv0000dow62cxr6472","category_id":"cm28ok88g0001eww616og8w14","_id":"cm2bos5uz0002dow6877zg3je"},{"post_id":"cm2buup6v0000ihw6h51eb5lr","category_id":"cm2buup6w0001ihw695zb23eq","_id":"cm2buup6z0008ihw64ms30tyo"},{"post_id":"cm2buup6v0000ihw6h51eb5lr","category_id":"cm2buup6y0004ihw64nuc5tni","_id":"cm2buup6z000aihw6a3n99qxw"},{"post_id":"cm2iekyw20000g1w6b20dd9f0","category_id":"cm2iekyw30001g1w60ae2b4be","_id":"cm2iekyw60005g1w65qfufat0"},{"post_id":"cm32f4ppl0000s4w602ky1eqy","category_id":"cm32f4ppn0001s4w6a7hrape8","_id":"cm32f4ppq0005s4w68g8caooy"},{"post_id":"cm38m0cxh00024ew6911t3j9b","category_id":"cm38m0cxk00054ew67r7l8c2p","_id":"cm38m0cxl000b4ew61qc22azg"},{"post_id":"cm38m0cxl000d4ew6etf6fdjc","category_id":"cm38m0cxk00054ew67r7l8c2p","_id":"cm38m0cxm000g4ew69qiccoah"},{"post_id":"cm5firt1p0004zww6djlfdi26","category_id":"cm5firt1l0002zww6ca5pf45u","_id":"cm5firt1q0007zww6c304gqd1"},{"post_id":"cm5firt1i0000zww62fyh72ym","category_id":"cm5firt1l0002zww6ca5pf45u","_id":"cm5firt1q000azww60lv86fcz"},{"post_id":"cm5firt1k0001zww68igh4k6v","category_id":"cm5firt1l0002zww6ca5pf45u","_id":"cm5firt1q000czww6bale9lj3"},{"post_id":"cm5evjs7600001kw61yjfd9mi","category_id":"cm5firt1l0002zww6ca5pf45u","_id":"cm5firt1r000fzww634em0aeb"},{"post_id":"cm5tr3icr0000gafygo4qgwhh","category_id":"cm5firt1l0002zww6ca5pf45u","_id":"cm5tr3icu0002gafy59buci4f"},{"post_id":"cm5xkxz3h0000h1fy985h5vlw","category_id":"cm5firt1l0002zww6ca5pf45u","_id":"cm5xkxz3i0006h1fy8yk9g2dj"},{"post_id":"cm5xkxz3h0001h1fy58vs1duk","category_id":"cm5firt1l0002zww6ca5pf45u","_id":"cm5xkxz3i0009h1fy6f6m3l8w"},{"post_id":"cm5xkxz3h0003h1fy5ur6am7q","category_id":"cm5firt1l0002zww6ca5pf45u","_id":"cm5xkxz3i000ch1fy5n631wbp"},{"post_id":"cm5xkxz3i0005h1fy2flufknf","category_id":"cm5firt1l0002zww6ca5pf45u","_id":"cm5xkxz3j000fh1fybakpaxke"},{"post_id":"cm5xkxz3i0008h1fydicf5kmq","category_id":"cm5firt1l0002zww6ca5pf45u","_id":"cm5xkxz3j000hh1fyfi7ugbm7"},{"post_id":"cm5xkxz3i000bh1fy94m38xvr","category_id":"cm5firt1l0002zww6ca5pf45u","_id":"cm5xkxz3j000jh1fyhkgrhmtx"},{"post_id":"cm5xkxz3i000eh1fya91qftw5","category_id":"cm5firt1l0002zww6ca5pf45u","_id":"cm5xkxz3j000lh1fyagmtd362"}],"PostTag":[{"post_id":"cloy7augf0001blw601xvetqn","tag_id":"clomklku40001kxw63zegd3sg","_id":"cloy7augg0003blw66mj7adyv"},{"post_id":"cloy7augf0001blw601xvetqn","tag_id":"cloy7augd0000blw6f1h753y9","_id":"cloy7augg0004blw67kl64lie"},{"post_id":"clomnjwvc000fm5w68cc8bqrv","tag_id":"clomklku40001kxw63zegd3sg","_id":"cloy7augh0007blw61bynaxw2"},{"post_id":"clomnjwvc000fm5w68cc8bqrv","tag_id":"cloy7augd0000blw6f1h753y9","_id":"cloy7augh0008blw6evavgya1"},{"post_id":"clomn21kc0005m5w60q8kcman","tag_id":"cloy7augd0000blw6f1h753y9","_id":"cloy7augh000ablw6b1j59p1v"},{"post_id":"clomnki9v000im5w67a9mafk9","tag_id":"clomklku40001kxw63zegd3sg","_id":"cloy7augh000bblw6bfyx3gh8"},{"post_id":"clomnki9v000im5w67a9mafk9","tag_id":"cloy7augd0000blw6f1h753y9","_id":"cloy7augh000cblw6gn0fc9iu"},{"post_id":"cloy7augi000dblw60i4q3j4o","tag_id":"cloy7augd0000blw6f1h753y9","_id":"cloy7augi000fblw6g1qobvxf"},{"post_id":"clpj6vfnn00007uw6eiabhjv2","tag_id":"clomklku40001kxw63zegd3sg","_id":"clpj6vfno00027uw65t4khrxb"},{"post_id":"clpj6vfnn00007uw6eiabhjv2","tag_id":"cloy7augd0000blw6f1h753y9","_id":"clpj6vfnq00047uw6dkx2bxvg"},{"post_id":"clpj6vfno00017uw61ro9869t","tag_id":"cloy7augd0000blw6f1h753y9","_id":"clpl36b6x000259w656gxfv8a"},{"post_id":"clpl36b6x000359w69m8dg8y3","tag_id":"cloy7augd0000blw6f1h753y9","_id":"clpl36b6y000559w6hjty50jq"},{"post_id":"clpl36b6u000059w6aufu8ufh","tag_id":"clpl36b6x000459w61wlg22ym","_id":"clpl36b6y000759w6gefcb9x5"},{"post_id":"clprrpltp00009ww69lob2abv","tag_id":"cloy7augd0000blw6f1h753y9","_id":"clprrplts00029ww6c7m1afki"},{"post_id":"clprrpltr00019ww6gvarfi6m","tag_id":"clomklku40001kxw63zegd3sg","_id":"clprrplts00039ww6a7xqe5hh"},{"post_id":"clprrpltr00019ww6gvarfi6m","tag_id":"cloy7augd0000blw6f1h753y9","_id":"clprrplts00059ww69im20ase"},{"post_id":"clq0s4b7h00005dw67395ev3g","tag_id":"clomklku40001kxw63zegd3sg","_id":"clq0s4b7j00025dw69fevfzai"},{"post_id":"clq0s4b7h00005dw67395ev3g","tag_id":"cloy7augd0000blw6f1h753y9","_id":"clq0s4b7k00045dw6ayec9rrp"},{"post_id":"clq0s4b7j00015dw62cca8kw4","tag_id":"clomklku40001kxw63zegd3sg","_id":"clq0s4b7k00065dw6gph33a8n"},{"post_id":"clq0s4b7j00015dw62cca8kw4","tag_id":"cloy7augd0000blw6f1h753y9","_id":"clq0s4b7k00085dw6h9kb0x6g"},{"post_id":"clq0s4b7k00035dw6g57045bg","tag_id":"clomklku40001kxw63zegd3sg","_id":"clq0s4b7k000a5dw64je2gks7"},{"post_id":"clq0s4b7k00035dw6g57045bg","tag_id":"cloy7augd0000blw6f1h753y9","_id":"clq0s4b7k000b5dw620uc9s9i"},{"post_id":"clq6lxtzm0000lbw6bfszev06","tag_id":"clomklku40001kxw63zegd3sg","_id":"clq6lxtzo0002lbw6g75qhn3j"},{"post_id":"clq6lxtzm0000lbw6bfszev06","tag_id":"cloy7augd0000blw6f1h753y9","_id":"clq6lxtzo0004lbw64fw445et"},{"post_id":"clq6lxtzn0001lbw6flcf0gn4","tag_id":"clomklku40001kxw63zegd3sg","_id":"clqls3vvi0002ovw6b9q93cjo"},{"post_id":"clq6lxtzn0001lbw6flcf0gn4","tag_id":"cloy7augd0000blw6f1h753y9","_id":"clqls3vvj0004ovw6aca4919r"},{"post_id":"clq6lxtzo0003lbw63a4i1duv","tag_id":"clomklku40001kxw63zegd3sg","_id":"clqls3vvj0007ovw6ggaresv1"},{"post_id":"clq6lxtzo0003lbw63a4i1duv","tag_id":"cloy7augd0000blw6f1h753y9","_id":"clqls3vvk0009ovw61for7jy2"},{"post_id":"clqls3vvi0003ovw65nlf8a3u","tag_id":"clomklku40001kxw63zegd3sg","_id":"clqls3vvk000bovw62ytoaght"},{"post_id":"clqls3vvi0003ovw65nlf8a3u","tag_id":"cloy7augd0000blw6f1h753y9","_id":"clqls3vvk000dovw6bp5aadna"},{"post_id":"clqls3vvj0005ovw662xr0l17","tag_id":"cloy7augd0000blw6f1h753y9","_id":"clqls3vvl000fovw6d7mxcfqm"},{"post_id":"cm22ma9wx00009zw6ctwyamrt","tag_id":"clomklku40001kxw63zegd3sg","_id":"cm22ma9x000029zw6bz743xqw"},{"post_id":"cm22ma9wx00009zw6ctwyamrt","tag_id":"cloy7augd0000blw6f1h753y9","_id":"cm22ma9x000039zw64glj7f1l"},{"post_id":"cm22ma9wz00019zw663lu8o7g","tag_id":"cm28lqmpg0001lyw6h10ueqb7","_id":"cm28lqmpg0005lyw69fzb2m0z"},{"post_id":"cm22ma9wz00019zw663lu8o7g","tag_id":"cm28lqmpg0002lyw61et4ba6y","_id":"cm28lqmph0006lyw6dovycvya"},{"post_id":"cm22ma9wz00019zw663lu8o7g","tag_id":"cm28lqmpg0004lyw67cnsb5h1","_id":"cm28lqmph0007lyw615xg65k4"},{"post_id":"cm28ok88d0000eww60xuf3yim","tag_id":"cm28lqmpg0001lyw6h10ueqb7","_id":"cm28ok88i0002eww68h5j838t"},{"post_id":"cm28ok88d0000eww60xuf3yim","tag_id":"cm28lqmpg0002lyw61et4ba6y","_id":"cm28ok88i0003eww6fhlm6w17"},{"post_id":"cm28ok88d0000eww60xuf3yim","tag_id":"cm28lqmpg0004lyw67cnsb5h1","_id":"cm28ok88i0004eww67kcj7e2o"},{"post_id":"cm2bos5uv0000dow62cxr6472","tag_id":"cm28lqmpg0001lyw6h10ueqb7","_id":"cm2bos5v00003dow6cbgxehl8"},{"post_id":"cm2bos5uv0000dow62cxr6472","tag_id":"cm28lqmpg0002lyw61et4ba6y","_id":"cm2bos5v00004dow6hbxfdybv"},{"post_id":"cm2bos5uv0000dow62cxr6472","tag_id":"cm28lqmpg0004lyw67cnsb5h1","_id":"cm2bos5v00005dow6dws07zzr"},{"post_id":"cm2bos5uv0000dow62cxr6472","tag_id":"cm2bos5ux0001dow6fw0e5kyz","_id":"cm2bos5v00006dow62ek41tr1"},{"post_id":"cloy7augi000dblw60i4q3j4o","tag_id":"cm2bos5ux0001dow6fw0e5kyz","_id":"cm2bos5v50007dow6hdtw30my"},{"post_id":"cm2buup6v0000ihw6h51eb5lr","tag_id":"cm28lqmpg0001lyw6h10ueqb7","_id":"cm2buup6z0005ihw66qnv0xb1"},{"post_id":"cm2buup6v0000ihw6h51eb5lr","tag_id":"cm28lqmpg0002lyw61et4ba6y","_id":"cm2buup6z0006ihw629wjdh0k"},{"post_id":"cm2buup6v0000ihw6h51eb5lr","tag_id":"cm28lqmpg0004lyw67cnsb5h1","_id":"cm2buup6z0007ihw6eigb7f56"},{"post_id":"cm2buup6v0000ihw6h51eb5lr","tag_id":"cm2buup6y0002ihw67siq7hjl","_id":"cm2buup6z0009ihw6edzr9lsx"},{"post_id":"cm2buup6v0000ihw6h51eb5lr","tag_id":"cm2buup6y0003ihw6gwsdaefc","_id":"cm2buup6z000bihw6h47maqqe"},{"post_id":"cm2iekyw20000g1w6b20dd9f0","tag_id":"cm28lqmpg0001lyw6h10ueqb7","_id":"cm2iekyw60003g1w6e2arg8iz"},{"post_id":"cm2iekyw20000g1w6b20dd9f0","tag_id":"cm28lqmpg0002lyw61et4ba6y","_id":"cm2iekyw60004g1w68obq5yrx"},{"post_id":"cm2iekyw20000g1w6b20dd9f0","tag_id":"cm2iekyw50002g1w61u070i1c","_id":"cm2iekyw60006g1w6cbbmffb4"},{"post_id":"cm32f4ppl0000s4w602ky1eqy","tag_id":"cm28lqmpg0001lyw6h10ueqb7","_id":"cm32f4ppq0003s4w6dx3pbiwr"},{"post_id":"cm32f4ppl0000s4w602ky1eqy","tag_id":"cm28lqmpg0002lyw61et4ba6y","_id":"cm32f4ppq0004s4w6d25305yc"},{"post_id":"cm32f4ppl0000s4w602ky1eqy","tag_id":"cm32f4ppq0002s4w6ewqee8c9","_id":"cm32f4ppr0006s4w69psdbcvt"},{"post_id":"cm38m0cxh00024ew6911t3j9b","tag_id":"cm28lqmpg0001lyw6h10ueqb7","_id":"cm38m0cxl00094ew6hmfz4e80"},{"post_id":"cm38m0cxh00024ew6911t3j9b","tag_id":"cm28lqmpg0002lyw61et4ba6y","_id":"cm38m0cxl000a4ew6ct9m4ru7"},{"post_id":"cm38m0cxh00024ew6911t3j9b","tag_id":"cm38m0cxl00064ew6eokcbdmr","_id":"cm38m0cxl000c4ew66srl8vde"},{"post_id":"cm38m0cxl000d4ew6etf6fdjc","tag_id":"cm28lqmpg0001lyw6h10ueqb7","_id":"cm38m0cxm000e4ew67cahhvzk"},{"post_id":"cm38m0cxl000d4ew6etf6fdjc","tag_id":"cm28lqmpg0002lyw61et4ba6y","_id":"cm38m0cxm000f4ew60dui0zyp"},{"post_id":"cm38m0cxl000d4ew6etf6fdjc","tag_id":"cm38m0cxl00064ew6eokcbdmr","_id":"cm38m0cxm000h4ew61mf516rx"},{"post_id":"cm5firt1i0000zww62fyh72ym","tag_id":"cm5firt1o0003zww6gx2ih758","_id":"cm5firt1q000bzww66azpg2tg"},{"post_id":"cm5firt1i0000zww62fyh72ym","tag_id":"cm5firt1p0006zww65je2by6z","_id":"cm5firt1q000dzww62tq16h9c"},{"post_id":"cm5firt1k0001zww68igh4k6v","tag_id":"cm5firt1o0003zww6gx2ih758","_id":"cm5firt1r000hzww6h5n4eiqz"},{"post_id":"cm5firt1k0001zww68igh4k6v","tag_id":"cm5firt1q000ezww6ha07956v","_id":"cm5firt1r000izww6e9uq9t0l"},{"post_id":"cm5evjs7600001kw61yjfd9mi","tag_id":"cm5firt1o0003zww6gx2ih758","_id":"cm5firt1r000kzww6fl4kh8t4"},{"post_id":"cm5firt1p0004zww6djlfdi26","tag_id":"cm5firt1o0003zww6gx2ih758","_id":"cm5firt1r000lzww6ge7zcyzx"},{"post_id":"cm5firt1p0004zww6djlfdi26","tag_id":"cm5firt1r000jzww6gkfw4pgy","_id":"cm5firt1r000mzww67qtx0hsk"},{"post_id":"cm5tr3icr0000gafygo4qgwhh","tag_id":"cm5firt1o0003zww6gx2ih758","_id":"cm5tr3icu0003gafy3ptecrqt"},{"post_id":"cm5tr3icr0000gafygo4qgwhh","tag_id":"cm5tr3ics0001gafy12mmdjrp","_id":"cm5tr3icu0004gafy9wpg5u5j"},{"post_id":"cm5xkxz3h0000h1fy985h5vlw","tag_id":"cm5firt1o0003zww6gx2ih758","_id":"cm5xkxz3h0002h1fygluu5gjy"},{"post_id":"cm5xkxz3h0000h1fy985h5vlw","tag_id":"cm5tr3ics0001gafy12mmdjrp","_id":"cm5xkxz3h0004h1fy2gfrg34m"},{"post_id":"cm5xkxz3h0001h1fy58vs1duk","tag_id":"cm5firt1o0003zww6gx2ih758","_id":"cm5xkxz3i0007h1fy08bf3d2g"},{"post_id":"cm5xkxz3h0001h1fy58vs1duk","tag_id":"cm5tr3ics0001gafy12mmdjrp","_id":"cm5xkxz3i000ah1fybfjn2dnc"},{"post_id":"cm5xkxz3h0003h1fy5ur6am7q","tag_id":"cm5firt1o0003zww6gx2ih758","_id":"cm5xkxz3i000dh1fy902e1osn"},{"post_id":"cm5xkxz3h0003h1fy5ur6am7q","tag_id":"cm5tr3ics0001gafy12mmdjrp","_id":"cm5xkxz3j000gh1fy3nhua1bc"},{"post_id":"cm5xkxz3i0005h1fy2flufknf","tag_id":"cm5firt1o0003zww6gx2ih758","_id":"cm5xkxz3j000ih1fy9jl4hhg6"},{"post_id":"cm5xkxz3i0005h1fy2flufknf","tag_id":"cm5tr3ics0001gafy12mmdjrp","_id":"cm5xkxz3j000kh1fy39em9y55"},{"post_id":"cm5xkxz3i0008h1fydicf5kmq","tag_id":"cm5firt1o0003zww6gx2ih758","_id":"cm5xkxz3j000mh1fy7wneascx"},{"post_id":"cm5xkxz3i000bh1fy94m38xvr","tag_id":"cm5firt1o0003zww6gx2ih758","_id":"cm5xkxz3j000nh1fydmppbnhz"},{"post_id":"cm5xkxz3i000bh1fy94m38xvr","tag_id":"cm5tr3ics0001gafy12mmdjrp","_id":"cm5xkxz3j000oh1fybmwpdd5n"},{"post_id":"cm5xkxz3i000eh1fya91qftw5","tag_id":"cm5firt1o0003zww6gx2ih758","_id":"cm5xkxz3j000ph1fy5he1civf"},{"post_id":"cm5xkxz3i000eh1fya91qftw5","tag_id":"cm5tr3ics0001gafy12mmdjrp","_id":"cm5xkxz3j000qh1fybpkiflgs"}],"Tag":[{"name":"java","_id":"cloh2wf2f0006v4w65bd1hrnl"},{"name":"test1","_id":"cloh2wf2f0008v4w6cf3s4piz"},{"name":"test2","_id":"cloh2wf2f000av4w64v1m8ak9"},{"name":"test3","_id":"cloh2wf2g000fv4w69zf39s3x"},{"name":"vue3","_id":"clomklku40001kxw63zegd3sg"},{"name":"vue3 vue","_id":"clomnf3uz0006m5w69qvgdsme"},{"name":"vue","_id":"cloy7augd0000blw6f1h753y9"},{"name":"JavaScript","_id":"clpl36b6x000459w61wlg22ym"},{"name":"面经","_id":"cm28lqmpg0001lyw6h10ueqb7"},{"name":"计算机网络","_id":"cm28lqmpg0002lyw61et4ba6y"},{"name":"url","_id":"cm28lqmpg0004lyw67cnsb5h1"},{"name":"实践问题","_id":"cm2bos5ux0001dow6fw0e5kyz"},{"name":"状态码","_id":"cm2buup6y0002ihw67siq7hjl"},{"name":"浏览器","_id":"cm2buup6y0003ihw6gwsdaefc"},{"name":"DNS","_id":"cm2iekyw50002g1w61u070i1c"},{"name":"CDN","_id":"cm32f4ppq0002s4w6ewqee8c9"},{"name":"ECIC 面经","_id":"cm38m0cxk00044ew6ac0e0pu2"},{"name":"TCP","_id":"cm38m0cxl00064ew6eokcbdmr"},{"name":"web3","_id":"cm5firt1o0003zww6gx2ih758"},{"name":"密码学","_id":"cm5firt1p0006zww65je2by6z"},{"name":"共识协议","_id":"cm5firt1q000ezww6ha07956v"},{"name":"数据结构","_id":"cm5firt1r000jzww6gkfw4pgy"},{"name":"BTC","_id":"cm5tr3ics0001gafy12mmdjrp"}]}}